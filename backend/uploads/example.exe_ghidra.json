{
  "functions": [
    {
      "signature": "undefined8 __fastcall FUN_140001080(void)", 
      "disassembly": [
        {
          "address": "0x140001080", 
          "code": "LEA RAX,[0x140005e58]"
        }, 
        {
          "address": "0x140001087", 
          "code": "RET"
        }
      ], 
      "c_code": "\nundefined8 FUN_140001080(void)\n\n{\n  return 0x140005e58;\n}\n\n", 
      "name": "FUN_140001080", 
      "entry_point": "0x140001080"
    }, 
    {
      "signature": "CWinApp * __fastcall FUN_140001090(CWinApp * param_1, uint param_2)", 
      "disassembly": [
        {
          "address": "0x140001090", 
          "code": "MOV qword ptr [RSP + 0x8],RBX"
        }, 
        {
          "address": "0x140001095", 
          "code": "PUSH RDI"
        }, 
        {
          "address": "0x140001096", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x14000109a", 
          "code": "MOV EDI,EDX"
        }, 
        {
          "address": "0x14000109c", 
          "code": "MOV RBX,RCX"
        }, 
        {
          "address": "0x14000109f", 
          "code": "CALL qword ptr [0x140005738]"
        }, 
        {
          "address": "0x1400010a5", 
          "code": "TEST DIL,0x1"
        }, 
        {
          "address": "0x1400010a9", 
          "code": "JZ 0x1400010d2"
        }, 
        {
          "address": "0x1400010ab", 
          "code": "MOV RCX,RBX"
        }, 
        {
          "address": "0x1400010ae", 
          "code": "TEST DIL,0x4"
        }, 
        {
          "address": "0x1400010b2", 
          "code": "JNZ 0x1400010c8"
        }, 
        {
          "address": "0x1400010b4", 
          "code": "CALL qword ptr [0x1400058a0]"
        }, 
        {
          "address": "0x1400010ba", 
          "code": "MOV RAX,RBX"
        }, 
        {
          "address": "0x1400010bd", 
          "code": "MOV RBX,qword ptr [RSP + 0x30]"
        }, 
        {
          "address": "0x1400010c2", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x1400010c6", 
          "code": "POP RDI"
        }, 
        {
          "address": "0x1400010c7", 
          "code": "RET"
        }, 
        {
          "address": "0x1400010c8", 
          "code": "MOV EDX,0x178"
        }, 
        {
          "address": "0x1400010cd", 
          "code": "CALL 0x140001350"
        }, 
        {
          "address": "0x1400010d2", 
          "code": "MOV RAX,RBX"
        }, 
        {
          "address": "0x1400010d5", 
          "code": "MOV RBX,qword ptr [RSP + 0x30]"
        }, 
        {
          "address": "0x1400010da", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x1400010de", 
          "code": "POP RDI"
        }, 
        {
          "address": "0x1400010df", 
          "code": "RET"
        }
      ], 
      "c_code": "\nCWinApp * FUN_140001090(CWinApp *param_1,uint param_2)\n\n{\n  CWinApp::~CWinApp(param_1);\n  if ((param_2 & 1) != 0) {\n    if ((param_2 & 4) == 0) {\n      operator_delete(param_1);\n      return param_1;\n    }\n    _guard_check_icall();\n  }\n  return param_1;\n}\n\n", 
      "name": "FUN_140001090", 
      "entry_point": "0x140001090"
    }, 
    {
      "signature": "undefined __fastcall FUN_1400010e0(CWinApp * param_1)", 
      "disassembly": [
        {
          "address": "0x1400010e0", 
          "code": "MOV qword ptr [RSP + 0x10],RBX"
        }, 
        {
          "address": "0x1400010e5", 
          "code": "PUSH RDI"
        }, 
        {
          "address": "0x1400010e6", 
          "code": "SUB RSP,0x1d0"
        }, 
        {
          "address": "0x1400010ed", 
          "code": "MOV RAX,qword ptr [0x14000a040]"
        }, 
        {
          "address": "0x1400010f4", 
          "code": "XOR RAX,RSP"
        }, 
        {
          "address": "0x1400010f7", 
          "code": "MOV qword ptr [RSP + 0x1c0],RAX"
        }, 
        {
          "address": "0x1400010ff", 
          "code": "MOV RDI,RCX"
        }, 
        {
          "address": "0x140001102", 
          "code": "MOV dword ptr [RSP + 0x28],0x8"
        }, 
        {
          "address": "0x14000110a", 
          "code": "MOV dword ptr [RSP + 0x2c],0xff"
        }, 
        {
          "address": "0x140001112", 
          "code": "LEA RCX,[RSP + 0x28]"
        }, 
        {
          "address": "0x140001117", 
          "code": "CALL qword ptr [0x140005038]"
        }, 
        {
          "address": "0x14000111d", 
          "code": "MOV RCX,RDI"
        }, 
        {
          "address": "0x140001120", 
          "code": "CALL qword ptr [0x140005730]"
        }, 
        {
          "address": "0x140001126", 
          "code": "XOR ECX,ECX"
        }, 
        {
          "address": "0x140001128", 
          "code": "CALL qword ptr [0x140005728]"
        }, 
        {
          "address": "0x14000112e", 
          "code": "MOV ECX,0x18"
        }, 
        {
          "address": "0x140001133", 
          "code": "CALL qword ptr [0x140005720]"
        }, 
        {
          "address": "0x140001139", 
          "code": "MOV qword ptr [RSP + 0x20],RAX"
        }, 
        {
          "address": "0x14000113e", 
          "code": "TEST RAX,RAX"
        }, 
        {
          "address": "0x140001141", 
          "code": "JZ 0x14000115d"
        }, 
        {
          "address": "0x140001143", 
          "code": "XORPS XMM0,XMM0"
        }, 
        {
          "address": "0x140001146", 
          "code": "XOR ECX,ECX"
        }, 
        {
          "address": "0x140001148", 
          "code": "MOVUPS xmmword ptr [RAX],XMM0"
        }, 
        {
          "address": "0x14000114b", 
          "code": "MOV qword ptr [RAX + 0x10],RCX"
        }, 
        {
          "address": "0x14000114f", 
          "code": "MOV RCX,RAX"
        }, 
        {
          "address": "0x140001152", 
          "code": "CALL qword ptr [0x140005718]"
        }, 
        {
          "address": "0x140001158", 
          "code": "MOV RBX,RAX"
        }, 
        {
          "address": "0x14000115b", 
          "code": "JMP 0x14000115f"
        }, 
        {
          "address": "0x14000115d", 
          "code": "XOR EBX,EBX"
        }, 
        {
          "address": "0x14000115f", 
          "code": "CALL qword ptr [0x140005708]"
        }, 
        {
          "address": "0x140001165", 
          "code": "MOV RCX,RAX"
        }, 
        {
          "address": "0x140001168", 
          "code": "CALL qword ptr [0x140005710]"
        }, 
        {
          "address": "0x14000116e", 
          "code": "LEA RDX,[0x140005a38]"
        }, 
        {
          "address": "0x140001175", 
          "code": "MOV RCX,RDI"
        }, 
        {
          "address": "0x140001178", 
          "code": "CALL qword ptr [0x140005700]"
        }, 
        {
          "address": "0x14000117e", 
          "code": "XOR EDX,EDX"
        }, 
        {
          "address": "0x140001180", 
          "code": "MOV R8D,0x188"
        }, 
        {
          "address": "0x140001186", 
          "code": "LEA RCX,[RSP + 0x30]"
        }, 
        {
          "address": "0x14000118b", 
          "code": "CALL 0x140004098"
        }, 
        {
          "address": "0x140001190", 
          "code": "XOR R8D,R8D"
        }, 
        {
          "address": "0x140001193", 
          "code": "LEA EDX,[R8 + 0x66]"
        }, 
        {
          "address": "0x140001197", 
          "code": "LEA RCX,[RSP + 0x30]"
        }, 
        {
          "address": "0x14000119c", 
          "code": "CALL qword ptr [0x1400054d8]"
        }, 
        {
          "address": "0x1400011a2", 
          "code": "NOP"
        }, 
        {
          "address": "0x1400011a3", 
          "code": "LEA RAX,[0x1400060c0]"
        }, 
        {
          "address": "0x1400011aa", 
          "code": "MOV qword ptr [RSP + 0x30],RAX"
        }, 
        {
          "address": "0x1400011af", 
          "code": "LEA RDX,[0x1400060b0]"
        }, 
        {
          "address": "0x1400011b6", 
          "code": "LEA RCX,[RSP + 0x1a8]"
        }, 
        {
          "address": "0x1400011be", 
          "code": "CALL qword ptr [0x1400054b8]"
        }, 
        {
          "address": "0x1400011c4", 
          "code": "NOP"
        }, 
        {
          "address": "0x1400011c5", 
          "code": "LEA RDX,[0x1400060b0]"
        }, 
        {
          "address": "0x1400011cc", 
          "code": "LEA RCX,[RSP + 0x1b0]"
        }, 
        {
          "address": "0x1400011d4", 
          "code": "CALL qword ptr [0x1400054b8]"
        }, 
        {
          "address": "0x1400011da", 
          "code": "NOP"
        }, 
        {
          "address": "0x1400011db", 
          "code": "CALL qword ptr [0x1400054a0]"
        }, 
        {
          "address": "0x1400011e1", 
          "code": "MOV EDX,0xe"
        }, 
        {
          "address": "0x1400011e6", 
          "code": "LEA ECX,[RDX + 0x72]"
        }, 
        {
          "address": "0x1400011e9", 
          "code": "CALL qword ptr [0x1400054a8]"
        }, 
        {
          "address": "0x1400011ef", 
          "code": "MOV RCX,RAX"
        }, 
        {
          "address": "0x1400011f2", 
          "code": "MOV EDX,0x80"
        }, 
        {
          "address": "0x1400011f7", 
          "code": "CALL qword ptr [0x1400051d8]"
        }, 
        {
          "address": "0x1400011fd", 
          "code": "MOV qword ptr [RSP + 0x1a0],RAX"
        }, 
        {
          "address": "0x140001205", 
          "code": "LEA RAX,[RSP + 0x30]"
        }, 
        {
          "address": "0x14000120a", 
          "code": "MOV qword ptr [RDI + 0x40],RAX"
        }, 
        {
          "address": "0x14000120e", 
          "code": "LEA RCX,[RSP + 0x30]"
        }, 
        {
          "address": "0x140001213", 
          "code": "CALL qword ptr [0x1400056f0]"
        }, 
        {
          "address": "0x140001219", 
          "code": "TEST RBX,RBX"
        }, 
        {
          "address": "0x14000121c", 
          "code": "JZ 0x14000122d"
        }, 
        {
          "address": "0x14000121e", 
          "code": "MOV RAX,qword ptr [RBX]"
        }, 
        {
          "address": "0x140001221", 
          "code": "MOV EDX,0x1"
        }, 
        {
          "address": "0x140001226", 
          "code": "MOV RCX,RBX"
        }, 
        {
          "address": "0x140001229", 
          "code": "CALL qword ptr [RAX + 0x8]"
        }, 
        {
          "address": "0x14000122c", 
          "code": "NOP"
        }, 
        {
          "address": "0x14000122d", 
          "code": "LEA RCX,[RSP + 0x1b0]"
        }, 
        {
          "address": "0x140001235", 
          "code": "CALL qword ptr [0x1400056e8]"
        }, 
        {
          "address": "0x14000123b", 
          "code": "LEA RCX,[RSP + 0x1a8]"
        }, 
        {
          "address": "0x140001243", 
          "code": "CALL qword ptr [0x1400056e8]"
        }, 
        {
          "address": "0x140001249", 
          "code": "LEA RCX,[RSP + 0x188]"
        }, 
        {
          "address": "0x140001251", 
          "code": "CALL qword ptr [0x1400056a8]"
        }, 
        {
          "address": "0x140001257", 
          "code": "LEA RAX,[0x140005a60]"
        }, 
        {
          "address": "0x14000125e", 
          "code": "MOV qword ptr [RSP + 0x170],RAX"
        }, 
        {
          "address": "0x140001266", 
          "code": "LEA RCX,[RSP + 0x170]"
        }, 
        {
          "address": "0x14000126e", 
          "code": "CALL 0x140001490"
        }, 
        {
          "address": "0x140001273", 
          "code": "LEA RCX,[RSP + 0x30]"
        }, 
        {
          "address": "0x140001278", 
          "code": "CALL qword ptr [0x1400056e0]"
        }, 
        {
          "address": "0x14000127e", 
          "code": "XOR EAX,EAX"
        }, 
        {
          "address": "0x140001280", 
          "code": "MOV RCX,qword ptr [RSP + 0x1c0]"
        }, 
        {
          "address": "0x140001288", 
          "code": "XOR RCX,RSP"
        }, 
        {
          "address": "0x14000128b", 
          "code": "CALL 0x140003550"
        }, 
        {
          "address": "0x140001290", 
          "code": "MOV RBX,qword ptr [RSP + 0x1e8]"
        }, 
        {
          "address": "0x140001298", 
          "code": "ADD RSP,0x1d0"
        }, 
        {
          "address": "0x14000129f", 
          "code": "POP RDI"
        }, 
        {
          "address": "0x1400012a0", 
          "code": "RET"
        }
      ], 
      "c_code": "\nvoid FUN_1400010e0(CWinApp *param_1)\n\n{\n  longlong *plVar1;\n  CRuntimeClass *pCVar2;\n  HINSTANCE__ *hInstance;\n  undefined1 auStack_1d8 [32];\n  CShellManager *local_1b8;\n  INITCOMMONCONTROLSEX local_1b0;\n  undefined **local_1a8 [40];\n  undefined **local_68 [3];\n  CDialogImpl local_50 [24];\n  HICON local_38;\n  CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_> local_30 [8];\n  CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_> local_28 [16];\n  ulonglong local_18;\n  \n  local_18 = DAT_14000a040 ^ (ulonglong)auStack_1d8;\n  local_1b0.dwSize = 8;\n  local_1b0.dwICC = 0xff;\n  InitCommonControlsEx(&local_1b0);\n  CWinApp::InitInstance(param_1);\n  AfxEnableControlContainer((COccManager *)0x0);\n  local_1b8 = (CShellManager *)operator_new(0x18);\n  if (local_1b8 == (CShellManager *)0x0) {\n    plVar1 = (longlong *)0x0;\n  }\n  else {\n    *(undefined8 *)local_1b8 = 0;\n    *(undefined8 *)(local_1b8 + 8) = 0;\n    *(undefined8 *)(local_1b8 + 0x10) = 0;\n    plVar1 = (longlong *)CShellManager::CShellManager(local_1b8);\n  }\n  pCVar2 = CMFCVisualManagerWindows::GetThisClass();\n  CMFCVisualManager::SetDefaultManager(pCVar2);\n  CWinApp::SetRegistryKey(param_1,L\"\u5e94\u7528\u7a0b\u5e8f\u5411\u5bfc\u751f\u6210\u7684\u672c\u5730\u5e94\u7528\u7a0b\u5e8f\");\n  memset(local_1a8,0,0x188);\n  CDialogEx::CDialogEx((CDialogEx *)local_1a8,0x66,(CWnd *)0x0);\n  local_1a8[0] = CMFCApplication3Dlg::vftable;\n  ATL::CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_>::\n  CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_>(local_30,L\"\");\n  ATL::CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_>::\n  CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_>(local_28,L\"\");\n  AfxGetModuleState();\n  hInstance = AfxFindResourceHandle((wchar_t *)0x80,(wchar_t *)0xe);\n  local_38 = LoadIconW(hInstance,(LPCWSTR)0x80);\n  *(undefined ****)(param_1 + 0x40) = local_1a8;\n  CDialog::DoModal((CDialog *)local_1a8);\n  if (plVar1 != (longlong *)0x0) {\n    (**(code **)(*plVar1 + 8))(plVar1,1);\n  }\n  ATL::CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_>::\n  ~CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_>(local_28);\n  ATL::CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_>::\n  ~CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_>(local_30);\n  CDialogImpl::~CDialogImpl(local_50);\n  local_68[0] = CBrush::vftable;\n  FUN_140001490((CGdiObject *)local_68);\n  CDialog::~CDialog((CDialog *)local_1a8);\n  FUN_140003550(local_18 ^ (ulonglong)auStack_1d8);\n  return;\n}\n\n", 
      "name": "FUN_1400010e0", 
      "entry_point": "0x1400010e0"
    }, 
    {
      "signature": "undefined __fastcall FUN_1400012b0(CDialog * param_1)", 
      "disassembly": [
        {
          "address": "0x1400012b0", 
          "code": "PUSH RBX"
        }, 
        {
          "address": "0x1400012b2", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x1400012b6", 
          "code": "MOV RBX,RCX"
        }, 
        {
          "address": "0x1400012b9", 
          "code": "ADD RCX,0x180"
        }, 
        {
          "address": "0x1400012c0", 
          "code": "CALL qword ptr [0x1400056e8]"
        }, 
        {
          "address": "0x1400012c6", 
          "code": "LEA RCX,[RBX + 0x178]"
        }, 
        {
          "address": "0x1400012cd", 
          "code": "CALL qword ptr [0x1400056e8]"
        }, 
        {
          "address": "0x1400012d3", 
          "code": "LEA RCX,[RBX + 0x158]"
        }, 
        {
          "address": "0x1400012da", 
          "code": "CALL qword ptr [0x1400056a8]"
        }, 
        {
          "address": "0x1400012e0", 
          "code": "LEA RCX,[RBX + 0x140]"
        }, 
        {
          "address": "0x1400012e7", 
          "code": "LEA RAX,[0x140005a60]"
        }, 
        {
          "address": "0x1400012ee", 
          "code": "MOV qword ptr [RCX],RAX"
        }, 
        {
          "address": "0x1400012f1", 
          "code": "CALL 0x140001490"
        }, 
        {
          "address": "0x1400012f6", 
          "code": "MOV RCX,RBX"
        }, 
        {
          "address": "0x1400012f9", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x1400012fd", 
          "code": "POP RBX"
        }, 
        {
          "address": "0x1400012fe", 
          "code": "JMP qword ptr [0x1400056e0]"
        }
      ], 
      "c_code": "\nvoid FUN_1400012b0(CDialog *param_1)\n\n{\n  ATL::CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_>::\n  ~CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_>\n            ((CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_> *)\n             (param_1 + 0x180));\n  ATL::CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_>::\n  ~CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_>\n            ((CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_> *)\n             (param_1 + 0x178));\n  CDialogImpl::~CDialogImpl((CDialogImpl *)(param_1 + 0x158));\n  *(undefined ***)(param_1 + 0x140) = CBrush::vftable;\n  FUN_140001490((CGdiObject *)(param_1 + 0x140));\n                    /* WARNING: Could not recover jumptable at 0x0001400012fe. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  CDialog::~CDialog(param_1);\n  return;\n}\n\n", 
      "name": "FUN_1400012b0", 
      "entry_point": "0x1400012b0"
    }, 
    {
      "signature": "undefined __fastcall FUN_140001310(CDialog * param_1)", 
      "disassembly": [
        {
          "address": "0x140001310", 
          "code": "PUSH RBX"
        }, 
        {
          "address": "0x140001312", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x140001316", 
          "code": "MOV RBX,RCX"
        }, 
        {
          "address": "0x140001319", 
          "code": "ADD RCX,0x158"
        }, 
        {
          "address": "0x140001320", 
          "code": "CALL qword ptr [0x1400056a8]"
        }, 
        {
          "address": "0x140001326", 
          "code": "LEA RCX,[RBX + 0x140]"
        }, 
        {
          "address": "0x14000132d", 
          "code": "LEA RAX,[0x140005a60]"
        }, 
        {
          "address": "0x140001334", 
          "code": "MOV qword ptr [RCX],RAX"
        }, 
        {
          "address": "0x140001337", 
          "code": "CALL 0x140001490"
        }, 
        {
          "address": "0x14000133c", 
          "code": "MOV RCX,RBX"
        }, 
        {
          "address": "0x14000133f", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x140001343", 
          "code": "POP RBX"
        }, 
        {
          "address": "0x140001344", 
          "code": "JMP qword ptr [0x1400056e0]"
        }
      ], 
      "c_code": "\nvoid FUN_140001310(CDialog *param_1)\n\n{\n  CDialogImpl::~CDialogImpl((CDialogImpl *)(param_1 + 0x158));\n  *(undefined ***)(param_1 + 0x140) = CBrush::vftable;\n  FUN_140001490((CGdiObject *)(param_1 + 0x140));\n                    /* WARNING: Could not recover jumptable at 0x000140001344. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  CDialog::~CDialog(param_1);\n  return;\n}\n\n", 
      "name": "FUN_140001310", 
      "entry_point": "0x140001310"
    }, 
    {
      "signature": "undefined __fastcall _guard_check_icall(void)", 
      "disassembly": [
        {
          "address": "0x140001350", 
          "code": "RET 0x0"
        }
      ], 
      "c_code": "\nvoid _guard_check_icall(void)\n\n{\n  return;\n}\n\n", 
      "name": "_guard_check_icall", 
      "entry_point": "0x140001350"
    }, 
    {
      "signature": "undefined8 __fastcall FUN_140001360(void)", 
      "disassembly": [
        {
          "address": "0x140001360", 
          "code": "MOV EAX,0x1388"
        }, 
        {
          "address": "0x140001365", 
          "code": "RET"
        }
      ], 
      "c_code": "\nundefined8 FUN_140001360(void)\n\n{\n  return 5000;\n}\n\n", 
      "name": "FUN_140001360", 
      "entry_point": "0x140001360"
    }, 
    {
      "signature": "undefined8 __fastcall FUN_140001370(void)", 
      "disassembly": [
        {
          "address": "0x140001370", 
          "code": "XOR EAX,EAX"
        }, 
        {
          "address": "0x140001372", 
          "code": "RET"
        }
      ], 
      "c_code": "\nundefined8 FUN_140001370(void)\n\n{\n  return 0;\n}\n\n", 
      "name": "FUN_140001370", 
      "entry_point": "0x140001370"
    }, 
    {
      "signature": "uint __fastcall FUN_140001380(longlong param_1)", 
      "disassembly": [
        {
          "address": "0x140001380", 
          "code": "MOV EAX,dword ptr [RCX + 0x14c]"
        }, 
        {
          "address": "0x140001386", 
          "code": "AND EAX,0x20"
        }, 
        {
          "address": "0x140001389", 
          "code": "RET"
        }
      ], 
      "c_code": "\nuint FUN_140001380(longlong param_1)\n\n{\n  return *(uint *)(param_1 + 0x14c) & 0x20;\n}\n\n", 
      "name": "FUN_140001380", 
      "entry_point": "0x140001380"
    }, 
    {
      "signature": "uint __fastcall FUN_140001390(longlong param_1)", 
      "disassembly": [
        {
          "address": "0x140001390", 
          "code": "MOV EAX,dword ptr [RCX + 0x14c]"
        }, 
        {
          "address": "0x140001396", 
          "code": "AND EAX,0x10"
        }, 
        {
          "address": "0x140001399", 
          "code": "RET"
        }
      ], 
      "c_code": "\nuint FUN_140001390(longlong param_1)\n\n{\n  return *(uint *)(param_1 + 0x14c) & 0x10;\n}\n\n", 
      "name": "FUN_140001390", 
      "entry_point": "0x140001390"
    }, 
    {
      "signature": "uint __fastcall FUN_1400013a0(longlong param_1)", 
      "disassembly": [
        {
          "address": "0x1400013a0", 
          "code": "MOV EAX,dword ptr [RCX + 0x14c]"
        }, 
        {
          "address": "0x1400013a6", 
          "code": "AND EAX,0x8"
        }, 
        {
          "address": "0x1400013a9", 
          "code": "RET"
        }
      ], 
      "c_code": "\nuint FUN_1400013a0(longlong param_1)\n\n{\n  return *(uint *)(param_1 + 0x14c) & 8;\n}\n\n", 
      "name": "FUN_1400013a0", 
      "entry_point": "0x1400013a0"
    }, 
    {
      "signature": "uint __fastcall FUN_1400013b0(longlong param_1)", 
      "disassembly": [
        {
          "address": "0x1400013b0", 
          "code": "MOV EAX,dword ptr [RCX + 0x14c]"
        }, 
        {
          "address": "0x1400013b6", 
          "code": "AND EAX,0x4"
        }, 
        {
          "address": "0x1400013b9", 
          "code": "RET"
        }
      ], 
      "c_code": "\nuint FUN_1400013b0(longlong param_1)\n\n{\n  return *(uint *)(param_1 + 0x14c) & 4;\n}\n\n", 
      "name": "FUN_1400013b0", 
      "entry_point": "0x1400013b0"
    }, 
    {
      "signature": "uint __fastcall FUN_1400013c0(longlong param_1)", 
      "disassembly": [
        {
          "address": "0x1400013c0", 
          "code": "MOV EAX,dword ptr [RCX + 0x14c]"
        }, 
        {
          "address": "0x1400013c6", 
          "code": "AND EAX,0x2"
        }, 
        {
          "address": "0x1400013c9", 
          "code": "RET"
        }
      ], 
      "c_code": "\nuint FUN_1400013c0(longlong param_1)\n\n{\n  return *(uint *)(param_1 + 0x14c) & 2;\n}\n\n", 
      "name": "FUN_1400013c0", 
      "entry_point": "0x1400013c0"
    }, 
    {
      "signature": "uint __fastcall FUN_1400013d0(longlong param_1)", 
      "disassembly": [
        {
          "address": "0x1400013d0", 
          "code": "MOV EAX,dword ptr [RCX + 0x14c]"
        }, 
        {
          "address": "0x1400013d6", 
          "code": "AND EAX,0x1"
        }, 
        {
          "address": "0x1400013d9", 
          "code": "RET"
        }
      ], 
      "c_code": "\nuint FUN_1400013d0(longlong param_1)\n\n{\n  return *(uint *)(param_1 + 0x14c) & 1;\n}\n\n", 
      "name": "FUN_1400013d0", 
      "entry_point": "0x1400013d0"
    }, 
    {
      "signature": "CGdiObject * __fastcall FUN_1400013e0(CGdiObject * param_1, uint param_2)", 
      "disassembly": [
        {
          "address": "0x1400013e0", 
          "code": "MOV qword ptr [RSP + 0x8],RBX"
        }, 
        {
          "address": "0x1400013e5", 
          "code": "PUSH RDI"
        }, 
        {
          "address": "0x1400013e6", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x1400013ea", 
          "code": "LEA RAX,[0x140005a60]"
        }, 
        {
          "address": "0x1400013f1", 
          "code": "MOV EDI,EDX"
        }, 
        {
          "address": "0x1400013f3", 
          "code": "MOV qword ptr [RCX],RAX"
        }, 
        {
          "address": "0x1400013f6", 
          "code": "MOV RBX,RCX"
        }, 
        {
          "address": "0x1400013f9", 
          "code": "CALL 0x140001490"
        }, 
        {
          "address": "0x1400013fe", 
          "code": "TEST DIL,0x1"
        }, 
        {
          "address": "0x140001402", 
          "code": "JZ 0x14000142b"
        }, 
        {
          "address": "0x140001404", 
          "code": "MOV RCX,RBX"
        }, 
        {
          "address": "0x140001407", 
          "code": "TEST DIL,0x4"
        }, 
        {
          "address": "0x14000140b", 
          "code": "JNZ 0x140001421"
        }, 
        {
          "address": "0x14000140d", 
          "code": "CALL qword ptr [0x1400058a0]"
        }, 
        {
          "address": "0x140001413", 
          "code": "MOV RAX,RBX"
        }, 
        {
          "address": "0x140001416", 
          "code": "MOV RBX,qword ptr [RSP + 0x30]"
        }, 
        {
          "address": "0x14000141b", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x14000141f", 
          "code": "POP RDI"
        }, 
        {
          "address": "0x140001420", 
          "code": "RET"
        }, 
        {
          "address": "0x140001421", 
          "code": "MOV EDX,0x10"
        }, 
        {
          "address": "0x140001426", 
          "code": "CALL 0x140001350"
        }, 
        {
          "address": "0x14000142b", 
          "code": "MOV RAX,RBX"
        }, 
        {
          "address": "0x14000142e", 
          "code": "MOV RBX,qword ptr [RSP + 0x30]"
        }, 
        {
          "address": "0x140001433", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x140001437", 
          "code": "POP RDI"
        }, 
        {
          "address": "0x140001438", 
          "code": "RET"
        }
      ], 
      "c_code": "\nCGdiObject * FUN_1400013e0(CGdiObject *param_1,uint param_2)\n\n{\n  *(undefined ***)param_1 = CBrush::vftable;\n  FUN_140001490(param_1);\n  if ((param_2 & 1) != 0) {\n    if ((param_2 & 4) == 0) {\n      operator_delete(param_1);\n      return param_1;\n    }\n    _guard_check_icall();\n  }\n  return param_1;\n}\n\n", 
      "name": "FUN_1400013e0", 
      "entry_point": "0x1400013e0"
    }, 
    {
      "signature": "CGdiObject * __fastcall FUN_140001440(CGdiObject * param_1, uint param_2)", 
      "disassembly": [
        {
          "address": "0x140001440", 
          "code": "MOV qword ptr [RSP + 0x8],RBX"
        }, 
        {
          "address": "0x140001445", 
          "code": "PUSH RDI"
        }, 
        {
          "address": "0x140001446", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x14000144a", 
          "code": "MOV EDI,EDX"
        }, 
        {
          "address": "0x14000144c", 
          "code": "MOV RBX,RCX"
        }, 
        {
          "address": "0x14000144f", 
          "code": "CALL 0x140001490"
        }, 
        {
          "address": "0x140001454", 
          "code": "TEST DIL,0x1"
        }, 
        {
          "address": "0x140001458", 
          "code": "JZ 0x140001481"
        }, 
        {
          "address": "0x14000145a", 
          "code": "MOV RCX,RBX"
        }, 
        {
          "address": "0x14000145d", 
          "code": "TEST DIL,0x4"
        }, 
        {
          "address": "0x140001461", 
          "code": "JNZ 0x140001477"
        }, 
        {
          "address": "0x140001463", 
          "code": "CALL qword ptr [0x1400058a0]"
        }, 
        {
          "address": "0x140001469", 
          "code": "MOV RAX,RBX"
        }, 
        {
          "address": "0x14000146c", 
          "code": "MOV RBX,qword ptr [RSP + 0x30]"
        }, 
        {
          "address": "0x140001471", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x140001475", 
          "code": "POP RDI"
        }, 
        {
          "address": "0x140001476", 
          "code": "RET"
        }, 
        {
          "address": "0x140001477", 
          "code": "MOV EDX,0x10"
        }, 
        {
          "address": "0x14000147c", 
          "code": "CALL 0x140001350"
        }, 
        {
          "address": "0x140001481", 
          "code": "MOV RAX,RBX"
        }, 
        {
          "address": "0x140001484", 
          "code": "MOV RBX,qword ptr [RSP + 0x30]"
        }, 
        {
          "address": "0x140001489", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x14000148d", 
          "code": "POP RDI"
        }, 
        {
          "address": "0x14000148e", 
          "code": "RET"
        }
      ], 
      "c_code": "\nCGdiObject * FUN_140001440(CGdiObject *param_1,uint param_2)\n\n{\n  FUN_140001490(param_1);\n  if ((param_2 & 1) != 0) {\n    if ((param_2 & 4) == 0) {\n      operator_delete(param_1);\n      return param_1;\n    }\n    _guard_check_icall();\n  }\n  return param_1;\n}\n\n", 
      "name": "FUN_140001440", 
      "entry_point": "0x140001440"
    }, 
    {
      "signature": "undefined __fastcall FUN_140001490(CGdiObject * param_1)", 
      "disassembly": [
        {
          "address": "0x140001490", 
          "code": "SUB RSP,0x458"
        }, 
        {
          "address": "0x140001497", 
          "code": "MOV RAX,qword ptr [0x14000a040]"
        }, 
        {
          "address": "0x14000149e", 
          "code": "XOR RAX,RSP"
        }, 
        {
          "address": "0x1400014a1", 
          "code": "MOV qword ptr [RSP + 0x440],RAX"
        }, 
        {
          "address": "0x1400014a9", 
          "code": "LEA RAX,[0x140005a90]"
        }, 
        {
          "address": "0x1400014b0", 
          "code": "MOV qword ptr [RCX],RAX"
        }, 
        {
          "address": "0x1400014b3", 
          "code": "CALL qword ptr [0x1400056c0]"
        }, 
        {
          "address": "0x1400014b9", 
          "code": "NOP"
        }, 
        {
          "address": "0x1400014ba", 
          "code": "MOV RCX,qword ptr [RSP + 0x440]"
        }, 
        {
          "address": "0x1400014c2", 
          "code": "XOR RCX,RSP"
        }, 
        {
          "address": "0x1400014c5", 
          "code": "CALL 0x140003550"
        }, 
        {
          "address": "0x1400014ca", 
          "code": "ADD RSP,0x458"
        }, 
        {
          "address": "0x1400014d1", 
          "code": "RET"
        }
      ], 
      "c_code": "\nvoid FUN_140001490(CGdiObject *param_1)\n\n{\n  undefined1 auStack_458 [1088];\n  ulonglong local_18;\n  \n  local_18 = DAT_14000a040 ^ (ulonglong)auStack_458;\n  *(undefined ***)param_1 = CGdiObject::vftable;\n  CGdiObject::DeleteObject(param_1);\n  FUN_140003550(local_18 ^ (ulonglong)auStack_458);\n  return;\n}\n\n", 
      "name": "FUN_140001490", 
      "entry_point": "0x140001490"
    }, 
    {
      "signature": "undefined8 * __fastcall FUN_1400014f0(undefined8 * param_1, longlong param_2)", 
      "disassembly": [
        {
          "address": "0x1400014f0", 
          "code": "PUSH RBX"
        }, 
        {
          "address": "0x1400014f2", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x1400014f6", 
          "code": "MOV RBX,RCX"
        }, 
        {
          "address": "0x1400014f9", 
          "code": "MOV RAX,RDX"
        }, 
        {
          "address": "0x1400014fc", 
          "code": "LEA RCX,[0x1400067b0]"
        }, 
        {
          "address": "0x140001503", 
          "code": "XORPS XMM0,XMM0"
        }, 
        {
          "address": "0x140001506", 
          "code": "LEA RDX,[RBX + 0x8]"
        }, 
        {
          "address": "0x14000150a", 
          "code": "MOV qword ptr [RBX],RCX"
        }, 
        {
          "address": "0x14000150d", 
          "code": "LEA RCX,[RAX + 0x8]"
        }, 
        {
          "address": "0x140001511", 
          "code": "MOVUPS xmmword ptr [RDX],XMM0"
        }, 
        {
          "address": "0x140001514", 
          "code": "CALL qword ptr [0x1400051e8]"
        }, 
        {
          "address": "0x14000151a", 
          "code": "MOV RAX,RBX"
        }, 
        {
          "address": "0x14000151d", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x140001521", 
          "code": "POP RBX"
        }, 
        {
          "address": "0x140001522", 
          "code": "RET"
        }
      ], 
      "c_code": "\nundefined8 * FUN_1400014f0(undefined8 *param_1,longlong param_2)\n\n{\n  *param_1 = std::exception::vftable;\n  param_1[1] = 0;\n  param_1[2] = 0;\n  __std_exception_copy(param_2 + 8);\n  return param_1;\n}\n\n", 
      "name": "FUN_1400014f0", 
      "entry_point": "0x1400014f0"
    }, 
    {
      "signature": "char * __fastcall FUN_140001530(longlong param_1)", 
      "disassembly": [
        {
          "address": "0x140001530", 
          "code": "MOV RDX,qword ptr [RCX + 0x8]"
        }, 
        {
          "address": "0x140001534", 
          "code": "LEA RAX,[0x140005eb0]"
        }, 
        {
          "address": "0x14000153b", 
          "code": "TEST RDX,RDX"
        }, 
        {
          "address": "0x14000153e", 
          "code": "CMOVNZ RAX,RDX"
        }, 
        {
          "address": "0x140001542", 
          "code": "RET"
        }
      ], 
      "c_code": "\nchar * FUN_140001530(longlong param_1)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = \"Unknown exception\";\n  if (*(char **)(param_1 + 8) != (char *)0x0) {\n    pcVar1 = *(char **)(param_1 + 8);\n  }\n  return pcVar1;\n}\n\n", 
      "name": "FUN_140001530", 
      "entry_point": "0x140001530"
    }, 
    {
      "signature": "undefined8 * __fastcall FUN_140001550(undefined8 * param_1, ulonglong param_2)", 
      "disassembly": [
        {
          "address": "0x140001550", 
          "code": "MOV qword ptr [RSP + 0x8],RBX"
        }, 
        {
          "address": "0x140001555", 
          "code": "PUSH RDI"
        }, 
        {
          "address": "0x140001556", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x14000155a", 
          "code": "LEA RAX,[0x1400067b0]"
        }, 
        {
          "address": "0x140001561", 
          "code": "MOV RDI,RCX"
        }, 
        {
          "address": "0x140001564", 
          "code": "MOV qword ptr [RCX],RAX"
        }, 
        {
          "address": "0x140001567", 
          "code": "MOV EBX,EDX"
        }, 
        {
          "address": "0x140001569", 
          "code": "ADD RCX,0x8"
        }, 
        {
          "address": "0x14000156d", 
          "code": "CALL qword ptr [0x1400051f0]"
        }, 
        {
          "address": "0x140001573", 
          "code": "TEST BL,0x1"
        }, 
        {
          "address": "0x140001576", 
          "code": "JZ 0x140001585"
        }, 
        {
          "address": "0x140001578", 
          "code": "MOV EDX,0x18"
        }, 
        {
          "address": "0x14000157d", 
          "code": "MOV RCX,RDI"
        }, 
        {
          "address": "0x140001580", 
          "code": "CALL 0x1400037dc"
        }, 
        {
          "address": "0x140001585", 
          "code": "MOV RBX,qword ptr [RSP + 0x30]"
        }, 
        {
          "address": "0x14000158a", 
          "code": "MOV RAX,RDI"
        }, 
        {
          "address": "0x14000158d", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x140001591", 
          "code": "POP RDI"
        }, 
        {
          "address": "0x140001592", 
          "code": "RET"
        }
      ], 
      "c_code": "\nundefined8 * FUN_140001550(undefined8 *param_1,ulonglong param_2)\n\n{\n  *param_1 = std::exception::vftable;\n  __std_exception_destroy(param_1 + 1);\n  if ((param_2 & 1) != 0) {\n    operator_delete(param_1);\n  }\n  return param_1;\n}\n\n", 
      "name": "FUN_140001550", 
      "entry_point": "0x140001550"
    }, 
    {
      "signature": "undefined8 * __fastcall FUN_1400015a0(undefined8 * param_1)", 
      "disassembly": [
        {
          "address": "0x1400015a0", 
          "code": "LEA RAX,[0x140005ec8]"
        }, 
        {
          "address": "0x1400015a7", 
          "code": "MOV qword ptr [RCX + 0x10],0x0"
        }, 
        {
          "address": "0x1400015af", 
          "code": "MOV qword ptr [RCX + 0x8],RAX"
        }, 
        {
          "address": "0x1400015b3", 
          "code": "LEA RAX,[0x140006780]"
        }, 
        {
          "address": "0x1400015ba", 
          "code": "MOV qword ptr [RCX],RAX"
        }, 
        {
          "address": "0x1400015bd", 
          "code": "MOV RAX,RCX"
        }, 
        {
          "address": "0x1400015c0", 
          "code": "RET"
        }
      ], 
      "c_code": "\nundefined8 * FUN_1400015a0(undefined8 *param_1)\n\n{\n  param_1[2] = 0;\n  param_1[1] = \"bad array new length\";\n  *param_1 = std::bad_array_new_length::vftable;\n  return param_1;\n}\n\n", 
      "name": "FUN_1400015a0", 
      "entry_point": "0x1400015a0"
    }, 
    {
      "signature": "undefined __fastcall FUN_1400015f0(void)", 
      "disassembly": [
        {
          "address": "0x1400015f0", 
          "code": "SUB RSP,0x48"
        }, 
        {
          "address": "0x1400015f4", 
          "code": "LEA RCX,[RSP + 0x20]"
        }, 
        {
          "address": "0x1400015f9", 
          "code": "CALL 0x1400015a0"
        }, 
        {
          "address": "0x1400015fe", 
          "code": "LEA RDX,[0x140007f68]"
        }, 
        {
          "address": "0x140001605", 
          "code": "LEA RCX,[RSP + 0x20]"
        }, 
        {
          "address": "0x14000160a", 
          "code": "CALL 0x1400041f3"
        }
      ], 
      "c_code": "\nvoid FUN_1400015f0(void)\n\n{\n  undefined8 local_28 [5];\n  \n  FUN_1400015a0(local_28);\n                    /* WARNING: Subroutine does not return */\n  _CxxThrowException(local_28,(ThrowInfo *)&DAT_140007f68);\n}\n\n", 
      "name": "FUN_1400015f0", 
      "entry_point": "0x1400015f0"
    }, 
    {
      "signature": "undefined8 * __fastcall FUN_140001610(undefined8 * param_1, longlong param_2)", 
      "disassembly": [
        {
          "address": "0x140001610", 
          "code": "PUSH RBX"
        }, 
        {
          "address": "0x140001612", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x140001616", 
          "code": "MOV RBX,RCX"
        }, 
        {
          "address": "0x140001619", 
          "code": "MOV RAX,RDX"
        }, 
        {
          "address": "0x14000161c", 
          "code": "LEA RCX,[0x1400067b0]"
        }, 
        {
          "address": "0x140001623", 
          "code": "XORPS XMM0,XMM0"
        }, 
        {
          "address": "0x140001626", 
          "code": "LEA RDX,[RBX + 0x8]"
        }, 
        {
          "address": "0x14000162a", 
          "code": "MOV qword ptr [RBX],RCX"
        }, 
        {
          "address": "0x14000162d", 
          "code": "LEA RCX,[RAX + 0x8]"
        }, 
        {
          "address": "0x140001631", 
          "code": "MOVUPS xmmword ptr [RDX],XMM0"
        }, 
        {
          "address": "0x140001634", 
          "code": "CALL qword ptr [0x1400051e8]"
        }, 
        {
          "address": "0x14000163a", 
          "code": "LEA RAX,[0x140006780]"
        }, 
        {
          "address": "0x140001641", 
          "code": "MOV qword ptr [RBX],RAX"
        }, 
        {
          "address": "0x140001644", 
          "code": "MOV RAX,RBX"
        }, 
        {
          "address": "0x140001647", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x14000164b", 
          "code": "POP RBX"
        }, 
        {
          "address": "0x14000164c", 
          "code": "RET"
        }
      ], 
      "c_code": "\nundefined8 * FUN_140001610(undefined8 *param_1,longlong param_2)\n\n{\n  *param_1 = std::exception::vftable;\n  param_1[1] = 0;\n  param_1[2] = 0;\n  __std_exception_copy(param_2 + 8);\n  *param_1 = std::bad_array_new_length::vftable;\n  return param_1;\n}\n\n", 
      "name": "FUN_140001610", 
      "entry_point": "0x140001610"
    }, 
    {
      "signature": "undefined8 * __fastcall FUN_140001650(undefined8 * param_1, longlong param_2)", 
      "disassembly": [
        {
          "address": "0x140001650", 
          "code": "PUSH RBX"
        }, 
        {
          "address": "0x140001652", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x140001656", 
          "code": "MOV RBX,RCX"
        }, 
        {
          "address": "0x140001659", 
          "code": "MOV RAX,RDX"
        }, 
        {
          "address": "0x14000165c", 
          "code": "LEA RCX,[0x1400067b0]"
        }, 
        {
          "address": "0x140001663", 
          "code": "XORPS XMM0,XMM0"
        }, 
        {
          "address": "0x140001666", 
          "code": "LEA RDX,[RBX + 0x8]"
        }, 
        {
          "address": "0x14000166a", 
          "code": "MOV qword ptr [RBX],RCX"
        }, 
        {
          "address": "0x14000166d", 
          "code": "LEA RCX,[RAX + 0x8]"
        }, 
        {
          "address": "0x140001671", 
          "code": "MOVUPS xmmword ptr [RDX],XMM0"
        }, 
        {
          "address": "0x140001674", 
          "code": "CALL qword ptr [0x1400051e8]"
        }, 
        {
          "address": "0x14000167a", 
          "code": "LEA RAX,[0x140006798]"
        }, 
        {
          "address": "0x140001681", 
          "code": "MOV qword ptr [RBX],RAX"
        }, 
        {
          "address": "0x140001684", 
          "code": "MOV RAX,RBX"
        }, 
        {
          "address": "0x140001687", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x14000168b", 
          "code": "POP RBX"
        }, 
        {
          "address": "0x14000168c", 
          "code": "RET"
        }
      ], 
      "c_code": "\nundefined8 * FUN_140001650(undefined8 *param_1,longlong param_2)\n\n{\n  *param_1 = std::exception::vftable;\n  param_1[1] = 0;\n  param_1[2] = 0;\n  __std_exception_copy(param_2 + 8);\n  *param_1 = std::bad_alloc::vftable;\n  return param_1;\n}\n\n", 
      "name": "FUN_140001650", 
      "entry_point": "0x140001650"
    }, 
    {
      "signature": "undefined __fastcall FUN_140001690(void)", 
      "disassembly": [
        {
          "address": "0x140001690", 
          "code": "SUB RSP,0x28"
        }, 
        {
          "address": "0x140001694", 
          "code": "LEA RCX,[0x140005ee0]"
        }, 
        {
          "address": "0x14000169b", 
          "code": "CALL qword ptr [0x140005100]"
        }, 
        {
          "address": "0x1400016a1", 
          "code": "INT3"
        }
      ], 
      "c_code": "\nvoid FUN_140001690(void)\n\n{\n  code *pcVar1;\n  \n  std::_Xlength_error(\"string too long\");\n  pcVar1 = (code *)swi(3);\n  (*pcVar1)();\n  return;\n}\n\n", 
      "name": "FUN_140001690", 
      "entry_point": "0x140001690"
    }, 
    {
      "signature": "CDialog * __fastcall FUN_1400016d0(CDialog * param_1, uint param_2)", 
      "disassembly": [
        {
          "address": "0x1400016d0", 
          "code": "MOV qword ptr [RSP + 0x8],RBX"
        }, 
        {
          "address": "0x1400016d5", 
          "code": "PUSH RDI"
        }, 
        {
          "address": "0x1400016d6", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x1400016da", 
          "code": "MOV RBX,RCX"
        }, 
        {
          "address": "0x1400016dd", 
          "code": "MOV EDI,EDX"
        }, 
        {
          "address": "0x1400016df", 
          "code": "ADD RCX,0x158"
        }, 
        {
          "address": "0x1400016e6", 
          "code": "CALL qword ptr [0x1400056a8]"
        }, 
        {
          "address": "0x1400016ec", 
          "code": "LEA RCX,[RBX + 0x140]"
        }, 
        {
          "address": "0x1400016f3", 
          "code": "LEA RAX,[0x140005a60]"
        }, 
        {
          "address": "0x1400016fa", 
          "code": "MOV qword ptr [RCX],RAX"
        }, 
        {
          "address": "0x1400016fd", 
          "code": "CALL 0x140001490"
        }, 
        {
          "address": "0x140001702", 
          "code": "MOV RCX,RBX"
        }, 
        {
          "address": "0x140001705", 
          "code": "CALL qword ptr [0x1400056e0]"
        }, 
        {
          "address": "0x14000170b", 
          "code": "TEST DIL,0x1"
        }, 
        {
          "address": "0x14000170f", 
          "code": "JZ 0x140001738"
        }, 
        {
          "address": "0x140001711", 
          "code": "MOV RCX,RBX"
        }, 
        {
          "address": "0x140001714", 
          "code": "TEST DIL,0x4"
        }, 
        {
          "address": "0x140001718", 
          "code": "JNZ 0x14000172e"
        }, 
        {
          "address": "0x14000171a", 
          "code": "CALL qword ptr [0x1400058a0]"
        }, 
        {
          "address": "0x140001720", 
          "code": "MOV RAX,RBX"
        }, 
        {
          "address": "0x140001723", 
          "code": "MOV RBX,qword ptr [RSP + 0x30]"
        }, 
        {
          "address": "0x140001728", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x14000172c", 
          "code": "POP RDI"
        }, 
        {
          "address": "0x14000172d", 
          "code": "RET"
        }, 
        {
          "address": "0x14000172e", 
          "code": "MOV EDX,0x170"
        }, 
        {
          "address": "0x140001733", 
          "code": "CALL 0x140001350"
        }, 
        {
          "address": "0x140001738", 
          "code": "MOV RAX,RBX"
        }, 
        {
          "address": "0x14000173b", 
          "code": "MOV RBX,qword ptr [RSP + 0x30]"
        }, 
        {
          "address": "0x140001740", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x140001744", 
          "code": "POP RDI"
        }, 
        {
          "address": "0x140001745", 
          "code": "RET"
        }
      ], 
      "c_code": "\nCDialog * FUN_1400016d0(CDialog *param_1,uint param_2)\n\n{\n  CDialogImpl::~CDialogImpl((CDialogImpl *)(param_1 + 0x158));\n  *(undefined ***)(param_1 + 0x140) = CBrush::vftable;\n  FUN_140001490((CGdiObject *)(param_1 + 0x140));\n  CDialog::~CDialog(param_1);\n  if ((param_2 & 1) != 0) {\n    if ((param_2 & 4) == 0) {\n      operator_delete(param_1);\n      return param_1;\n    }\n    _guard_check_icall();\n  }\n  return param_1;\n}\n\n", 
      "name": "FUN_1400016d0", 
      "entry_point": "0x1400016d0"
    }, 
    {
      "signature": "undefined8 __fastcall FUN_140001750(void)", 
      "disassembly": [
        {
          "address": "0x140001750", 
          "code": "LEA RAX,[0x1400063e8]"
        }, 
        {
          "address": "0x140001757", 
          "code": "RET"
        }
      ], 
      "c_code": "\nundefined8 FUN_140001750(void)\n\n{\n  return 0x1400063e8;\n}\n\n", 
      "name": "FUN_140001750", 
      "entry_point": "0x140001750"
    }, 
    {
      "signature": "CDialog * __fastcall FUN_140001760(CDialog * param_1, uint param_2)", 
      "disassembly": [
        {
          "address": "0x140001760", 
          "code": "MOV qword ptr [RSP + 0x8],RBX"
        }, 
        {
          "address": "0x140001765", 
          "code": "PUSH RDI"
        }, 
        {
          "address": "0x140001766", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x14000176a", 
          "code": "MOV RBX,RCX"
        }, 
        {
          "address": "0x14000176d", 
          "code": "MOV EDI,EDX"
        }, 
        {
          "address": "0x14000176f", 
          "code": "ADD RCX,0x180"
        }, 
        {
          "address": "0x140001776", 
          "code": "CALL qword ptr [0x1400056e8]"
        }, 
        {
          "address": "0x14000177c", 
          "code": "LEA RCX,[RBX + 0x178]"
        }, 
        {
          "address": "0x140001783", 
          "code": "CALL qword ptr [0x1400056e8]"
        }, 
        {
          "address": "0x140001789", 
          "code": "LEA RCX,[RBX + 0x158]"
        }, 
        {
          "address": "0x140001790", 
          "code": "CALL qword ptr [0x1400056a8]"
        }, 
        {
          "address": "0x140001796", 
          "code": "LEA RCX,[RBX + 0x140]"
        }, 
        {
          "address": "0x14000179d", 
          "code": "LEA RAX,[0x140005a60]"
        }, 
        {
          "address": "0x1400017a4", 
          "code": "MOV qword ptr [RCX],RAX"
        }, 
        {
          "address": "0x1400017a7", 
          "code": "CALL 0x140001490"
        }, 
        {
          "address": "0x1400017ac", 
          "code": "MOV RCX,RBX"
        }, 
        {
          "address": "0x1400017af", 
          "code": "CALL qword ptr [0x1400056e0]"
        }, 
        {
          "address": "0x1400017b5", 
          "code": "TEST DIL,0x1"
        }, 
        {
          "address": "0x1400017b9", 
          "code": "JZ 0x1400017e2"
        }, 
        {
          "address": "0x1400017bb", 
          "code": "MOV RCX,RBX"
        }, 
        {
          "address": "0x1400017be", 
          "code": "TEST DIL,0x4"
        }, 
        {
          "address": "0x1400017c2", 
          "code": "JNZ 0x1400017d8"
        }, 
        {
          "address": "0x1400017c4", 
          "code": "CALL qword ptr [0x1400058a0]"
        }, 
        {
          "address": "0x1400017ca", 
          "code": "MOV RAX,RBX"
        }, 
        {
          "address": "0x1400017cd", 
          "code": "MOV RBX,qword ptr [RSP + 0x30]"
        }, 
        {
          "address": "0x1400017d2", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x1400017d6", 
          "code": "POP RDI"
        }, 
        {
          "address": "0x1400017d7", 
          "code": "RET"
        }, 
        {
          "address": "0x1400017d8", 
          "code": "MOV EDX,0x188"
        }, 
        {
          "address": "0x1400017dd", 
          "code": "CALL 0x140001350"
        }, 
        {
          "address": "0x1400017e2", 
          "code": "MOV RAX,RBX"
        }, 
        {
          "address": "0x1400017e5", 
          "code": "MOV RBX,qword ptr [RSP + 0x30]"
        }, 
        {
          "address": "0x1400017ea", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x1400017ee", 
          "code": "POP RDI"
        }, 
        {
          "address": "0x1400017ef", 
          "code": "RET"
        }
      ], 
      "c_code": "\nCDialog * FUN_140001760(CDialog *param_1,uint param_2)\n\n{\n  ATL::CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_>::\n  ~CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_>\n            ((CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_> *)\n             (param_1 + 0x180));\n  ATL::CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_>::\n  ~CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_>\n            ((CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_> *)\n             (param_1 + 0x178));\n  CDialogImpl::~CDialogImpl((CDialogImpl *)(param_1 + 0x158));\n  *(undefined ***)(param_1 + 0x140) = CBrush::vftable;\n  FUN_140001490((CGdiObject *)(param_1 + 0x140));\n  CDialog::~CDialog(param_1);\n  if ((param_2 & 1) != 0) {\n    if ((param_2 & 4) == 0) {\n      operator_delete(param_1);\n      return param_1;\n    }\n    _guard_check_icall();\n  }\n  return param_1;\n}\n\n", 
      "name": "FUN_140001760", 
      "entry_point": "0x140001760"
    }, 
    {
      "signature": "undefined __fastcall FUN_1400017f0(longlong param_1, CDataExchange * param_2)", 
      "disassembly": [
        {
          "address": "0x1400017f0", 
          "code": "MOV qword ptr [RSP + 0x8],RBX"
        }, 
        {
          "address": "0x1400017f5", 
          "code": "PUSH RDI"
        }, 
        {
          "address": "0x1400017f6", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x1400017fa", 
          "code": "MOV RDI,RDX"
        }, 
        {
          "address": "0x1400017fd", 
          "code": "LEA R8,[RCX + 0x178]"
        }, 
        {
          "address": "0x140001804", 
          "code": "MOV RBX,RCX"
        }, 
        {
          "address": "0x140001807", 
          "code": "MOV EDX,0x3e9"
        }, 
        {
          "address": "0x14000180c", 
          "code": "MOV RCX,RDI"
        }, 
        {
          "address": "0x14000180f", 
          "code": "CALL qword ptr [0x140005498]"
        }, 
        {
          "address": "0x140001815", 
          "code": "LEA R8,[RBX + 0x180]"
        }, 
        {
          "address": "0x14000181c", 
          "code": "MOV EDX,0x3e8"
        }, 
        {
          "address": "0x140001821", 
          "code": "MOV RCX,RDI"
        }, 
        {
          "address": "0x140001824", 
          "code": "MOV RBX,qword ptr [RSP + 0x30]"
        }, 
        {
          "address": "0x140001829", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x14000182d", 
          "code": "POP RDI"
        }, 
        {
          "address": "0x14000182e", 
          "code": "JMP qword ptr [0x140005498]"
        }
      ], 
      "c_code": "\nvoid FUN_1400017f0(longlong param_1,CDataExchange *param_2)\n\n{\n  DDX_Text(param_2,0x3e9,\n           (CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_> *)\n           (param_1 + 0x178));\n                    /* WARNING: Could not recover jumptable at 0x00014000182e. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  DDX_Text(param_2,1000,\n           (CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_> *)\n           (param_1 + 0x180));\n  return;\n}\n\n", 
      "name": "FUN_1400017f0", 
      "entry_point": "0x1400017f0"
    }, 
    {
      "signature": "undefined8 __fastcall FUN_140001840(void)", 
      "disassembly": [
        {
          "address": "0x140001840", 
          "code": "LEA RAX,[0x140006000]"
        }, 
        {
          "address": "0x140001847", 
          "code": "RET"
        }
      ], 
      "c_code": "\nundefined8 FUN_140001840(void)\n\n{\n  return 0x140006000;\n}\n\n", 
      "name": "FUN_140001840", 
      "entry_point": "0x140001840"
    }, 
    {
      "signature": "undefined __fastcall FUN_140001850(CDialog * param_1)", 
      "disassembly": [
        {
          "address": "0x140001850", 
          "code": "MOV qword ptr [RSP + 0x10],RBX"
        }, 
        {
          "address": "0x140001855", 
          "code": "PUSH RDI"
        }, 
        {
          "address": "0x140001856", 
          "code": "SUB RSP,0x30"
        }, 
        {
          "address": "0x14000185a", 
          "code": "MOV RAX,qword ptr [0x14000a040]"
        }, 
        {
          "address": "0x140001861", 
          "code": "XOR RAX,RSP"
        }, 
        {
          "address": "0x140001864", 
          "code": "MOV qword ptr [RSP + 0x28],RAX"
        }, 
        {
          "address": "0x140001869", 
          "code": "MOV RBX,RCX"
        }, 
        {
          "address": "0x14000186c", 
          "code": "CALL qword ptr [0x140005490]"
        }, 
        {
          "address": "0x140001872", 
          "code": "XOR EDX,EDX"
        }, 
        {
          "address": "0x140001874", 
          "code": "MOV RCX,qword ptr [RBX + 0x40]"
        }, 
        {
          "address": "0x140001878", 
          "code": "CALL qword ptr [0x140005198]"
        }, 
        {
          "address": "0x14000187e", 
          "code": "MOV RCX,RAX"
        }, 
        {
          "address": "0x140001881", 
          "code": "CALL qword ptr [0x140005488]"
        }, 
        {
          "address": "0x140001887", 
          "code": "MOV RDI,RAX"
        }, 
        {
          "address": "0x14000188a", 
          "code": "TEST RAX,RAX"
        }, 
        {
          "address": "0x14000188d", 
          "code": "JZ 0x1400018ec"
        }, 
        {
          "address": "0x14000188f", 
          "code": "LEA RCX,[RSP + 0x20]"
        }, 
        {
          "address": "0x140001894", 
          "code": "CALL qword ptr [0x1400056c8]"
        }, 
        {
          "address": "0x14000189a", 
          "code": "NOP"
        }, 
        {
          "address": "0x14000189b", 
          "code": "MOV EDX,0x65"
        }, 
        {
          "address": "0x1400018a0", 
          "code": "LEA RCX,[RSP + 0x20]"
        }, 
        {
          "address": "0x1400018a5", 
          "code": "CALL qword ptr [0x1400054b0]"
        }, 
        {
          "address": "0x1400018ab", 
          "code": "MOV RCX,qword ptr [RSP + 0x20]"
        }, 
        {
          "address": "0x1400018b0", 
          "code": "CMP dword ptr [RCX + -0x10],0x0"
        }, 
        {
          "address": "0x1400018b4", 
          "code": "JZ 0x1400018e1"
        }, 
        {
          "address": "0x1400018b6", 
          "code": "XOR R9D,R9D"
        }, 
        {
          "address": "0x1400018b9", 
          "code": "XOR R8D,R8D"
        }, 
        {
          "address": "0x1400018bc", 
          "code": "MOV EDX,0x800"
        }, 
        {
          "address": "0x1400018c1", 
          "code": "MOV RCX,qword ptr [RDI + 0x8]"
        }, 
        {
          "address": "0x1400018c5", 
          "code": "CALL qword ptr [0x1400051a0]"
        }, 
        {
          "address": "0x1400018cb", 
          "code": "MOV R9,qword ptr [RSP + 0x20]"
        }, 
        {
          "address": "0x1400018d0", 
          "code": "XOR EDX,EDX"
        }, 
        {
          "address": "0x1400018d2", 
          "code": "LEA R8D,[RDX + 0x10]"
        }, 
        {
          "address": "0x1400018d6", 
          "code": "MOV RCX,qword ptr [RDI + 0x8]"
        }, 
        {
          "address": "0x1400018da", 
          "code": "CALL qword ptr [0x1400051a0]"
        }, 
        {
          "address": "0x1400018e0", 
          "code": "NOP"
        }, 
        {
          "address": "0x1400018e1", 
          "code": "LEA RCX,[RSP + 0x20]"
        }, 
        {
          "address": "0x1400018e6", 
          "code": "CALL qword ptr [0x1400056e8]"
        }, 
        {
          "address": "0x1400018ec", 
          "code": "MOV R9,qword ptr [RBX + 0x170]"
        }, 
        {
          "address": "0x1400018f3", 
          "code": "MOV EDX,0x80"
        }, 
        {
          "address": "0x1400018f8", 
          "code": "LEA R8D,[RDX + -0x7f]"
        }, 
        {
          "address": "0x1400018fc", 
          "code": "MOV RCX,qword ptr [RBX + 0x40]"
        }, 
        {
          "address": "0x140001900", 
          "code": "CALL qword ptr [0x1400051a8]"
        }, 
        {
          "address": "0x140001906", 
          "code": "MOV R9,qword ptr [RBX + 0x170]"
        }, 
        {
          "address": "0x14000190d", 
          "code": "XOR R8D,R8D"
        }, 
        {
          "address": "0x140001910", 
          "code": "MOV EDX,0x80"
        }, 
        {
          "address": "0x140001915", 
          "code": "MOV RCX,qword ptr [RBX + 0x40]"
        }, 
        {
          "address": "0x140001919", 
          "code": "CALL qword ptr [0x1400051a8]"
        }, 
        {
          "address": "0x14000191f", 
          "code": "MOV EAX,0x1"
        }, 
        {
          "address": "0x140001924", 
          "code": "MOV RCX,qword ptr [RSP + 0x28]"
        }, 
        {
          "address": "0x140001929", 
          "code": "XOR RCX,RSP"
        }, 
        {
          "address": "0x14000192c", 
          "code": "CALL 0x140003550"
        }, 
        {
          "address": "0x140001931", 
          "code": "MOV RBX,qword ptr [RSP + 0x48]"
        }, 
        {
          "address": "0x140001936", 
          "code": "ADD RSP,0x30"
        }, 
        {
          "address": "0x14000193a", 
          "code": "POP RDI"
        }, 
        {
          "address": "0x14000193b", 
          "code": "RET"
        }
      ], 
      "c_code": "\nvoid FUN_140001850(CDialog *param_1)\n\n{\n  HMENU pHVar1;\n  CMenu *pCVar2;\n  undefined1 auStack_38 [32];\n  LPCWSTR local_18;\n  ulonglong local_10;\n  \n  local_10 = DAT_14000a040 ^ (ulonglong)auStack_38;\n  CDialog::OnInitDialog(param_1);\n  pHVar1 = GetSystemMenu(*(HWND *)(param_1 + 0x40),0);\n  pCVar2 = CMenu::FromHandle(pHVar1);\n  if (pCVar2 != (CMenu *)0x0) {\n    ATL::CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_>::\n    CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_>\n              ((CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_> *\n               )&local_18);\n    ATL::CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_>::\n    LoadStringW((CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_>\n                 *)&local_18,0x65);\n    if (*(int *)(local_18 + -8) != 0) {\n      AppendMenuW(*(HMENU *)(pCVar2 + 8),0x800,0,(LPCWSTR)0x0);\n      AppendMenuW(*(HMENU *)(pCVar2 + 8),0,0x10,local_18);\n    }\n    ATL::CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_>::\n    ~CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_>\n              ((CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_> *\n               )&local_18);\n  }\n  SendMessageW(*(HWND *)(param_1 + 0x40),0x80,1,*(LPARAM *)(param_1 + 0x170));\n  SendMessageW(*(HWND *)(param_1 + 0x40),0x80,0,*(LPARAM *)(param_1 + 0x170));\n  FUN_140003550(local_10 ^ (ulonglong)auStack_38);\n  return;\n}\n\n", 
      "name": "FUN_140001850", 
      "entry_point": "0x140001850"
    }, 
    {
      "signature": "undefined __fastcall FUN_140001b70(CWnd * param_1)", 
      "disassembly": [
        {
          "address": "0x140001b70", 
          "code": "MOV qword ptr [RSP + 0x10],RBX"
        }, 
        {
          "address": "0x140001b75", 
          "code": "MOV qword ptr [RSP + 0x18],RSI"
        }, 
        {
          "address": "0x140001b7a", 
          "code": "MOV qword ptr [RSP + 0x20],RDI"
        }, 
        {
          "address": "0x140001b7f", 
          "code": "PUSH RBP"
        }, 
        {
          "address": "0x140001b80", 
          "code": "PUSH R12"
        }, 
        {
          "address": "0x140001b82", 
          "code": "PUSH R13"
        }, 
        {
          "address": "0x140001b84", 
          "code": "PUSH R14"
        }, 
        {
          "address": "0x140001b86", 
          "code": "PUSH R15"
        }, 
        {
          "address": "0x140001b88", 
          "code": "LEA RBP,[RSP + -0x240]"
        }, 
        {
          "address": "0x140001b90", 
          "code": "SUB RSP,0x340"
        }, 
        {
          "address": "0x140001b97", 
          "code": "MOV RAX,qword ptr [0x14000a040]"
        }, 
        {
          "address": "0x140001b9e", 
          "code": "XOR RAX,RSP"
        }, 
        {
          "address": "0x140001ba1", 
          "code": "MOV qword ptr [RBP + 0x230],RAX"
        }, 
        {
          "address": "0x140001ba8", 
          "code": "MOV RBX,RCX"
        }, 
        {
          "address": "0x140001bab", 
          "code": "MOV qword ptr [RSP + 0x58],RCX"
        }, 
        {
          "address": "0x140001bb0", 
          "code": "XOR R14D,R14D"
        }, 
        {
          "address": "0x140001bb3", 
          "code": "MOV dword ptr [RSP + 0x30],R14D"
        }, 
        {
          "address": "0x140001bb8", 
          "code": "LEA EDX,[R14 + 0x1]"
        }, 
        {
          "address": "0x140001bbc", 
          "code": "CALL qword ptr [0x140005458]"
        }, 
        {
          "address": "0x140001bc2", 
          "code": "XORPS XMM0,XMM0"
        }, 
        {
          "address": "0x140001bc5", 
          "code": "XOR EAX,EAX"
        }, 
        {
          "address": "0x140001bc7", 
          "code": "MOVUPS xmmword ptr [RBP + 0x190],XMM0"
        }, 
        {
          "address": "0x140001bce", 
          "code": "MOVUPS xmmword ptr [RBP + 0x1a0],XMM0"
        }, 
        {
          "address": "0x140001bd5", 
          "code": "MOVUPS xmmword ptr [RBP + 0x1b0],XMM0"
        }, 
        {
          "address": "0x140001bdc", 
          "code": "MOVUPS xmmword ptr [RBP + 0x1c0],XMM0"
        }, 
        {
          "address": "0x140001be3", 
          "code": "MOVUPS xmmword ptr [RBP + 0x1d0],XMM0"
        }, 
        {
          "address": "0x140001bea", 
          "code": "MOVUPS xmmword ptr [RBP + 0x1e0],XMM0"
        }, 
        {
          "address": "0x140001bf1", 
          "code": "MOVUPS xmmword ptr [RBP + 0x1f0],XMM0"
        }, 
        {
          "address": "0x140001bf8", 
          "code": "MOVUPS xmmword ptr [RBP + 0x200],XMM0"
        }, 
        {
          "address": "0x140001bff", 
          "code": "MOV qword ptr [RBP + 0x210],RAX"
        }, 
        {
          "address": "0x140001c06", 
          "code": "LEA RAX,[RBP + 0x198]"
        }, 
        {
          "address": "0x140001c0d", 
          "code": "MOV qword ptr [RBP + 0x190],RAX"
        }, 
        {
          "address": "0x140001c14", 
          "code": "LEA R8D,[R14 + 0x3]"
        }, 
        {
          "address": "0x140001c18", 
          "code": "MOV RDX,qword ptr [RBX + 0x180]"
        }, 
        {
          "address": "0x140001c1f", 
          "code": "LEA RCX,[RBP + 0x190]"
        }, 
        {
          "address": "0x140001c26", 
          "code": "CALL 0x140002b50"
        }, 
        {
          "address": "0x140001c2b", 
          "code": "NOP"
        }, 
        {
          "address": "0x140001c2c", 
          "code": "MOV RDX,qword ptr [RBP + 0x190]"
        }, 
        {
          "address": "0x140001c33", 
          "code": "LEA RCX,[RBP + -0x70]"
        }, 
        {
          "address": "0x140001c37", 
          "code": "CALL 0x140002940"
        }, 
        {
          "address": "0x140001c3c", 
          "code": "NOP"
        }, 
        {
          "address": "0x140001c3d", 
          "code": "XORPS XMM0,XMM0"
        }, 
        {
          "address": "0x140001c40", 
          "code": "XOR EAX,EAX"
        }, 
        {
          "address": "0x140001c42", 
          "code": "MOVUPS xmmword ptr [RBP + 0x100],XMM0"
        }, 
        {
          "address": "0x140001c49", 
          "code": "MOVUPS xmmword ptr [RBP + 0x110],XMM0"
        }, 
        {
          "address": "0x140001c50", 
          "code": "MOVUPS xmmword ptr [RBP + 0x120],XMM0"
        }, 
        {
          "address": "0x140001c57", 
          "code": "MOVUPS xmmword ptr [RBP + 0x130],XMM0"
        }, 
        {
          "address": "0x140001c5e", 
          "code": "MOVUPS xmmword ptr [RBP + 0x140],XMM0"
        }, 
        {
          "address": "0x140001c65", 
          "code": "MOVUPS xmmword ptr [RBP + 0x150],XMM0"
        }, 
        {
          "address": "0x140001c6c", 
          "code": "MOVUPS xmmword ptr [RBP + 0x160],XMM0"
        }, 
        {
          "address": "0x140001c73", 
          "code": "MOVUPS xmmword ptr [RBP + 0x170],XMM0"
        }, 
        {
          "address": "0x140001c7a", 
          "code": "MOV qword ptr [RBP + 0x180],RAX"
        }, 
        {
          "address": "0x140001c81", 
          "code": "LEA RAX,[RBP + 0x108]"
        }, 
        {
          "address": "0x140001c88", 
          "code": "MOV qword ptr [RBP + 0x100],RAX"
        }, 
        {
          "address": "0x140001c8f", 
          "code": "LEA R8D,[R14 + 0x3]"
        }, 
        {
          "address": "0x140001c93", 
          "code": "MOV RDX,qword ptr [RBX + 0x178]"
        }, 
        {
          "address": "0x140001c9a", 
          "code": "LEA RCX,[RBP + 0x100]"
        }, 
        {
          "address": "0x140001ca1", 
          "code": "CALL 0x140002b50"
        }, 
        {
          "address": "0x140001ca6", 
          "code": "NOP"
        }, 
        {
          "address": "0x140001ca7", 
          "code": "MOV RDX,qword ptr [RBP + 0x100]"
        }, 
        {
          "address": "0x140001cae", 
          "code": "LEA RCX,[RBP + -0x50]"
        }, 
        {
          "address": "0x140001cb2", 
          "code": "CALL 0x140002940"
        }, 
        {
          "address": "0x140001cb7", 
          "code": "NOP"
        }, 
        {
          "address": "0x140001cb8", 
          "code": "MOV qword ptr [RBP + -0x78],R14"
        }, 
        {
          "address": "0x140001cbc", 
          "code": "MOV qword ptr [RBP + -0x80],R14"
        }, 
        {
          "address": "0x140001cc0", 
          "code": "MOV dword ptr [RSP + 0x78],0x10"
        }, 
        {
          "address": "0x140001cc8", 
          "code": "MOV dword ptr [RSP + 0x20],0xf0000000"
        }, 
        {
          "address": "0x140001cd0", 
          "code": "LEA R9D,[R14 + 0x1]"
        }, 
        {
          "address": "0x140001cd4", 
          "code": "XOR R8D,R8D"
        }, 
        {
          "address": "0x140001cd7", 
          "code": "XOR EDX,EDX"
        }, 
        {
          "address": "0x140001cd9", 
          "code": "LEA RCX,[RBP + -0x78]"
        }, 
        {
          "address": "0x140001cdd", 
          "code": "CALL qword ptr [0x140005020]"
        }, 
        {
          "address": "0x140001ce3", 
          "code": "MOV R12,qword ptr [RBP + -0x50]"
        }, 
        {
          "address": "0x140001ce7", 
          "code": "TEST EAX,EAX"
        }, 
        {
          "address": "0x140001ce9", 
          "code": "JZ 0x140002104"
        }, 
        {
          "address": "0x140001cef", 
          "code": "LEA RAX,[RBP + -0x80]"
        }, 
        {
          "address": "0x140001cf3", 
          "code": "MOV qword ptr [RSP + 0x20],RAX"
        }, 
        {
          "address": "0x140001cf8", 
          "code": "XOR R9D,R9D"
        }, 
        {
          "address": "0x140001cfb", 
          "code": "XOR R8D,R8D"
        }, 
        {
          "address": "0x140001cfe", 
          "code": "MOV EDX,0x8003"
        }, 
        {
          "address": "0x140001d03", 
          "code": "MOV RCX,qword ptr [RBP + -0x78]"
        }, 
        {
          "address": "0x140001d07", 
          "code": "CALL qword ptr [0x140005018]"
        }, 
        {
          "address": "0x140001d0d", 
          "code": "TEST EAX,EAX"
        }, 
        {
          "address": "0x140001d0f", 
          "code": "JNZ 0x140001d22"
        }, 
        {
          "address": "0x140001d11", 
          "code": "XOR EDX,EDX"
        }, 
        {
          "address": "0x140001d13", 
          "code": "MOV RCX,qword ptr [RBP + -0x78]"
        }, 
        {
          "address": "0x140001d17", 
          "code": "CALL qword ptr [0x140005028]"
        }, 
        {
          "address": "0x140001d1d", 
          "code": "JMP 0x140002104"
        }, 
        {
          "address": "0x140001d22", 
          "code": "LEA RDX,[RBP + -0x70]"
        }, 
        {
          "address": "0x140001d26", 
          "code": "CMP qword ptr [RBP + -0x58],0xf"
        }, 
        {
          "address": "0x140001d2b", 
          "code": "CMOVA RDX,qword ptr [RBP + -0x70]"
        }, 
        {
          "address": "0x140001d30", 
          "code": "XOR R9D,R9D"
        }, 
        {
          "address": "0x140001d33", 
          "code": "MOV R8D,dword ptr [RBP + -0x60]"
        }, 
        {
          "address": "0x140001d37", 
          "code": "MOV RCX,qword ptr [RBP + -0x80]"
        }, 
        {
          "address": "0x140001d3b", 
          "code": "CALL qword ptr [0x140005010]"
        }, 
        {
          "address": "0x140001d41", 
          "code": "TEST EAX,EAX"
        }, 
        {
          "address": "0x140001d43", 
          "code": "JNZ 0x140001d60"
        }, 
        {
          "address": "0x140001d45", 
          "code": "XOR EDX,EDX"
        }, 
        {
          "address": "0x140001d47", 
          "code": "MOV RCX,qword ptr [RBP + -0x78]"
        }, 
        {
          "address": "0x140001d4b", 
          "code": "CALL qword ptr [0x140005028]"
        }, 
        {
          "address": "0x140001d51", 
          "code": "MOV RCX,qword ptr [RBP + -0x80]"
        }, 
        {
          "address": "0x140001d55", 
          "code": "CALL qword ptr [0x140005008]"
        }, 
        {
          "address": "0x140001d5b", 
          "code": "JMP 0x140002104"
        }, 
        {
          "address": "0x140001d60", 
          "code": "MOV dword ptr [RSP + 0x20],R14D"
        }, 
        {
          "address": "0x140001d65", 
          "code": "LEA R9,[RSP + 0x78]"
        }, 
        {
          "address": "0x140001d6a", 
          "code": "LEA R8,[RBP + 0x220]"
        }, 
        {
          "address": "0x140001d71", 
          "code": "MOV EDX,0x2"
        }, 
        {
          "address": "0x140001d76", 
          "code": "MOV RCX,qword ptr [RBP + -0x80]"
        }, 
        {
          "address": "0x140001d7a", 
          "code": "CALL qword ptr [0x140005000]"
        }, 
        {
          "address": "0x140001d80", 
          "code": "XOR EDX,EDX"
        }, 
        {
          "address": "0x140001d82", 
          "code": "TEST EAX,EAX"
        }, 
        {
          "address": "0x140001d84", 
          "code": "JNZ 0x140001d9f"
        }, 
        {
          "address": "0x140001d86", 
          "code": "MOV RCX,qword ptr [RBP + -0x78]"
        }, 
        {
          "address": "0x140001d8a", 
          "code": "CALL qword ptr [0x140005028]"
        }, 
        {
          "address": "0x140001d90", 
          "code": "MOV RCX,qword ptr [RBP + -0x80]"
        }, 
        {
          "address": "0x140001d94", 
          "code": "CALL qword ptr [0x140005008]"
        }, 
        {
          "address": "0x140001d9a", 
          "code": "JMP 0x140002104"
        }, 
        {
          "address": "0x140001d9f", 
          "code": "MOV R8D,0xf8"
        }, 
        {
          "address": "0x140001da5", 
          "code": "LEA RCX,[RBP]"
        }, 
        {
          "address": "0x140001da9", 
          "code": "CALL 0x140004098"
        }, 
        {
          "address": "0x140001dae", 
          "code": "LEA RAX,[0x140005f68]"
        }, 
        {
          "address": "0x140001db5", 
          "code": "MOV qword ptr [RBP],RAX"
        }, 
        {
          "address": "0x140001db9", 
          "code": "LEA RAX,[0x140005f60]"
        }, 
        {
          "address": "0x140001dc0", 
          "code": "MOV qword ptr [RBP + 0x10],RAX"
        }, 
        {
          "address": "0x140001dc4", 
          "code": "LEA RCX,[RBP + 0x98]"
        }, 
        {
          "address": "0x140001dcb", 
          "code": "CALL qword ptr [0x140005148]"
        }, 
        {
          "address": "0x140001dd1", 
          "code": "NOP"
        }, 
        {
          "address": "0x140001dd2", 
          "code": "MOV R13D,0x8"
        }, 
        {
          "address": "0x140001dd8", 
          "code": "MOV dword ptr [RSP + 0x30],R13D"
        }, 
        {
          "address": "0x140001ddd", 
          "code": "XOR R8D,R8D"
        }, 
        {
          "address": "0x140001de0", 
          "code": "LEA RDX,[RBP + 0x18]"
        }, 
        {
          "address": "0x140001de4", 
          "code": "LEA RCX,[RBP]"
        }, 
        {
          "address": "0x140001de8", 
          "code": "CALL qword ptr [0x140005138]"
        }, 
        {
          "address": "0x140001dee", 
          "code": "NOP"
        }, 
        {
          "address": "0x140001def", 
          "code": "MOV RAX,qword ptr [RBP]"
        }, 
        {
          "address": "0x140001df3", 
          "code": "MOVSXD RCX,dword ptr [RAX + 0x4]"
        }, 
        {
          "address": "0x140001df7", 
          "code": "LEA RAX,[0x140005f78]"
        }, 
        {
          "address": "0x140001dfe", 
          "code": "MOV qword ptr [RBP + RCX*0x1],RAX"
        }, 
        {
          "address": "0x140001e03", 
          "code": "MOV RAX,qword ptr [RBP]"
        }, 
        {
          "address": "0x140001e07", 
          "code": "MOVSXD RCX,dword ptr [RAX + 0x4]"
        }, 
        {
          "address": "0x140001e0b", 
          "code": "LEA EDX,[RCX + -0x98]"
        }, 
        {
          "address": "0x140001e11", 
          "code": "MOV dword ptr [RBP + RCX*0x1 + -0x4],EDX"
        }, 
        {
          "address": "0x140001e15", 
          "code": "LEA RCX,[RBP + 0x18]"
        }, 
        {
          "address": "0x140001e19", 
          "code": "CALL qword ptr [0x140005140]"
        }, 
        {
          "address": "0x140001e1f", 
          "code": "LEA RAX,[0x140005f88]"
        }, 
        {
          "address": "0x140001e26", 
          "code": "MOV qword ptr [RBP + 0x18],RAX"
        }, 
        {
          "address": "0x140001e2a", 
          "code": "MOV qword ptr [RBP + 0x80],R14"
        }, 
        {
          "address": "0x140001e31", 
          "code": "MOV dword ptr [RBP + 0x88],R14D"
        }, 
        {
          "address": "0x140001e38", 
          "code": "MOV R15D,R14D"
        }, 
        {
          "address": "0x140001e3b", 
          "code": "CMP dword ptr [RSP + 0x78],R14D"
        }, 
        {
          "address": "0x140001e40", 
          "code": "JBE 0x140001ead"
        }, 
        {
          "address": "0x140001e42", 
          "code": "LEA RSI,[RBP + 0x220]"
        }, 
        {
          "address": "0x140001e49", 
          "code": "NOP dword ptr [RAX]"
        }, 
        {
          "address": "0x140001e50", 
          "code": "MOV EDX,0x2"
        }, 
        {
          "address": "0x140001e55", 
          "code": "LEA RCX,[RSP + 0x60]"
        }, 
        {
          "address": "0x140001e5a", 
          "code": "CALL qword ptr [0x140005108]"
        }, 
        {
          "address": "0x140001e60", 
          "code": "MOV RBX,RAX"
        }, 
        {
          "address": "0x140001e63", 
          "code": "LEA RDX,[0x1400016b0]"
        }, 
        {
          "address": "0x140001e6a", 
          "code": "LEA RCX,[RBP + 0x10]"
        }, 
        {
          "address": "0x140001e6e", 
          "code": "CALL qword ptr [0x140005120]"
        }, 
        {
          "address": "0x140001e74", 
          "code": "MOV RDI,RAX"
        }, 
        {
          "address": "0x140001e77", 
          "code": "MOV RCX,qword ptr [RAX]"
        }, 
        {
          "address": "0x140001e7a", 
          "code": "MOVSXD RCX,dword ptr [RCX + 0x4]"
        }, 
        {
          "address": "0x140001e7e", 
          "code": "ADD RCX,RAX"
        }, 
        {
          "address": "0x140001e81", 
          "code": "MOV RDX,qword ptr [RBX + 0x8]"
        }, 
        {
          "address": "0x140001e85", 
          "code": "CALL qword ptr [RBX]"
        }, 
        {
          "address": "0x140001e87", 
          "code": "MOV RCX,qword ptr [RDI]"
        }, 
        {
          "address": "0x140001e8a", 
          "code": "MOVSXD RDX,dword ptr [RCX + 0x4]"
        }, 
        {
          "address": "0x140001e8e", 
          "code": "MOV byte ptr [RDX + RDI*0x1 + 0x58],0x30"
        }, 
        {
          "address": "0x140001e93", 
          "code": "MOVZX EDX,byte ptr [RSI]"
        }, 
        {
          "address": "0x140001e96", 
          "code": "MOV RCX,RDI"
        }, 
        {
          "address": "0x140001e99", 
          "code": "CALL qword ptr [0x140005118]"
        }, 
        {
          "address": "0x140001e9f", 
          "code": "INC R15D"
        }, 
        {
          "address": "0x140001ea2", 
          "code": "LEA RSI,[RSI + 0x1]"
        }, 
        {
          "address": "0x140001ea6", 
          "code": "CMP R15D,dword ptr [RSP + 0x78]"
        }, 
        {
          "address": "0x140001eab", 
          "code": "JC 0x140001e50"
        }, 
        {
          "address": "0x140001ead", 
          "code": "MOV RCX,qword ptr [RBP + -0x80]"
        }, 
        {
          "address": "0x140001eb1", 
          "code": "CALL qword ptr [0x140005008]"
        }, 
        {
          "address": "0x140001eb7", 
          "code": "XOR EDX,EDX"
        }, 
        {
          "address": "0x140001eb9", 
          "code": "MOV RCX,qword ptr [RBP + -0x78]"
        }, 
        {
          "address": "0x140001ebd", 
          "code": "CALL qword ptr [0x140005028]"
        }, 
        {
          "address": "0x140001ec3", 
          "code": "XORPS XMM0,XMM0"
        }, 
        {
          "address": "0x140001ec6", 
          "code": "MOVUPS xmmword ptr [RBP + -0x30],XMM0"
        }, 
        {
          "address": "0x140001eca", 
          "code": "MOV ECX,0x30"
        }, 
        {
          "address": "0x140001ecf", 
          "code": "CALL qword ptr [0x140005720]"
        }, 
        {
          "address": "0x140001ed5", 
          "code": "MOV R15,RAX"
        }, 
        {
          "address": "0x140001ed8", 
          "code": "MOV qword ptr [RBP + -0x30],RAX"
        }, 
        {
          "address": "0x140001edc", 
          "code": "MOV qword ptr [RBP + -0x20],0x20"
        }, 
        {
          "address": "0x140001ee4", 
          "code": "MOV qword ptr [RBP + -0x18],0x2f"
        }, 
        {
          "address": "0x140001eec", 
          "code": "MOVUPS XMM0,xmmword ptr [0x140005ef8]"
        }, 
        {
          "address": "0x140001ef3", 
          "code": "MOVUPS xmmword ptr [RAX],XMM0"
        }, 
        {
          "address": "0x140001ef6", 
          "code": "MOVUPS XMM1,xmmword ptr [0x140005f08]"
        }, 
        {
          "address": "0x140001efd", 
          "code": "MOVUPS xmmword ptr [RAX + 0x10],XMM1"
        }, 
        {
          "address": "0x140001f01", 
          "code": "MOV byte ptr [RAX + 0x20],0x0"
        }, 
        {
          "address": "0x140001f05", 
          "code": "LEA RCX,[RBP + -0x50]"
        }, 
        {
          "address": "0x140001f09", 
          "code": "CMP qword ptr [RBP + -0x38],0xf"
        }, 
        {
          "address": "0x140001f0e", 
          "code": "CMOVA RCX,R12"
        }, 
        {
          "address": "0x140001f12", 
          "code": "MOV R8,qword ptr [RBP + -0x40]"
        }, 
        {
          "address": "0x140001f16", 
          "code": "CMP R8,0x5"
        }, 
        {
          "address": "0x140001f1a", 
          "code": "JNZ 0x14000201b"
        }, 
        {
          "address": "0x140001f20", 
          "code": "LEA RDX,[0x140005ef0]"
        }, 
        {
          "address": "0x140001f27", 
          "code": "CALL 0x1400041f9"
        }, 
        {
          "address": "0x140001f2c", 
          "code": "TEST EAX,EAX"
        }, 
        {
          "address": "0x140001f2e", 
          "code": "JNZ 0x14000201b"
        }, 
        {
          "address": "0x140001f34", 
          "code": "XORPS XMM0,XMM0"
        }, 
        {
          "address": "0x140001f37", 
          "code": "MOVUPS xmmword ptr [RSP + 0x38],XMM0"
        }, 
        {
          "address": "0x140001f3c", 
          "code": "MOV qword ptr [RSP + 0x48],R14"
        }, 
        {
          "address": "0x140001f41", 
          "code": "MOV EDI,0xf"
        }, 
        {
          "address": "0x140001f46", 
          "code": "MOV qword ptr [RSP + 0x50],RDI"
        }, 
        {
          "address": "0x140001f4b", 
          "code": "MOV byte ptr [RSP + 0x38],AL"
        }, 
        {
          "address": "0x140001f4f", 
          "code": "MOV dword ptr [RSP + 0x30],0xc"
        }, 
        {
          "address": "0x140001f57", 
          "code": "MOV ECX,dword ptr [RBP + 0x88]"
        }, 
        {
          "address": "0x140001f5d", 
          "code": "MOV EAX,ECX"
        }, 
        {
          "address": "0x140001f5f", 
          "code": "AND AL,0x22"
        }, 
        {
          "address": "0x140001f61", 
          "code": "CMP AL,0x2"
        }, 
        {
          "address": "0x140001f63", 
          "code": "JZ 0x140001f89"
        }, 
        {
          "address": "0x140001f65", 
          "code": "MOV RAX,qword ptr [RBP + 0x58]"
        }, 
        {
          "address": "0x140001f69", 
          "code": "MOV RBX,qword ptr [RAX]"
        }, 
        {
          "address": "0x140001f6c", 
          "code": "TEST RBX,RBX"
        }, 
        {
          "address": "0x140001f6f", 
          "code": "JZ 0x140001f89"
        }, 
        {
          "address": "0x140001f71", 
          "code": "MOV RAX,qword ptr [RBP + 0x38]"
        }, 
        {
          "address": "0x140001f75", 
          "code": "MOV R9,qword ptr [RAX]"
        }, 
        {
          "address": "0x140001f78", 
          "code": "CMP RBX,qword ptr [RBP + 0x80]"
        }, 
        {
          "address": "0x140001f7f", 
          "code": "CMOVC RBX,qword ptr [RBP + 0x80]"
        }, 
        {
          "address": "0x140001f87", 
          "code": "JMP 0x140001fab"
        }, 
        {
          "address": "0x140001f89", 
          "code": "TEST CL,0x4"
        }, 
        {
          "address": "0x140001f8c", 
          "code": "JNZ 0x140001fe9"
        }, 
        {
          "address": "0x140001f8e", 
          "code": "MOV RAX,qword ptr [RBP + 0x50]"
        }, 
        {
          "address": "0x140001f92", 
          "code": "MOV RCX,qword ptr [RAX]"
        }, 
        {
          "address": "0x140001f95", 
          "code": "TEST RCX,RCX"
        }, 
        {
          "address": "0x140001f98", 
          "code": "JZ 0x140001fe9"
        }, 
        {
          "address": "0x140001f9a", 
          "code": "MOV RAX,qword ptr [RBP + 0x30]"
        }, 
        {
          "address": "0x140001f9e", 
          "code": "MOV R9,qword ptr [RAX]"
        }, 
        {
          "address": "0x140001fa1", 
          "code": "MOV RAX,qword ptr [RBP + 0x68]"
        }, 
        {
          "address": "0x140001fa5", 
          "code": "MOVSXD RBX,dword ptr [RAX]"
        }, 
        {
          "address": "0x140001fa8", 
          "code": "ADD RBX,RCX"
        }, 
        {
          "address": "0x140001fab", 
          "code": "MOV RAX,R9"
        }, 
        {
          "address": "0x140001fae", 
          "code": "SUB RBX,R9"
        }, 
        {
          "address": "0x140001fb1", 
          "code": "TEST RAX,RAX"
        }, 
        {
          "address": "0x140001fb4", 
          "code": "JZ 0x140001fe9"
        }, 
        {
          "address": "0x140001fb6", 
          "code": "LEA RCX,[RSP + 0x38]"
        }, 
        {
          "address": "0x140001fbb", 
          "code": "CMP RBX,RDI"
        }, 
        {
          "address": "0x140001fbe", 
          "code": "JA 0x140001fd7"
        }, 
        {
          "address": "0x140001fc0", 
          "code": "MOV qword ptr [RSP + 0x48],RBX"
        }, 
        {
          "address": "0x140001fc5", 
          "code": "MOV R8,RBX"
        }, 
        {
          "address": "0x140001fc8", 
          "code": "MOV RDX,R9"
        }, 
        {
          "address": "0x140001fcb", 
          "code": "CALL 0x1400040b0"
        }, 
        {
          "address": "0x140001fd0", 
          "code": "MOV byte ptr [RSP + RBX*0x1 + 0x38],0x0"
        }, 
        {
          "address": "0x140001fd5", 
          "code": "JMP 0x140001fdf"
        }, 
        {
          "address": "0x140001fd7", 
          "code": "MOV RDX,RBX"
        }, 
        {
          "address": "0x140001fda", 
          "code": "CALL 0x140002dc0"
        }, 
        {
          "address": "0x140001fdf", 
          "code": "MOV R14,qword ptr [RSP + 0x48]"
        }, 
        {
          "address": "0x140001fe4", 
          "code": "MOV RDI,qword ptr [RSP + 0x50]"
        }, 
        {
          "address": "0x140001fe9", 
          "code": "MOV R13D,0xb"
        }, 
        {
          "address": "0x140001fef", 
          "code": "LEA RCX,[RSP + 0x38]"
        }, 
        {
          "address": "0x140001ff4", 
          "code": "MOV RBX,qword ptr [RSP + 0x38]"
        }, 
        {
          "address": "0x140001ff9", 
          "code": "CMP RDI,0xf"
        }, 
        {
          "address": "0x140001ffd", 
          "code": "CMOVA RCX,RBX"
        }, 
        {
          "address": "0x140002001", 
          "code": "CMP R14,0x20"
        }, 
        {
          "address": "0x140002005", 
          "code": "JNZ 0x140002025"
        }, 
        {
          "address": "0x140002007", 
          "code": "MOV R8,R14"
        }, 
        {
          "address": "0x14000200a", 
          "code": "MOV RDX,R15"
        }, 
        {
          "address": "0x14000200d", 
          "code": "CALL 0x1400041f9"
        }, 
        {
          "address": "0x140002012", 
          "code": "TEST EAX,EAX"
        }, 
        {
          "address": "0x140002014", 
          "code": "JNZ 0x140002025"
        }, 
        {
          "address": "0x140002016", 
          "code": "MOV SIL,0x1"
        }, 
        {
          "address": "0x140002019", 
          "code": "JMP 0x140002028"
        }, 
        {
          "address": "0x14000201b", 
          "code": "MOV RDI,qword ptr [RSP + 0x50]"
        }, 
        {
          "address": "0x140002020", 
          "code": "MOV RBX,qword ptr [RSP + 0x38]"
        }, 
        {
          "address": "0x140002025", 
          "code": "XOR SIL,SIL"
        }, 
        {
          "address": "0x140002028", 
          "code": "TEST R13B,0x1"
        }, 
        {
          "address": "0x14000202c", 
          "code": "JZ 0x140002068"
        }, 
        {
          "address": "0x14000202e", 
          "code": "CMP RDI,0xf"
        }, 
        {
          "address": "0x140002032", 
          "code": "JBE 0x140002068"
        }, 
        {
          "address": "0x140002034", 
          "code": "LEA RDX,[RDI + 0x1]"
        }, 
        {
          "address": "0x140002038", 
          "code": "MOV RAX,RBX"
        }, 
        {
          "address": "0x14000203b", 
          "code": "CMP RDX,0x1000"
        }, 
        {
          "address": "0x140002042", 
          "code": "JC 0x140002060"
        }, 
        {
          "address": "0x140002044", 
          "code": "ADD RDX,0x27"
        }, 
        {
          "address": "0x140002048", 
          "code": "MOV RBX,qword ptr [RBX + -0x8]"
        }, 
        {
          "address": "0x14000204c", 
          "code": "SUB RAX,RBX"
        }, 
        {
          "address": "0x14000204f", 
          "code": "ADD RAX,-0x8"
        }, 
        {
          "address": "0x140002053", 
          "code": "CMP RAX,0x1f"
        }, 
        {
          "address": "0x140002057", 
          "code": "JBE 0x140002060"
        }, 
        {
          "address": "0x140002059", 
          "code": "CALL qword ptr [0x1400052b8]"
        }, 
        {
          "address": "0x140002060", 
          "code": "MOV RCX,RBX"
        }, 
        {
          "address": "0x140002063", 
          "code": "CALL 0x1400037dc"
        }, 
        {
          "address": "0x140002068", 
          "code": "LEA R8,[0x1400060b0]"
        }, 
        {
          "address": "0x14000206f", 
          "code": "MOV RCX,qword ptr [RSP + 0x58]"
        }, 
        {
          "address": "0x140002074", 
          "code": "TEST SIL,SIL"
        }, 
        {
          "address": "0x140002077", 
          "code": "JZ 0x14000209b"
        }, 
        {
          "address": "0x140002079", 
          "code": "MOV R9D,0x40"
        }, 
        {
          "address": "0x14000207f", 
          "code": "LEA RDX,[0x140005f20]"
        }, 
        {
          "address": "0x140002086", 
          "code": "CALL qword ptr [0x140005450]"
        }, 
        {
          "address": "0x14000208c", 
          "code": "XOR EDX,EDX"
        }, 
        {
          "address": "0x14000208e", 
          "code": "MOV RCX,qword ptr [RSP + 0x58]"
        }, 
        {
          "address": "0x140002093", 
          "code": "CALL qword ptr [0x140005448]"
        }, 
        {
          "address": "0x140002099", 
          "code": "JMP 0x1400020af"
        }, 
        {
          "address": "0x14000209b", 
          "code": "MOV R9D,0x10"
        }, 
        {
          "address": "0x1400020a1", 
          "code": "LEA RDX,[0x140005f38]"
        }, 
        {
          "address": "0x1400020a8", 
          "code": "CALL qword ptr [0x140005450]"
        }, 
        {
          "address": "0x1400020ae", 
          "code": "NOP"
        }, 
        {
          "address": "0x1400020af", 
          "code": "MOV EDX,0x30"
        }, 
        {
          "address": "0x1400020b4", 
          "code": "MOV RCX,R15"
        }, 
        {
          "address": "0x1400020b7", 
          "code": "CALL 0x1400037dc"
        }, 
        {
          "address": "0x1400020bc", 
          "code": "NOP"
        }, 
        {
          "address": "0x1400020bd", 
          "code": "MOV RAX,qword ptr [RBP]"
        }, 
        {
          "address": "0x1400020c1", 
          "code": "MOVSXD RCX,dword ptr [RAX + 0x4]"
        }, 
        {
          "address": "0x1400020c5", 
          "code": "LEA RAX,[0x140005f78]"
        }, 
        {
          "address": "0x1400020cc", 
          "code": "MOV qword ptr [RBP + RCX*0x1],RAX"
        }, 
        {
          "address": "0x1400020d1", 
          "code": "MOV RAX,qword ptr [RBP]"
        }, 
        {
          "address": "0x1400020d5", 
          "code": "MOVSXD RCX,dword ptr [RAX + 0x4]"
        }, 
        {
          "address": "0x1400020d9", 
          "code": "LEA EDX,[RCX + -0x98]"
        }, 
        {
          "address": "0x1400020df", 
          "code": "MOV dword ptr [RBP + RCX*0x1 + -0x4],EDX"
        }, 
        {
          "address": "0x1400020e3", 
          "code": "LEA RCX,[RBP + 0x18]"
        }, 
        {
          "address": "0x1400020e7", 
          "code": "CALL 0x140002800"
        }, 
        {
          "address": "0x1400020ec", 
          "code": "LEA RCX,[RBP + 0x20]"
        }, 
        {
          "address": "0x1400020f0", 
          "code": "CALL qword ptr [0x140005110]"
        }, 
        {
          "address": "0x1400020f6", 
          "code": "LEA RCX,[RBP + 0x98]"
        }, 
        {
          "address": "0x1400020fd", 
          "code": "CALL qword ptr [0x140005128]"
        }, 
        {
          "address": "0x140002103", 
          "code": "NOP"
        }, 
        {
          "address": "0x140002104", 
          "code": "MOV RAX,qword ptr [RBP + -0x38]"
        }, 
        {
          "address": "0x140002108", 
          "code": "CMP RAX,0xf"
        }, 
        {
          "address": "0x14000210c", 
          "code": "JBE 0x140002144"
        }, 
        {
          "address": "0x14000210e", 
          "code": "LEA RDX,[RAX + 0x1]"
        }, 
        {
          "address": "0x140002112", 
          "code": "MOV RAX,R12"
        }, 
        {
          "address": "0x140002115", 
          "code": "CMP RDX,0x1000"
        }, 
        {
          "address": "0x14000211c", 
          "code": "JC 0x14000213b"
        }, 
        {
          "address": "0x14000211e", 
          "code": "ADD RDX,0x27"
        }, 
        {
          "address": "0x140002122", 
          "code": "MOV R12,qword ptr [R12 + -0x8]"
        }, 
        {
          "address": "0x140002127", 
          "code": "SUB RAX,R12"
        }, 
        {
          "address": "0x14000212a", 
          "code": "ADD RAX,-0x8"
        }, 
        {
          "address": "0x14000212e", 
          "code": "CMP RAX,0x1f"
        }, 
        {
          "address": "0x140002132", 
          "code": "JBE 0x14000213b"
        }, 
        {
          "address": "0x140002134", 
          "code": "CALL qword ptr [0x1400052b8]"
        }, 
        {
          "address": "0x14000213b", 
          "code": "MOV RCX,R12"
        }, 
        {
          "address": "0x14000213e", 
          "code": "CALL 0x1400037dc"
        }, 
        {
          "address": "0x140002143", 
          "code": "NOP"
        }, 
        {
          "address": "0x140002144", 
          "code": "LEA RAX,[RBP + 0x108]"
        }, 
        {
          "address": "0x14000214b", 
          "code": "MOV RCX,qword ptr [RBP + 0x100]"
        }, 
        {
          "address": "0x140002152", 
          "code": "CMP RCX,RAX"
        }, 
        {
          "address": "0x140002155", 
          "code": "JZ 0x14000215e"
        }, 
        {
          "address": "0x140002157", 
          "code": "CALL qword ptr [0x140005258]"
        }, 
        {
          "address": "0x14000215d", 
          "code": "NOP"
        }, 
        {
          "address": "0x14000215e", 
          "code": "MOV RDX,qword ptr [RBP + -0x58]"
        }, 
        {
          "address": "0x140002162", 
          "code": "CMP RDX,0xf"
        }, 
        {
          "address": "0x140002166", 
          "code": "JBE 0x14000219c"
        }, 
        {
          "address": "0x140002168", 
          "code": "INC RDX"
        }, 
        {
          "address": "0x14000216b", 
          "code": "MOV RCX,qword ptr [RBP + -0x70]"
        }, 
        {
          "address": "0x14000216f", 
          "code": "MOV RAX,RCX"
        }, 
        {
          "address": "0x140002172", 
          "code": "CMP RDX,0x1000"
        }, 
        {
          "address": "0x140002179", 
          "code": "JC 0x140002197"
        }, 
        {
          "address": "0x14000217b", 
          "code": "ADD RDX,0x27"
        }, 
        {
          "address": "0x14000217f", 
          "code": "MOV RCX,qword ptr [RCX + -0x8]"
        }, 
        {
          "address": "0x140002183", 
          "code": "SUB RAX,RCX"
        }, 
        {
          "address": "0x140002186", 
          "code": "ADD RAX,-0x8"
        }, 
        {
          "address": "0x14000218a", 
          "code": "CMP RAX,0x1f"
        }, 
        {
          "address": "0x14000218e", 
          "code": "JBE 0x140002197"
        }, 
        {
          "address": "0x140002190", 
          "code": "CALL qword ptr [0x1400052b8]"
        }, 
        {
          "address": "0x140002197", 
          "code": "CALL 0x1400037dc"
        }, 
        {
          "address": "0x14000219c", 
          "code": "MOVDQA XMM0,xmmword ptr [0x1400067c0]"
        }, 
        {
          "address": "0x1400021a4", 
          "code": "MOVDQU xmmword ptr [RBP + -0x60],XMM0"
        }, 
        {
          "address": "0x1400021a9", 
          "code": "MOV byte ptr [RBP + -0x70],0x0"
        }, 
        {
          "address": "0x1400021ad", 
          "code": "LEA RAX,[RBP + 0x198]"
        }, 
        {
          "address": "0x1400021b4", 
          "code": "MOV RCX,qword ptr [RBP + 0x190]"
        }, 
        {
          "address": "0x1400021bb", 
          "code": "CMP RCX,RAX"
        }, 
        {
          "address": "0x1400021be", 
          "code": "JZ 0x1400021c6"
        }, 
        {
          "address": "0x1400021c0", 
          "code": "CALL qword ptr [0x140005258]"
        }, 
        {
          "address": "0x1400021c6", 
          "code": "MOV RCX,qword ptr [RBP + 0x230]"
        }, 
        {
          "address": "0x1400021cd", 
          "code": "XOR RCX,RSP"
        }, 
        {
          "address": "0x1400021d0", 
          "code": "CALL 0x140003550"
        }, 
        {
          "address": "0x1400021d5", 
          "code": "LEA R11,[RSP + 0x340]"
        }, 
        {
          "address": "0x1400021dd", 
          "code": "MOV RBX,qword ptr [R11 + 0x38]"
        }, 
        {
          "address": "0x1400021e1", 
          "code": "MOV RSI,qword ptr [R11 + 0x40]"
        }, 
        {
          "address": "0x1400021e5", 
          "code": "MOV RDI,qword ptr [R11 + 0x48]"
        }, 
        {
          "address": "0x1400021e9", 
          "code": "MOV RSP,R11"
        }, 
        {
          "address": "0x1400021ec", 
          "code": "POP R15"
        }, 
        {
          "address": "0x1400021ee", 
          "code": "POP R14"
        }, 
        {
          "address": "0x1400021f0", 
          "code": "POP R13"
        }, 
        {
          "address": "0x1400021f2", 
          "code": "POP R12"
        }, 
        {
          "address": "0x1400021f4", 
          "code": "POP RBP"
        }, 
        {
          "address": "0x1400021f5", 
          "code": "RET"
        }
      ], 
      "c_code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid FUN_140001b70(CWnd *param_1)\n\n{\n  void *pvVar1;\n  bool bVar2;\n  undefined8 uVar3;\n  BOOL BVar4;\n  int iVar5;\n  undefined8 *puVar6;\n  basic_ostream<char,struct_std::char_traits<char>_> *this;\n  undefined8 ****ppppuVar7;\n  void *pvVar8;\n  BYTE *pbData;\n  ulonglong uVar9;\n  undefined8 ****ppppuVar10;\n  byte *pbVar11;\n  bool bVar12;\n  uint uVar13;\n  undefined1 auStackY_368 [32];\n  undefined8 ***local_330;\n  undefined8 uStack_328;\n  ulonglong local_320;\n  ulonglong local_318;\n  CWnd *local_310;\n  undefined1 local_308 [24];\n  DWORD local_2f0 [2];\n  HCRYPTHASH local_2e8;\n  HCRYPTPROV local_2e0;\n  BYTE local_2d8;\n  undefined7 uStack_2d7;\n  undefined *local_2c8;\n  ulonglong uStack_2c0;\n  undefined8 ***local_2b8 [2];\n  longlong local_2a8;\n  ulonglong local_2a0;\n  undefined8 *local_298;\n  undefined8 uStack_290;\n  undefined8 local_288;\n  undefined8 local_280;\n  int iStack_26c;\n  undefined *local_268 [2];\n  undefined *local_258;\n  undefined **local_250;\n  basic_iostream<char,struct_std::char_traits<char>_> local_248 [16];\n  undefined8 *local_238;\n  undefined8 *local_230;\n  longlong *local_218;\n  ulonglong *local_210;\n  int *local_200;\n  ulonglong local_1e8;\n  uint local_1e0;\n  basic_ios<char,struct_std::char_traits<char>_> local_1d0 [104];\n  undefined8 *local_168;\n  undefined8 uStack_160;\n  undefined8 local_158;\n  undefined8 uStack_150;\n  undefined8 local_148;\n  undefined8 uStack_140;\n  undefined8 local_138;\n  undefined8 uStack_130;\n  undefined8 local_128;\n  undefined8 uStack_120;\n  undefined8 local_118;\n  undefined8 uStack_110;\n  undefined8 local_108;\n  undefined8 uStack_100;\n  undefined8 local_f8;\n  undefined8 uStack_f0;\n  undefined8 local_e8;\n  undefined8 *local_d8;\n  undefined8 uStack_d0;\n  undefined8 local_c8;\n  undefined8 uStack_c0;\n  undefined8 local_b8;\n  undefined8 uStack_b0;\n  undefined8 local_a8;\n  undefined8 uStack_a0;\n  undefined8 local_98;\n  undefined8 uStack_90;\n  undefined8 local_88;\n  undefined8 uStack_80;\n  undefined8 local_78;\n  undefined8 uStack_70;\n  undefined8 local_68;\n  undefined8 uStack_60;\n  undefined8 local_58;\n  byte local_48 [16];\n  ulonglong local_38;\n  \n  local_38 = DAT_14000a040 ^ (ulonglong)auStackY_368;\n  uVar13 = 0;\n  local_310 = param_1;\n  CWnd::UpdateData(param_1,1);\n  uStack_d0 = 0;\n  local_c8 = 0;\n  uStack_c0 = 0;\n  local_b8 = 0;\n  uStack_b0 = 0;\n  local_a8 = 0;\n  uStack_a0 = 0;\n  local_98 = 0;\n  uStack_90 = 0;\n  local_88 = 0;\n  uStack_80 = 0;\n  local_78 = 0;\n  uStack_70 = 0;\n  local_68 = 0;\n  uStack_60 = 0;\n  local_58 = 0;\n  local_d8 = &uStack_d0;\n  FUN_140002b50(&local_d8,*(LPCWSTR *)(param_1 + 0x180),3);\n  FUN_140002940((undefined8 *)&local_2d8,local_d8);\n  uStack_160 = 0;\n  local_158 = 0;\n  uStack_150 = 0;\n  local_148 = 0;\n  uStack_140 = 0;\n  local_138 = 0;\n  uStack_130 = 0;\n  local_128 = 0;\n  uStack_120 = 0;\n  local_118 = 0;\n  uStack_110 = 0;\n  local_108 = 0;\n  uStack_100 = 0;\n  local_f8 = 0;\n  uStack_f0 = 0;\n  local_e8 = 0;\n  local_168 = &uStack_160;\n  FUN_140002b50(&local_168,*(LPCWSTR *)(param_1 + 0x178),3);\n  FUN_140002940(local_2b8,local_168);\n  local_2e0 = 0;\n  local_2e8 = 0;\n  local_2f0[0] = 0x10;\n  BVar4 = CryptAcquireContextW(&local_2e0,(LPCWSTR)0x0,(LPCWSTR)0x0,1,0xf0000000);\n  if (BVar4 == 0) goto LAB_140002104;\n  BVar4 = CryptCreateHash(local_2e0,0x8003,0,0,&local_2e8);\n  if (BVar4 == 0) {\n    CryptReleaseContext(local_2e0,0);\n    goto LAB_140002104;\n  }\n  pbData = &local_2d8;\n  if (0xf < uStack_2c0) {\n    pbData = (BYTE *)CONCAT71(uStack_2d7,local_2d8);\n  }\n  BVar4 = CryptHashData(local_2e8,pbData,(DWORD)local_2c8,0);\n  if (BVar4 == 0) {\n    CryptReleaseContext(local_2e0,0);\n    CryptDestroyHash(local_2e8);\n    goto LAB_140002104;\n  }\n  BVar4 = CryptGetHashParam(local_2e8,2,local_48,local_2f0,0);\n  if (BVar4 == 0) {\n    CryptReleaseContext(local_2e0,0);\n    CryptDestroyHash(local_2e8);\n    goto LAB_140002104;\n  }\n  memset((basic_iostream<char,struct_std::char_traits<char>_> *)local_268,0,0xf8);\n  local_268[0] = &DAT_140005f68;\n  local_258 = &DAT_140005f60;\n  std::basic_ios<char,struct_std::char_traits<char>_>::\n  basic_ios<char,struct_std::char_traits<char>_>(local_1d0);\n  bVar12 = false;\n  std::basic_iostream<char,struct_std::char_traits<char>_>::\n  basic_iostream<char,struct_std::char_traits<char>_>\n            ((basic_iostream<char,struct_std::char_traits<char>_> *)local_268,\n             (basic_streambuf<char,struct_std::char_traits<char>_> *)&local_250);\n  *(undefined ***)\n   ((basic_iostream<char,struct_std::char_traits<char>_> *)local_268 + *(int *)(local_268[0] + 4)) =\n       std::basic_stringstream<char,struct_std::char_traits<char>,class_std::allocator<char>_>::\n       vftable;\n  *(int *)((longlong)&iStack_26c + (longlong)*(int *)(local_268[0] + 4)) =\n       *(int *)(local_268[0] + 4) + -0x98;\n  std::basic_streambuf<char,struct_std::char_traits<char>_>::\n  basic_streambuf<char,struct_std::char_traits<char>_>\n            ((basic_streambuf<char,struct_std::char_traits<char>_> *)&local_250);\n  local_250 = std::basic_stringbuf<char,struct_std::char_traits<char>,class_std::allocator<char>_>::\n              vftable;\n  local_1e8 = 0;\n  local_1e0 = 0;\n  if (local_2f0[0] != 0) {\n    pbVar11 = local_48;\n    do {\n      puVar6 = (undefined8 *)std::setw((__int64)local_308);\n      this = std::basic_ostream<char,struct_std::char_traits<char>_>::operator<<\n                       ((basic_ostream<char,struct_std::char_traits<char>_> *)&local_258,\n                        (_func_ios_base_ptr_ios_base_ptr *)&LAB_1400016b0);\n      (*(code *)*puVar6)(this + *(int *)(*(longlong *)this + 4),puVar6[1]);\n      this[(longlong)*(int *)(*(longlong *)this + 4) + 0x58] =\n           (basic_ostream<char,struct_std::char_traits<char>_>)0x30;\n      std::basic_ostream<char,struct_std::char_traits<char>_>::operator<<(this,(uint)*pbVar11);\n      uVar13 = uVar13 + 1;\n      pbVar11 = pbVar11 + 1;\n    } while (uVar13 < local_2f0[0]);\n  }\n  CryptDestroyHash(local_2e8);\n  CryptReleaseContext(local_2e0,0);\n  local_298 = (undefined8 *)0x0;\n  uStack_290 = 0;\n  puVar6 = (undefined8 *)operator_new(0x30);\n  uVar3 = _UNK_140005f00;\n  local_288 = 0x20;\n  local_280 = 0x2f;\n  *puVar6 = _DAT_140005ef8;\n  puVar6[1] = uVar3;\n  uVar3 = s_43894a0e4a801fc3_140005f08._8_8_;\n  puVar6[2] = s_43894a0e4a801fc3_140005f08._0_8_;\n  puVar6[3] = uVar3;\n  *(undefined1 *)(puVar6 + 4) = 0;\n  ppppuVar7 = local_2b8;\n  if (0xf < local_2a0) {\n    ppppuVar7 = (undefined8 ****)local_2b8[0];\n  }\n  ppppuVar10 = (undefined8 ****)local_330;\n  uVar9 = local_318;\n  local_298 = puVar6;\n  if ((local_2a8 == 5) &&\n     (iVar5 = memcmp(ppppuVar7,\"admin\",5), ppppuVar10 = (undefined8 ****)local_330,\n     uVar9 = local_318, iVar5 == 0)) {\n    uStack_328 = 0;\n    local_320 = 0;\n    local_318 = 0xf;\n    local_330 = (undefined8 ****)0x0;\n    if ((((byte)local_1e0 & 0x22) == 2) || (uVar9 = *local_210, uVar9 == 0)) {\n      if (((local_1e0 & 4) == 0) && (*local_218 != 0)) {\n        pvVar8 = (void *)*local_238;\n        uVar9 = (longlong)*local_200 + *local_218;\n        goto LAB_140001fab;\n      }\n    }\n    else {\n      pvVar8 = (void *)*local_230;\n      if (uVar9 < local_1e8) {\n        uVar9 = local_1e8;\n      }\nLAB_140001fab:\n      uVar9 = uVar9 - (longlong)pvVar8;\n      if (pvVar8 != (void *)0x0) {\n        if (uVar9 < 0x10) {\n          local_320 = uVar9;\n          memmove(&local_330,pvVar8,uVar9);\n          *(undefined1 *)((longlong)&local_330 + uVar9) = 0;\n        }\n        else {\n          FUN_140002dc0((longlong *)&local_330,uVar9,local_2a8,pvVar8);\n        }\n      }\n    }\n    uVar9 = local_318;\n    ppppuVar10 = (undefined8 ****)local_330;\n    bVar12 = true;\n    ppppuVar7 = &local_330;\n    if (0xf < local_318) {\n      ppppuVar7 = (undefined8 ****)local_330;\n    }\n    if ((local_320 != 0x20) || (iVar5 = memcmp(ppppuVar7,puVar6,0x20), iVar5 != 0))\n    goto LAB_140002025;\n    bVar2 = true;\n  }\n  else {\nLAB_140002025:\n    bVar2 = false;\n  }\n  if ((bVar12) && (0xf < uVar9)) {\n    ppppuVar7 = ppppuVar10;\n    if ((0xfff < uVar9 + 1) &&\n       (ppppuVar7 = (undefined8 ****)ppppuVar10[-1],\n       0x1f < (ulonglong)((longlong)ppppuVar10 + (-8 - (longlong)ppppuVar7)))) {\n                    /* WARNING: Subroutine does not return */\n      _invalid_parameter_noinfo_noreturn();\n    }\n    operator_delete(ppppuVar7);\n  }\n  if (bVar2) {\n    CWnd::MessageBoxW(local_310,L\"Correct!\",L\"\",0x40);\n    CDialog::EndDialog((CDialog *)local_310,0);\n  }\n  else {\n    CWnd::MessageBoxW(local_310,L\"Wrong, try again!\",L\"\",0x10);\n  }\n  operator_delete(puVar6);\n  *(undefined ***)\n   ((basic_iostream<char,struct_std::char_traits<char>_> *)local_268 + *(int *)(local_268[0] + 4)) =\n       std::basic_stringstream<char,struct_std::char_traits<char>,class_std::allocator<char>_>::\n       vftable;\n  *(int *)((longlong)&iStack_26c + (longlong)*(int *)(local_268[0] + 4)) =\n       *(int *)(local_268[0] + 4) + -0x98;\n  FUN_140002800((basic_streambuf<char,struct_std::char_traits<char>_> *)&local_250);\n  std::basic_iostream<char,struct_std::char_traits<char>_>::\n  ~basic_iostream<char,struct_std::char_traits<char>_>(local_248);\n  std::basic_ios<char,struct_std::char_traits<char>_>::\n  ~basic_ios<char,struct_std::char_traits<char>_>(local_1d0);\nLAB_140002104:\n  if (0xf < local_2a0) {\n    ppppuVar7 = (undefined8 ****)local_2b8[0];\n    if ((0xfff < local_2a0 + 1) &&\n       (ppppuVar7 = (undefined8 ****)local_2b8[0][-1],\n       0x1f < (ulonglong)((longlong)local_2b8[0] + (-8 - (longlong)ppppuVar7)))) {\n                    /* WARNING: Subroutine does not return */\n      _invalid_parameter_noinfo_noreturn();\n    }\n    operator_delete(ppppuVar7);\n  }\n  if (local_168 != &uStack_160) {\n    free(local_168);\n  }\n  if (0xf < uStack_2c0) {\n    pvVar1 = (void *)CONCAT71(uStack_2d7,local_2d8);\n    pvVar8 = pvVar1;\n    if ((0xfff < uStack_2c0 + 1) &&\n       (pvVar8 = *(void **)((longlong)pvVar1 + -8),\n       0x1f < (ulonglong)((longlong)pvVar1 + (-8 - (longlong)pvVar8)))) {\n                    /* WARNING: Subroutine does not return */\n      _invalid_parameter_noinfo_noreturn();\n    }\n    operator_delete(pvVar8);\n  }\n  local_2c8 = PTR_1400067c0;\n  uStack_2c0 = _UNK_1400067c8;\n  local_2d8 = '\\0';\n  if (local_d8 != &uStack_d0) {\n    free(local_d8);\n  }\n  FUN_140003550(local_38 ^ (ulonglong)auStackY_368);\n  return;\n}\n\n", 
      "name": "FUN_140001b70", 
      "entry_point": "0x140001b70"
    }, 
    {
      "signature": "undefined __fastcall FUN_140002200(longlong * param_1)", 
      "disassembly": [
        {
          "address": "0x140002200", 
          "code": "PUSH RBX"
        }, 
        {
          "address": "0x140002202", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x140002206", 
          "code": "MOV RAX,qword ptr [RCX]"
        }, 
        {
          "address": "0x140002209", 
          "code": "LEA RBX,[RCX + 0x98]"
        }, 
        {
          "address": "0x140002210", 
          "code": "MOVSXD RDX,dword ptr [RAX + 0x4]"
        }, 
        {
          "address": "0x140002214", 
          "code": "LEA RAX,[0x140005f78]"
        }, 
        {
          "address": "0x14000221b", 
          "code": "MOV qword ptr [RDX + RBX*0x1 + -0x98],RAX"
        }, 
        {
          "address": "0x140002223", 
          "code": "MOV RAX,qword ptr [RCX]"
        }, 
        {
          "address": "0x140002226", 
          "code": "LEA RCX,[RBX + -0x80]"
        }, 
        {
          "address": "0x14000222a", 
          "code": "MOVSXD RDX,dword ptr [RAX + 0x4]"
        }, 
        {
          "address": "0x14000222e", 
          "code": "LEA R8D,[RDX + -0x98]"
        }, 
        {
          "address": "0x140002235", 
          "code": "MOV dword ptr [RDX + RBX*0x1 + -0x9c],R8D"
        }, 
        {
          "address": "0x14000223d", 
          "code": "CALL 0x140002800"
        }, 
        {
          "address": "0x140002242", 
          "code": "LEA RCX,[RBX + -0x78]"
        }, 
        {
          "address": "0x140002246", 
          "code": "CALL qword ptr [0x140005110]"
        }, 
        {
          "address": "0x14000224c", 
          "code": "MOV RCX,RBX"
        }, 
        {
          "address": "0x14000224f", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x140002253", 
          "code": "POP RBX"
        }, 
        {
          "address": "0x140002254", 
          "code": "JMP qword ptr [0x140005128]"
        }
      ], 
      "c_code": "\nvoid FUN_140002200(longlong *param_1)\n\n{\n  basic_ios<char,struct_std::char_traits<char>_> *this;\n  \n  this = (basic_ios<char,struct_std::char_traits<char>_> *)(param_1 + 0x13);\n  *(undefined ***)(this + (longlong)*(int *)(*param_1 + 4) + -0x98) =\n       std::basic_stringstream<char,struct_std::char_traits<char>,class_std::allocator<char>_>::\n       vftable;\n  *(int *)(this + (longlong)*(int *)(*param_1 + 4) + -0x9c) = *(int *)(*param_1 + 4) + -0x98;\n  FUN_140002800((basic_streambuf<char,struct_std::char_traits<char>_> *)(param_1 + 3));\n  std::basic_iostream<char,struct_std::char_traits<char>_>::\n  ~basic_iostream<char,struct_std::char_traits<char>_>\n            ((basic_iostream<char,struct_std::char_traits<char>_> *)(param_1 + 4));\n                    /* WARNING: Could not recover jumptable at 0x000140002254. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  std::basic_ios<char,struct_std::char_traits<char>_>::\n  ~basic_ios<char,struct_std::char_traits<char>_>(this);\n  return;\n}\n\n", 
      "name": "FUN_140002200", 
      "entry_point": "0x140002200"
    }, 
    {
      "signature": "ulonglong * __fastcall FUN_140002260(longlong param_1, ulonglong * param_2, longlong * param_3, byte param_4)", 
      "disassembly": [
        {
          "address": "0x140002260", 
          "code": "PUSH RBX"
        }, 
        {
          "address": "0x140002262", 
          "code": "MOV RBX,R8"
        }, 
        {
          "address": "0x140002265", 
          "code": "MOV R11,RCX"
        }, 
        {
          "address": "0x140002268", 
          "code": "TEST R9B,0x1"
        }, 
        {
          "address": "0x14000226c", 
          "code": "JZ 0x140002278"
        }, 
        {
          "address": "0x14000226e", 
          "code": "TEST byte ptr [RCX + 0x70],0x4"
        }, 
        {
          "address": "0x140002272", 
          "code": "JZ 0x140002278"
        }, 
        {
          "address": "0x140002274", 
          "code": "MOV CL,0x1"
        }, 
        {
          "address": "0x140002276", 
          "code": "JMP 0x14000227a"
        }, 
        {
          "address": "0x140002278", 
          "code": "XOR CL,CL"
        }, 
        {
          "address": "0x14000227a", 
          "code": "TEST R9B,0x2"
        }, 
        {
          "address": "0x14000227e", 
          "code": "JZ 0x14000228b"
        }, 
        {
          "address": "0x140002280", 
          "code": "TEST byte ptr [R11 + 0x70],0x2"
        }, 
        {
          "address": "0x140002285", 
          "code": "JZ 0x14000228b"
        }, 
        {
          "address": "0x140002287", 
          "code": "MOV AL,0x1"
        }, 
        {
          "address": "0x140002289", 
          "code": "JMP 0x14000228d"
        }, 
        {
          "address": "0x14000228b", 
          "code": "XOR AL,AL"
        }, 
        {
          "address": "0x14000228d", 
          "code": "MOV qword ptr [RSP + 0x10],RSI"
        }, 
        {
          "address": "0x140002292", 
          "code": "MOV qword ptr [RSP + 0x18],RDI"
        }, 
        {
          "address": "0x140002297", 
          "code": "MOV qword ptr [RSP + 0x20],R14"
        }, 
        {
          "address": "0x14000229c", 
          "code": "TEST CL,CL"
        }, 
        {
          "address": "0x14000229e", 
          "code": "JNZ 0x140002363"
        }, 
        {
          "address": "0x1400022a4", 
          "code": "TEST AL,AL"
        }, 
        {
          "address": "0x1400022a6", 
          "code": "JNZ 0x140002363"
        }, 
        {
          "address": "0x1400022ac", 
          "code": "MOV R8,qword ptr [R8 + 0x8]"
        }, 
        {
          "address": "0x1400022b0", 
          "code": "MOV RAX,qword ptr [R11 + 0x38]"
        }, 
        {
          "address": "0x1400022b4", 
          "code": "ADD R8,qword ptr [RBX]"
        }, 
        {
          "address": "0x1400022b7", 
          "code": "TEST byte ptr [R11 + 0x70],0x2"
        }, 
        {
          "address": "0x1400022bc", 
          "code": "MOV RSI,qword ptr [RAX]"
        }, 
        {
          "address": "0x1400022bf", 
          "code": "JZ 0x1400022c5"
        }, 
        {
          "address": "0x1400022c1", 
          "code": "XOR ECX,ECX"
        }, 
        {
          "address": "0x1400022c3", 
          "code": "JMP 0x1400022db"
        }, 
        {
          "address": "0x1400022c5", 
          "code": "MOV RAX,qword ptr [R11 + 0x40]"
        }, 
        {
          "address": "0x1400022c9", 
          "code": "MOV RCX,qword ptr [RAX]"
        }, 
        {
          "address": "0x1400022cc", 
          "code": "TEST RCX,RCX"
        }, 
        {
          "address": "0x1400022cf", 
          "code": "JZ 0x1400022db"
        }, 
        {
          "address": "0x1400022d1", 
          "code": "CMP qword ptr [R11 + 0x68],RCX"
        }, 
        {
          "address": "0x1400022d5", 
          "code": "JNC 0x1400022db"
        }, 
        {
          "address": "0x1400022d7", 
          "code": "MOV qword ptr [R11 + 0x68],RCX"
        }, 
        {
          "address": "0x1400022db", 
          "code": "MOV R14,qword ptr [R11 + 0x18]"
        }, 
        {
          "address": "0x1400022df", 
          "code": "MOV RBX,qword ptr [R11 + 0x68]"
        }, 
        {
          "address": "0x1400022e3", 
          "code": "MOV RAX,RBX"
        }, 
        {
          "address": "0x1400022e6", 
          "code": "MOV RDI,qword ptr [R14]"
        }, 
        {
          "address": "0x1400022e9", 
          "code": "SUB RAX,RDI"
        }, 
        {
          "address": "0x1400022ec", 
          "code": "CMP R8,RAX"
        }, 
        {
          "address": "0x1400022ef", 
          "code": "JA 0x140002363"
        }, 
        {
          "address": "0x1400022f1", 
          "code": "TEST R8,R8"
        }, 
        {
          "address": "0x1400022f4", 
          "code": "JZ 0x14000230c"
        }, 
        {
          "address": "0x1400022f6", 
          "code": "TEST R9B,0x1"
        }, 
        {
          "address": "0x1400022fa", 
          "code": "JZ 0x140002301"
        }, 
        {
          "address": "0x1400022fc", 
          "code": "TEST RSI,RSI"
        }, 
        {
          "address": "0x1400022ff", 
          "code": "JZ 0x140002363"
        }, 
        {
          "address": "0x140002301", 
          "code": "TEST R9B,0x2"
        }, 
        {
          "address": "0x140002305", 
          "code": "JZ 0x14000230c"
        }, 
        {
          "address": "0x140002307", 
          "code": "TEST RCX,RCX"
        }, 
        {
          "address": "0x14000230a", 
          "code": "JZ 0x140002363"
        }, 
        {
          "address": "0x14000230c", 
          "code": "LEA R10,[RDI + R8*0x1]"
        }, 
        {
          "address": "0x140002310", 
          "code": "TEST R9B,0x1"
        }, 
        {
          "address": "0x140002314", 
          "code": "JZ 0x14000232e"
        }, 
        {
          "address": "0x140002316", 
          "code": "TEST RSI,RSI"
        }, 
        {
          "address": "0x140002319", 
          "code": "JZ 0x14000232e"
        }, 
        {
          "address": "0x14000231b", 
          "code": "MOV qword ptr [R14],RDI"
        }, 
        {
          "address": "0x14000231e", 
          "code": "SUB EBX,R10D"
        }, 
        {
          "address": "0x140002321", 
          "code": "MOV RAX,qword ptr [R11 + 0x38]"
        }, 
        {
          "address": "0x140002325", 
          "code": "MOV qword ptr [RAX],R10"
        }, 
        {
          "address": "0x140002328", 
          "code": "MOV RAX,qword ptr [R11 + 0x50]"
        }, 
        {
          "address": "0x14000232c", 
          "code": "MOV dword ptr [RAX],EBX"
        }, 
        {
          "address": "0x14000232e", 
          "code": "TEST R9B,0x2"
        }, 
        {
          "address": "0x140002332", 
          "code": "JZ 0x14000235e"
        }, 
        {
          "address": "0x140002334", 
          "code": "TEST RCX,RCX"
        }, 
        {
          "address": "0x140002337", 
          "code": "JZ 0x14000235e"
        }, 
        {
          "address": "0x140002339", 
          "code": "MOV RAX,qword ptr [R11 + 0x58]"
        }, 
        {
          "address": "0x14000233d", 
          "code": "MOVSXD RCX,dword ptr [RAX]"
        }, 
        {
          "address": "0x140002340", 
          "code": "MOV RAX,qword ptr [R11 + 0x40]"
        }, 
        {
          "address": "0x140002344", 
          "code": "ADD RCX,qword ptr [RAX]"
        }, 
        {
          "address": "0x140002347", 
          "code": "MOV RAX,qword ptr [R11 + 0x20]"
        }, 
        {
          "address": "0x14000234b", 
          "code": "SUB ECX,R10D"
        }, 
        {
          "address": "0x14000234e", 
          "code": "MOV qword ptr [RAX],RDI"
        }, 
        {
          "address": "0x140002351", 
          "code": "MOV RAX,qword ptr [R11 + 0x40]"
        }, 
        {
          "address": "0x140002355", 
          "code": "MOV qword ptr [RAX],R10"
        }, 
        {
          "address": "0x140002358", 
          "code": "MOV RAX,qword ptr [R11 + 0x58]"
        }, 
        {
          "address": "0x14000235c", 
          "code": "MOV dword ptr [RAX],ECX"
        }, 
        {
          "address": "0x14000235e", 
          "code": "MOV qword ptr [RDX],R8"
        }, 
        {
          "address": "0x140002361", 
          "code": "JMP 0x14000236a"
        }, 
        {
          "address": "0x140002363", 
          "code": "MOV qword ptr [RDX],-0x1"
        }, 
        {
          "address": "0x14000236a", 
          "code": "MOV R14,qword ptr [RSP + 0x20]"
        }, 
        {
          "address": "0x14000236f", 
          "code": "XOR EAX,EAX"
        }, 
        {
          "address": "0x140002371", 
          "code": "MOV RDI,qword ptr [RSP + 0x18]"
        }, 
        {
          "address": "0x140002376", 
          "code": "MOV RSI,qword ptr [RSP + 0x10]"
        }, 
        {
          "address": "0x14000237b", 
          "code": "MOV qword ptr [RDX + 0x8],0x0"
        }, 
        {
          "address": "0x140002383", 
          "code": "MOV qword ptr [RDX + 0x10],RAX"
        }, 
        {
          "address": "0x140002387", 
          "code": "MOV RAX,RDX"
        }, 
        {
          "address": "0x14000238a", 
          "code": "POP RBX"
        }, 
        {
          "address": "0x14000238b", 
          "code": "RET"
        }
      ], 
      "c_code": "\nulonglong * FUN_140002260(longlong param_1,ulonglong *param_2,longlong *param_3,byte param_4)\n\n{\n  longlong lVar1;\n  int iVar2;\n  longlong lVar3;\n  longlong lVar4;\n  longlong lVar5;\n  undefined8 uVar6;\n  bool bVar7;\n  bool bVar8;\n  ulonglong uVar9;\n  ulonglong uVar10;\n  \n  if (((param_4 & 1) == 0) || ((*(byte *)(param_1 + 0x70) & 4) == 0)) {\n    bVar7 = false;\n  }\n  else {\n    bVar7 = true;\n  }\n  if (((param_4 & 2) == 0) || ((*(byte *)(param_1 + 0x70) & 2) == 0)) {\n    bVar8 = false;\n  }\n  else {\n    bVar8 = true;\n  }\n  if ((!bVar7) && (!bVar8)) {\n    uVar10 = param_3[1] + *param_3;\n    lVar3 = **(longlong **)(param_1 + 0x38);\n    if ((*(byte *)(param_1 + 0x70) & 2) == 0) {\n      uVar9 = **(ulonglong **)(param_1 + 0x40);\n      if ((uVar9 != 0) && (*(ulonglong *)(param_1 + 0x68) < uVar9)) {\n        *(ulonglong *)(param_1 + 0x68) = uVar9;\n      }\n    }\n    else {\n      uVar9 = 0;\n    }\n    lVar4 = *(longlong *)(param_1 + 0x68);\n    lVar5 = **(longlong **)(param_1 + 0x18);\n    if ((uVar10 <= (ulonglong)(lVar4 - lVar5)) &&\n       ((uVar10 == 0 ||\n        ((((param_4 & 1) == 0 || (lVar3 != 0)) && (((param_4 & 2) == 0 || (uVar9 != 0)))))))) {\n      lVar1 = lVar5 + uVar10;\n      if (((param_4 & 1) != 0) && (lVar3 != 0)) {\n        **(longlong **)(param_1 + 0x18) = lVar5;\n        **(longlong **)(param_1 + 0x38) = lVar1;\n        **(int **)(param_1 + 0x50) = (int)lVar4 - (int)lVar1;\n      }\n      if (((param_4 & 2) != 0) && (uVar9 != 0)) {\n        iVar2 = **(int **)(param_1 + 0x58);\n        uVar6 = **(undefined8 **)(param_1 + 0x40);\n        **(longlong **)(param_1 + 0x20) = lVar5;\n        **(longlong **)(param_1 + 0x40) = lVar1;\n        **(int **)(param_1 + 0x58) = (iVar2 + (int)uVar6) - (int)lVar1;\n      }\n      *param_2 = uVar10;\n      goto LAB_14000236a;\n    }\n  }\n  *param_2 = 0xffffffffffffffff;\nLAB_14000236a:\n  param_2[1] = 0;\n  param_2[2] = 0;\n  return param_2;\n}\n\n", 
      "name": "FUN_140002260", 
      "entry_point": "0x140002260"
    }, 
    {
      "signature": "ulonglong * __fastcall FUN_140002390(longlong param_1, ulonglong * param_2, longlong param_3, int param_4, byte param_5)", 
      "disassembly": [
        {
          "address": "0x140002390", 
          "code": "MOV qword ptr [RSP + 0x10],RBX"
        }, 
        {
          "address": "0x140002395", 
          "code": "MOV qword ptr [RSP + 0x18],RBP"
        }, 
        {
          "address": "0x14000239a", 
          "code": "PUSH RDI"
        }, 
        {
          "address": "0x14000239b", 
          "code": "MOV EBX,dword ptr [RSP + 0x30]"
        }, 
        {
          "address": "0x14000239f", 
          "code": "MOV EDI,R9D"
        }, 
        {
          "address": "0x1400023a2", 
          "code": "MOV RBP,R8"
        }, 
        {
          "address": "0x1400023a5", 
          "code": "MOV R11,RCX"
        }, 
        {
          "address": "0x1400023a8", 
          "code": "TEST BL,0x1"
        }, 
        {
          "address": "0x1400023ab", 
          "code": "JZ 0x1400023b7"
        }, 
        {
          "address": "0x1400023ad", 
          "code": "TEST byte ptr [RCX + 0x70],0x4"
        }, 
        {
          "address": "0x1400023b1", 
          "code": "JZ 0x1400023b7"
        }, 
        {
          "address": "0x1400023b3", 
          "code": "MOV CL,0x1"
        }, 
        {
          "address": "0x1400023b5", 
          "code": "JMP 0x1400023b9"
        }, 
        {
          "address": "0x1400023b7", 
          "code": "XOR CL,CL"
        }, 
        {
          "address": "0x1400023b9", 
          "code": "TEST BL,0x2"
        }, 
        {
          "address": "0x1400023bc", 
          "code": "JZ 0x1400023c9"
        }, 
        {
          "address": "0x1400023be", 
          "code": "TEST byte ptr [R11 + 0x70],0x2"
        }, 
        {
          "address": "0x1400023c3", 
          "code": "JZ 0x1400023c9"
        }, 
        {
          "address": "0x1400023c5", 
          "code": "MOV AL,0x1"
        }, 
        {
          "address": "0x1400023c7", 
          "code": "JMP 0x1400023cb"
        }, 
        {
          "address": "0x1400023c9", 
          "code": "XOR AL,AL"
        }, 
        {
          "address": "0x1400023cb", 
          "code": "MOV qword ptr [RSP + 0x10],RSI"
        }, 
        {
          "address": "0x1400023d0", 
          "code": "TEST CL,CL"
        }, 
        {
          "address": "0x1400023d2", 
          "code": "JNZ 0x1400024f4"
        }, 
        {
          "address": "0x1400023d8", 
          "code": "TEST AL,AL"
        }, 
        {
          "address": "0x1400023da", 
          "code": "JNZ 0x1400024f4"
        }, 
        {
          "address": "0x1400023e0", 
          "code": "TEST byte ptr [R11 + 0x70],0x2"
        }, 
        {
          "address": "0x1400023e5", 
          "code": "MOV RAX,qword ptr [R11 + 0x38]"
        }, 
        {
          "address": "0x1400023e9", 
          "code": "MOV RCX,qword ptr [RAX]"
        }, 
        {
          "address": "0x1400023ec", 
          "code": "JZ 0x1400023f3"
        }, 
        {
          "address": "0x1400023ee", 
          "code": "XOR R8D,R8D"
        }, 
        {
          "address": "0x1400023f1", 
          "code": "JMP 0x140002409"
        }, 
        {
          "address": "0x1400023f3", 
          "code": "MOV RAX,qword ptr [R11 + 0x40]"
        }, 
        {
          "address": "0x1400023f7", 
          "code": "MOV R8,qword ptr [RAX]"
        }, 
        {
          "address": "0x1400023fa", 
          "code": "TEST R8,R8"
        }, 
        {
          "address": "0x1400023fd", 
          "code": "JZ 0x140002409"
        }, 
        {
          "address": "0x1400023ff", 
          "code": "CMP qword ptr [R11 + 0x68],R8"
        }, 
        {
          "address": "0x140002403", 
          "code": "JNC 0x140002409"
        }, 
        {
          "address": "0x140002405", 
          "code": "MOV qword ptr [R11 + 0x68],R8"
        }, 
        {
          "address": "0x140002409", 
          "code": "MOV RAX,qword ptr [R11 + 0x18]"
        }, 
        {
          "address": "0x14000240d", 
          "code": "MOV RSI,qword ptr [R11 + 0x68]"
        }, 
        {
          "address": "0x140002411", 
          "code": "MOV R9,qword ptr [RAX]"
        }, 
        {
          "address": "0x140002414", 
          "code": "SUB RSI,R9"
        }, 
        {
          "address": "0x140002417", 
          "code": "TEST EDI,EDI"
        }, 
        {
          "address": "0x140002419", 
          "code": "JZ 0x140002475"
        }, 
        {
          "address": "0x14000241b", 
          "code": "SUB EDI,0x1"
        }, 
        {
          "address": "0x14000241e", 
          "code": "JZ 0x14000242e"
        }, 
        {
          "address": "0x140002420", 
          "code": "CMP EDI,0x1"
        }, 
        {
          "address": "0x140002423", 
          "code": "JNZ 0x1400024f4"
        }, 
        {
          "address": "0x140002429", 
          "code": "MOV RAX,RSI"
        }, 
        {
          "address": "0x14000242c", 
          "code": "JMP 0x140002477"
        }, 
        {
          "address": "0x14000242e", 
          "code": "MOV EAX,EBX"
        }, 
        {
          "address": "0x140002430", 
          "code": "AND EAX,0x3"
        }, 
        {
          "address": "0x140002433", 
          "code": "CMP AL,0x3"
        }, 
        {
          "address": "0x140002435", 
          "code": "JZ 0x1400024f4"
        }, 
        {
          "address": "0x14000243b", 
          "code": "TEST BL,0x1"
        }, 
        {
          "address": "0x14000243e", 
          "code": "JZ 0x140002456"
        }, 
        {
          "address": "0x140002440", 
          "code": "TEST RCX,RCX"
        }, 
        {
          "address": "0x140002443", 
          "code": "JNZ 0x14000244e"
        }, 
        {
          "address": "0x140002445", 
          "code": "TEST R9,R9"
        }, 
        {
          "address": "0x140002448", 
          "code": "JNZ 0x1400024f4"
        }, 
        {
          "address": "0x14000244e", 
          "code": "MOV RAX,RCX"
        }, 
        {
          "address": "0x140002451", 
          "code": "SUB RAX,R9"
        }, 
        {
          "address": "0x140002454", 
          "code": "JMP 0x140002477"
        }, 
        {
          "address": "0x140002456", 
          "code": "TEST BL,0x2"
        }, 
        {
          "address": "0x140002459", 
          "code": "JZ 0x1400024f4"
        }, 
        {
          "address": "0x14000245f", 
          "code": "TEST R8,R8"
        }, 
        {
          "address": "0x140002462", 
          "code": "JNZ 0x14000246d"
        }, 
        {
          "address": "0x140002464", 
          "code": "TEST R9,R9"
        }, 
        {
          "address": "0x140002467", 
          "code": "JNZ 0x1400024f4"
        }, 
        {
          "address": "0x14000246d", 
          "code": "MOV RAX,R8"
        }, 
        {
          "address": "0x140002470", 
          "code": "SUB RAX,R9"
        }, 
        {
          "address": "0x140002473", 
          "code": "JMP 0x140002477"
        }, 
        {
          "address": "0x140002475", 
          "code": "XOR EAX,EAX"
        }, 
        {
          "address": "0x140002477", 
          "code": "LEA R10,[RAX + RBP*0x1]"
        }, 
        {
          "address": "0x14000247b", 
          "code": "CMP R10,RSI"
        }, 
        {
          "address": "0x14000247e", 
          "code": "JA 0x1400024f4"
        }, 
        {
          "address": "0x140002480", 
          "code": "TEST R10,R10"
        }, 
        {
          "address": "0x140002483", 
          "code": "JZ 0x140002499"
        }, 
        {
          "address": "0x140002485", 
          "code": "TEST BL,0x1"
        }, 
        {
          "address": "0x140002488", 
          "code": "JZ 0x14000248f"
        }, 
        {
          "address": "0x14000248a", 
          "code": "TEST RCX,RCX"
        }, 
        {
          "address": "0x14000248d", 
          "code": "JZ 0x1400024f4"
        }, 
        {
          "address": "0x14000248f", 
          "code": "TEST BL,0x2"
        }, 
        {
          "address": "0x140002492", 
          "code": "JZ 0x140002499"
        }, 
        {
          "address": "0x140002494", 
          "code": "TEST R8,R8"
        }, 
        {
          "address": "0x140002497", 
          "code": "JZ 0x1400024f4"
        }, 
        {
          "address": "0x140002499", 
          "code": "LEA RDI,[R9 + R10*0x1]"
        }, 
        {
          "address": "0x14000249d", 
          "code": "TEST BL,0x1"
        }, 
        {
          "address": "0x1400024a0", 
          "code": "JZ 0x1400024c1"
        }, 
        {
          "address": "0x1400024a2", 
          "code": "TEST RCX,RCX"
        }, 
        {
          "address": "0x1400024a5", 
          "code": "JZ 0x1400024c1"
        }, 
        {
          "address": "0x1400024a7", 
          "code": "MOV RAX,qword ptr [R11 + 0x18]"
        }, 
        {
          "address": "0x1400024ab", 
          "code": "MOV RCX,qword ptr [R11 + 0x68]"
        }, 
        {
          "address": "0x1400024af", 
          "code": "SUB ECX,EDI"
        }, 
        {
          "address": "0x1400024b1", 
          "code": "MOV qword ptr [RAX],R9"
        }, 
        {
          "address": "0x1400024b4", 
          "code": "MOV RAX,qword ptr [R11 + 0x38]"
        }, 
        {
          "address": "0x1400024b8", 
          "code": "MOV qword ptr [RAX],RDI"
        }, 
        {
          "address": "0x1400024bb", 
          "code": "MOV RAX,qword ptr [R11 + 0x50]"
        }, 
        {
          "address": "0x1400024bf", 
          "code": "MOV dword ptr [RAX],ECX"
        }, 
        {
          "address": "0x1400024c1", 
          "code": "TEST BL,0x2"
        }, 
        {
          "address": "0x1400024c4", 
          "code": "JZ 0x1400024ef"
        }, 
        {
          "address": "0x1400024c6", 
          "code": "TEST R8,R8"
        }, 
        {
          "address": "0x1400024c9", 
          "code": "JZ 0x1400024ef"
        }, 
        {
          "address": "0x1400024cb", 
          "code": "MOV RAX,qword ptr [R11 + 0x58]"
        }, 
        {
          "address": "0x1400024cf", 
          "code": "MOVSXD RCX,dword ptr [RAX]"
        }, 
        {
          "address": "0x1400024d2", 
          "code": "MOV RAX,qword ptr [R11 + 0x40]"
        }, 
        {
          "address": "0x1400024d6", 
          "code": "ADD RCX,qword ptr [RAX]"
        }, 
        {
          "address": "0x1400024d9", 
          "code": "MOV RAX,qword ptr [R11 + 0x20]"
        }, 
        {
          "address": "0x1400024dd", 
          "code": "SUB ECX,EDI"
        }, 
        {
          "address": "0x1400024df", 
          "code": "MOV qword ptr [RAX],R9"
        }, 
        {
          "address": "0x1400024e2", 
          "code": "MOV RAX,qword ptr [R11 + 0x40]"
        }, 
        {
          "address": "0x1400024e6", 
          "code": "MOV qword ptr [RAX],RDI"
        }, 
        {
          "address": "0x1400024e9", 
          "code": "MOV RAX,qword ptr [R11 + 0x58]"
        }, 
        {
          "address": "0x1400024ed", 
          "code": "MOV dword ptr [RAX],ECX"
        }, 
        {
          "address": "0x1400024ef", 
          "code": "MOV qword ptr [RDX],R10"
        }, 
        {
          "address": "0x1400024f2", 
          "code": "JMP 0x1400024fb"
        }, 
        {
          "address": "0x1400024f4", 
          "code": "MOV qword ptr [RDX],-0x1"
        }, 
        {
          "address": "0x1400024fb", 
          "code": "MOV RSI,qword ptr [RSP + 0x10]"
        }, 
        {
          "address": "0x140002500", 
          "code": "XOR EAX,EAX"
        }, 
        {
          "address": "0x140002502", 
          "code": "MOV RBX,qword ptr [RSP + 0x18]"
        }, 
        {
          "address": "0x140002507", 
          "code": "MOV RBP,qword ptr [RSP + 0x20]"
        }, 
        {
          "address": "0x14000250c", 
          "code": "MOV qword ptr [RDX + 0x8],0x0"
        }, 
        {
          "address": "0x140002514", 
          "code": "MOV qword ptr [RDX + 0x10],RAX"
        }, 
        {
          "address": "0x140002518", 
          "code": "MOV RAX,RDX"
        }, 
        {
          "address": "0x14000251b", 
          "code": "POP RDI"
        }, 
        {
          "address": "0x14000251c", 
          "code": "RET"
        }
      ], 
      "c_code": "\nulonglong *\nFUN_140002390(longlong param_1,ulonglong *param_2,longlong param_3,int param_4,byte param_5)\n\n{\n  longlong lVar1;\n  int iVar2;\n  longlong lVar3;\n  longlong lVar4;\n  undefined8 uVar5;\n  bool bVar6;\n  bool bVar7;\n  ulonglong uVar8;\n  ulonglong uVar9;\n  ulonglong uVar10;\n  \n  if (((param_5 & 1) == 0) || ((*(byte *)(param_1 + 0x70) & 4) == 0)) {\n    bVar6 = false;\n  }\n  else {\n    bVar6 = true;\n  }\n  if (((param_5 & 2) == 0) || ((*(byte *)(param_1 + 0x70) & 2) == 0)) {\n    bVar7 = false;\n  }\n  else {\n    bVar7 = true;\n  }\n  if ((bVar6) || (bVar7)) goto LAB_1400024f4;\n  lVar3 = **(longlong **)(param_1 + 0x38);\n  if ((*(byte *)(param_1 + 0x70) & 2) == 0) {\n    uVar10 = **(ulonglong **)(param_1 + 0x40);\n    if ((uVar10 != 0) && (*(ulonglong *)(param_1 + 0x68) < uVar10)) {\n      *(ulonglong *)(param_1 + 0x68) = uVar10;\n    }\n  }\n  else {\n    uVar10 = 0;\n  }\n  lVar4 = **(longlong **)(param_1 + 0x18);\n  uVar9 = *(longlong *)(param_1 + 0x68) - lVar4;\n  if (param_4 == 0) {\n    uVar8 = 0;\nLAB_140002477:\n    uVar8 = uVar8 + param_3;\n    if ((uVar8 <= uVar9) &&\n       ((uVar8 == 0 ||\n        ((((param_5 & 1) == 0 || (lVar3 != 0)) && (((param_5 & 2) == 0 || (uVar10 != 0)))))))) {\n      lVar1 = lVar4 + uVar8;\n      if (((param_5 & 1) != 0) && (lVar3 != 0)) {\n        uVar5 = *(undefined8 *)(param_1 + 0x68);\n        **(longlong **)(param_1 + 0x18) = lVar4;\n        **(longlong **)(param_1 + 0x38) = lVar1;\n        **(int **)(param_1 + 0x50) = (int)uVar5 - (int)lVar1;\n      }\n      if (((param_5 & 2) != 0) && (uVar10 != 0)) {\n        iVar2 = **(int **)(param_1 + 0x58);\n        uVar5 = **(undefined8 **)(param_1 + 0x40);\n        **(longlong **)(param_1 + 0x20) = lVar4;\n        **(longlong **)(param_1 + 0x40) = lVar1;\n        **(int **)(param_1 + 0x58) = (iVar2 + (int)uVar5) - (int)lVar1;\n      }\n      *param_2 = uVar8;\n      goto LAB_1400024fb;\n    }\n  }\n  else if (param_4 == 1) {\n    if ((param_5 & 3) != 3) {\n      if ((param_5 & 1) == 0) {\n        if (((param_5 & 2) != 0) && ((uVar10 != 0 || (lVar4 == 0)))) {\n          uVar8 = uVar10 - lVar4;\n          goto LAB_140002477;\n        }\n      }\n      else if ((lVar3 != 0) || (lVar4 == 0)) {\n        uVar8 = lVar3 - lVar4;\n        goto LAB_140002477;\n      }\n    }\n  }\n  else {\n    uVar8 = uVar9;\n    if (param_4 == 2) goto LAB_140002477;\n  }\nLAB_1400024f4:\n  *param_2 = 0xffffffffffffffff;\nLAB_1400024fb:\n  param_2[1] = 0;\n  param_2[2] = 0;\n  return param_2;\n}\n\n", 
      "name": "FUN_140002390", 
      "entry_point": "0x140002390"
    }, 
    {
      "signature": "ulonglong __fastcall FUN_140002520(longlong param_1)", 
      "disassembly": [
        {
          "address": "0x140002520", 
          "code": "SUB RSP,0x18"
        }, 
        {
          "address": "0x140002524", 
          "code": "MOV R10,qword ptr [RCX + 0x38]"
        }, 
        {
          "address": "0x140002528", 
          "code": "MOV RDX,RCX"
        }, 
        {
          "address": "0x14000252b", 
          "code": "MOV R8,qword ptr [R10]"
        }, 
        {
          "address": "0x14000252e", 
          "code": "TEST R8,R8"
        }, 
        {
          "address": "0x140002531", 
          "code": "JZ 0x140002590"
        }, 
        {
          "address": "0x140002533", 
          "code": "MOV RAX,qword ptr [RCX + 0x50]"
        }, 
        {
          "address": "0x140002537", 
          "code": "MOVSXD RCX,dword ptr [RAX]"
        }, 
        {
          "address": "0x14000253a", 
          "code": "ADD RCX,R8"
        }, 
        {
          "address": "0x14000253d", 
          "code": "CMP R8,RCX"
        }, 
        {
          "address": "0x140002540", 
          "code": "JNC 0x14000254b"
        }, 
        {
          "address": "0x140002542", 
          "code": "MOVZX EAX,byte ptr [R8]"
        }, 
        {
          "address": "0x140002546", 
          "code": "ADD RSP,0x18"
        }, 
        {
          "address": "0x14000254a", 
          "code": "RET"
        }, 
        {
          "address": "0x14000254b", 
          "code": "MOV RAX,qword ptr [RDX + 0x40]"
        }, 
        {
          "address": "0x14000254f", 
          "code": "MOV RCX,qword ptr [RAX]"
        }, 
        {
          "address": "0x140002552", 
          "code": "TEST RCX,RCX"
        }, 
        {
          "address": "0x140002555", 
          "code": "JZ 0x140002590"
        }, 
        {
          "address": "0x140002557", 
          "code": "TEST byte ptr [RDX + 0x70],0x4"
        }, 
        {
          "address": "0x14000255b", 
          "code": "JNZ 0x140002590"
        }, 
        {
          "address": "0x14000255d", 
          "code": "MOV R9,qword ptr [RDX + 0x68]"
        }, 
        {
          "address": "0x140002561", 
          "code": "CMP R9,RCX"
        }, 
        {
          "address": "0x140002564", 
          "code": "CMOVC R9,RCX"
        }, 
        {
          "address": "0x140002568", 
          "code": "CMP R9,R8"
        }, 
        {
          "address": "0x14000256b", 
          "code": "JBE 0x140002590"
        }, 
        {
          "address": "0x14000256d", 
          "code": "MOV qword ptr [RDX + 0x68],R9"
        }, 
        {
          "address": "0x140002571", 
          "code": "MOV RCX,qword ptr [R10]"
        }, 
        {
          "address": "0x140002574", 
          "code": "MOV qword ptr [R10],RCX"
        }, 
        {
          "address": "0x140002577", 
          "code": "SUB R9D,ECX"
        }, 
        {
          "address": "0x14000257a", 
          "code": "MOV RAX,qword ptr [RDX + 0x50]"
        }, 
        {
          "address": "0x14000257e", 
          "code": "MOV dword ptr [RAX],R9D"
        }, 
        {
          "address": "0x140002581", 
          "code": "MOV RAX,qword ptr [RDX + 0x38]"
        }, 
        {
          "address": "0x140002585", 
          "code": "MOV RCX,qword ptr [RAX]"
        }, 
        {
          "address": "0x140002588", 
          "code": "MOVZX EAX,byte ptr [RCX]"
        }, 
        {
          "address": "0x14000258b", 
          "code": "ADD RSP,0x18"
        }, 
        {
          "address": "0x14000258f", 
          "code": "RET"
        }, 
        {
          "address": "0x140002590", 
          "code": "MOV EAX,0xffffffff"
        }, 
        {
          "address": "0x140002595", 
          "code": "ADD RSP,0x18"
        }, 
        {
          "address": "0x140002599", 
          "code": "RET"
        }
      ], 
      "c_code": "\nulonglong FUN_140002520(longlong param_1)\n\n{\n  undefined8 *puVar1;\n  byte *pbVar2;\n  byte *pbVar3;\n  undefined8 uVar4;\n  byte *pbVar5;\n  \n  puVar1 = *(undefined8 **)(param_1 + 0x38);\n  pbVar2 = (byte *)*puVar1;\n  if (pbVar2 != (byte *)0x0) {\n    if (pbVar2 < pbVar2 + **(int **)(param_1 + 0x50)) {\n      return (ulonglong)*pbVar2;\n    }\n    pbVar3 = (byte *)**(undefined8 **)(param_1 + 0x40);\n    if ((pbVar3 != (byte *)0x0) && ((*(byte *)(param_1 + 0x70) & 4) == 0)) {\n      pbVar5 = *(byte **)(param_1 + 0x68);\n      if (*(byte **)(param_1 + 0x68) < pbVar3) {\n        pbVar5 = pbVar3;\n      }\n      if (pbVar2 < pbVar5) {\n        *(byte **)(param_1 + 0x68) = pbVar5;\n        uVar4 = *puVar1;\n        *puVar1 = uVar4;\n        **(int **)(param_1 + 0x50) = (int)pbVar5 - (int)uVar4;\n        return (ulonglong)*(byte *)**(undefined8 **)(param_1 + 0x38);\n      }\n    }\n  }\n  return 0xffffffff;\n}\n\n", 
      "name": "FUN_140002520", 
      "entry_point": "0x140002520"
    }, 
    {
      "signature": "int __fastcall FUN_1400025a0(longlong param_1, int param_2)", 
      "disassembly": [
        {
          "address": "0x1400025a0", 
          "code": "MOV RAX,qword ptr [RCX + 0x38]"
        }, 
        {
          "address": "0x1400025a4", 
          "code": "MOV R8,qword ptr [RAX]"
        }, 
        {
          "address": "0x1400025a7", 
          "code": "TEST R8,R8"
        }, 
        {
          "address": "0x1400025aa", 
          "code": "JZ 0x1400025ec"
        }, 
        {
          "address": "0x1400025ac", 
          "code": "MOV RAX,qword ptr [RCX + 0x18]"
        }, 
        {
          "address": "0x1400025b0", 
          "code": "CMP R8,qword ptr [RAX]"
        }, 
        {
          "address": "0x1400025b3", 
          "code": "JBE 0x1400025ec"
        }, 
        {
          "address": "0x1400025b5", 
          "code": "CMP EDX,-0x1"
        }, 
        {
          "address": "0x1400025b8", 
          "code": "JZ 0x1400025c6"
        }, 
        {
          "address": "0x1400025ba", 
          "code": "CMP DL,byte ptr [R8 + -0x1]"
        }, 
        {
          "address": "0x1400025be", 
          "code": "JZ 0x1400025c6"
        }, 
        {
          "address": "0x1400025c0", 
          "code": "TEST byte ptr [RCX + 0x70],0x2"
        }, 
        {
          "address": "0x1400025c4", 
          "code": "JNZ 0x1400025ec"
        }, 
        {
          "address": "0x1400025c6", 
          "code": "MOV RAX,qword ptr [RCX + 0x50]"
        }, 
        {
          "address": "0x1400025ca", 
          "code": "INC dword ptr [RAX]"
        }, 
        {
          "address": "0x1400025cc", 
          "code": "MOV RAX,qword ptr [RCX + 0x38]"
        }, 
        {
          "address": "0x1400025d0", 
          "code": "DEC qword ptr [RAX]"
        }, 
        {
          "address": "0x1400025d3", 
          "code": "CMP EDX,-0x1"
        }, 
        {
          "address": "0x1400025d6", 
          "code": "JZ 0x1400025e1"
        }, 
        {
          "address": "0x1400025d8", 
          "code": "MOV RAX,qword ptr [RCX + 0x38]"
        }, 
        {
          "address": "0x1400025dc", 
          "code": "MOV RCX,qword ptr [RAX]"
        }, 
        {
          "address": "0x1400025df", 
          "code": "MOV byte ptr [RCX],DL"
        }, 
        {
          "address": "0x1400025e1", 
          "code": "XOR EAX,EAX"
        }, 
        {
          "address": "0x1400025e3", 
          "code": "CMP EDX,-0x1"
        }, 
        {
          "address": "0x1400025e6", 
          "code": "CMOVZ EDX,EAX"
        }, 
        {
          "address": "0x1400025e9", 
          "code": "MOV EAX,EDX"
        }, 
        {
          "address": "0x1400025eb", 
          "code": "RET"
        }, 
        {
          "address": "0x1400025ec", 
          "code": "MOV EAX,0xffffffff"
        }, 
        {
          "address": "0x1400025f1", 
          "code": "RET"
        }
      ], 
      "c_code": "\nint FUN_1400025a0(longlong param_1,int param_2)\n\n{\n  ulonglong uVar1;\n  \n  uVar1 = **(ulonglong **)(param_1 + 0x38);\n  if (((uVar1 != 0) && (**(ulonglong **)(param_1 + 0x18) < uVar1)) &&\n     ((param_2 == -1 ||\n      (((char)param_2 == *(char *)(uVar1 - 1) || ((*(byte *)(param_1 + 0x70) & 2) == 0)))))) {\n    **(int **)(param_1 + 0x50) = **(int **)(param_1 + 0x50) + 1;\n    **(longlong **)(param_1 + 0x38) = **(longlong **)(param_1 + 0x38) + -1;\n    if (param_2 == -1) {\n      param_2 = 0;\n    }\n    else {\n      *(char *)**(undefined8 **)(param_1 + 0x38) = (char)param_2;\n    }\n    return param_2;\n  }\n  return -1;\n}\n\n", 
      "name": "FUN_1400025a0", 
      "entry_point": "0x1400025a0"
    }, 
    {
      "signature": "ulonglong __fastcall FUN_140002600(longlong param_1, uint param_2)", 
      "disassembly": [
        {
          "address": "0x140002600", 
          "code": "MOV qword ptr [RSP + 0x10],RBX"
        }, 
        {
          "address": "0x140002605", 
          "code": "MOV qword ptr [RSP + 0x18],RBP"
        }, 
        {
          "address": "0x14000260a", 
          "code": "MOV qword ptr [RSP + 0x20],RSI"
        }, 
        {
          "address": "0x14000260f", 
          "code": "PUSH RDI"
        }, 
        {
          "address": "0x140002610", 
          "code": "PUSH R14"
        }, 
        {
          "address": "0x140002612", 
          "code": "PUSH R15"
        }, 
        {
          "address": "0x140002614", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x140002618", 
          "code": "TEST byte ptr [RCX + 0x70],0x2"
        }, 
        {
          "address": "0x14000261c", 
          "code": "MOV R15D,EDX"
        }, 
        {
          "address": "0x14000261f", 
          "code": "MOV RBX,RCX"
        }, 
        {
          "address": "0x140002622", 
          "code": "JNZ 0x1400027d7"
        }, 
        {
          "address": "0x140002628", 
          "code": "CMP EDX,-0x1"
        }, 
        {
          "address": "0x14000262b", 
          "code": "JNZ 0x140002634"
        }, 
        {
          "address": "0x14000262d", 
          "code": "XOR EAX,EAX"
        }, 
        {
          "address": "0x14000262f", 
          "code": "JMP 0x1400027dc"
        }, 
        {
          "address": "0x140002634", 
          "code": "MOV RAX,qword ptr [RCX + 0x40]"
        }, 
        {
          "address": "0x140002638", 
          "code": "MOV RCX,qword ptr [RCX + 0x58]"
        }, 
        {
          "address": "0x14000263c", 
          "code": "MOV R8,qword ptr [RAX]"
        }, 
        {
          "address": "0x14000263f", 
          "code": "MOVSXD RAX,dword ptr [RCX]"
        }, 
        {
          "address": "0x140002642", 
          "code": "LEA RDI,[R8 + RAX*0x1]"
        }, 
        {
          "address": "0x140002646", 
          "code": "TEST R8,R8"
        }, 
        {
          "address": "0x140002649", 
          "code": "JZ 0x1400026ea"
        }, 
        {
          "address": "0x14000264f", 
          "code": "CMP R8,RDI"
        }, 
        {
          "address": "0x140002652", 
          "code": "JNC 0x140002679"
        }, 
        {
          "address": "0x140002654", 
          "code": "DEC EAX"
        }, 
        {
          "address": "0x140002656", 
          "code": "MOV dword ptr [RCX],EAX"
        }, 
        {
          "address": "0x140002658", 
          "code": "MOV RCX,qword ptr [RBX + 0x40]"
        }, 
        {
          "address": "0x14000265c", 
          "code": "MOV RDX,qword ptr [RCX]"
        }, 
        {
          "address": "0x14000265f", 
          "code": "LEA RAX,[RDX + 0x1]"
        }, 
        {
          "address": "0x140002663", 
          "code": "MOV qword ptr [RCX],RAX"
        }, 
        {
          "address": "0x140002666", 
          "code": "LEA RAX,[R8 + 0x1]"
        }, 
        {
          "address": "0x14000266a", 
          "code": "MOV byte ptr [RDX],R15B"
        }, 
        {
          "address": "0x14000266d", 
          "code": "MOV qword ptr [RBX + 0x68],RAX"
        }, 
        {
          "address": "0x140002671", 
          "code": "MOV EAX,R15D"
        }, 
        {
          "address": "0x140002674", 
          "code": "JMP 0x1400027dc"
        }, 
        {
          "address": "0x140002679", 
          "code": "MOV RAX,qword ptr [RBX + 0x18]"
        }, 
        {
          "address": "0x14000267d", 
          "code": "MOV RSI,qword ptr [RAX]"
        }, 
        {
          "address": "0x140002680", 
          "code": "SUB RDI,RSI"
        }, 
        {
          "address": "0x140002683", 
          "code": "CMP RDI,0x20"
        }, 
        {
          "address": "0x140002687", 
          "code": "JC 0x1400026f3"
        }, 
        {
          "address": "0x140002689", 
          "code": "CMP RDI,0x3fffffff"
        }, 
        {
          "address": "0x140002690", 
          "code": "JNC 0x1400026ba"
        }, 
        {
          "address": "0x140002692", 
          "code": "LEA RAX,[RDI + RDI*0x1]"
        }, 
        {
          "address": "0x140002696", 
          "code": "MOV RBP,RAX"
        }, 
        {
          "address": "0x140002699", 
          "code": "CMP RAX,0x1000"
        }, 
        {
          "address": "0x14000269f", 
          "code": "JC 0x1400026b0"
        }, 
        {
          "address": "0x1400026a1", 
          "code": "LEA RCX,[RAX + 0x27]"
        }, 
        {
          "address": "0x1400026a5", 
          "code": "CMP RCX,RAX"
        }, 
        {
          "address": "0x1400026a8", 
          "code": "JBE 0x1400027f5"
        }, 
        {
          "address": "0x1400026ae", 
          "code": "JMP 0x1400026cd"
        }, 
        {
          "address": "0x1400026b0", 
          "code": "TEST RAX,RAX"
        }, 
        {
          "address": "0x1400026b3", 
          "code": "JNZ 0x1400026f8"
        }, 
        {
          "address": "0x1400026b5", 
          "code": "XOR R14D,R14D"
        }, 
        {
          "address": "0x1400026b8", 
          "code": "JMP 0x140002704"
        }, 
        {
          "address": "0x1400026ba", 
          "code": "MOV EBP,0x7fffffff"
        }, 
        {
          "address": "0x1400026bf", 
          "code": "CMP RDI,RBP"
        }, 
        {
          "address": "0x1400026c2", 
          "code": "JNC 0x1400027d7"
        }, 
        {
          "address": "0x1400026c8", 
          "code": "MOV ECX,0x80000026"
        }, 
        {
          "address": "0x1400026cd", 
          "code": "CALL qword ptr [0x140005720]"
        }, 
        {
          "address": "0x1400026d3", 
          "code": "TEST RAX,RAX"
        }, 
        {
          "address": "0x1400026d6", 
          "code": "JZ 0x1400027d0"
        }, 
        {
          "address": "0x1400026dc", 
          "code": "LEA R14,[RAX + 0x27]"
        }, 
        {
          "address": "0x1400026e0", 
          "code": "AND R14,-0x20"
        }, 
        {
          "address": "0x1400026e4", 
          "code": "MOV qword ptr [R14 + -0x8],RAX"
        }, 
        {
          "address": "0x1400026e8", 
          "code": "JMP 0x140002704"
        }, 
        {
          "address": "0x1400026ea", 
          "code": "MOV RAX,qword ptr [RBX + 0x18]"
        }, 
        {
          "address": "0x1400026ee", 
          "code": "XOR EDI,EDI"
        }, 
        {
          "address": "0x1400026f0", 
          "code": "MOV RSI,qword ptr [RAX]"
        }, 
        {
          "address": "0x1400026f3", 
          "code": "MOV EBP,0x20"
        }, 
        {
          "address": "0x1400026f8", 
          "code": "MOV RCX,RBP"
        }, 
        {
          "address": "0x1400026fb", 
          "code": "CALL qword ptr [0x140005720]"
        }, 
        {
          "address": "0x140002701", 
          "code": "MOV R14,RAX"
        }, 
        {
          "address": "0x140002704", 
          "code": "MOV R8,RDI"
        }, 
        {
          "address": "0x140002707", 
          "code": "MOV RDX,RSI"
        }, 
        {
          "address": "0x14000270a", 
          "code": "MOV RCX,R14"
        }, 
        {
          "address": "0x14000270d", 
          "code": "CALL 0x1400041ff"
        }, 
        {
          "address": "0x140002712", 
          "code": "LEA RDX,[R14 + RDI*0x1]"
        }, 
        {
          "address": "0x140002716", 
          "code": "LEA RCX,[RDX + 0x1]"
        }, 
        {
          "address": "0x14000271a", 
          "code": "SUB EBP,EDX"
        }, 
        {
          "address": "0x14000271c", 
          "code": "MOV qword ptr [RBX + 0x68],RCX"
        }, 
        {
          "address": "0x140002720", 
          "code": "ADD EBP,R14D"
        }, 
        {
          "address": "0x140002723", 
          "code": "MOV RCX,qword ptr [RBX + 0x20]"
        }, 
        {
          "address": "0x140002727", 
          "code": "MOV qword ptr [RCX],R14"
        }, 
        {
          "address": "0x14000272a", 
          "code": "MOV RCX,qword ptr [RBX + 0x40]"
        }, 
        {
          "address": "0x14000272e", 
          "code": "MOV qword ptr [RCX],RDX"
        }, 
        {
          "address": "0x140002731", 
          "code": "MOV RAX,qword ptr [RBX + 0x58]"
        }, 
        {
          "address": "0x140002735", 
          "code": "MOV dword ptr [RAX],EBP"
        }, 
        {
          "address": "0x140002737", 
          "code": "TEST byte ptr [RBX + 0x70],0x4"
        }, 
        {
          "address": "0x14000273b", 
          "code": "JZ 0x140002757"
        }, 
        {
          "address": "0x14000273d", 
          "code": "MOV RAX,qword ptr [RBX + 0x18]"
        }, 
        {
          "address": "0x140002741", 
          "code": "MOV qword ptr [RAX],R14"
        }, 
        {
          "address": "0x140002744", 
          "code": "MOV RAX,qword ptr [RBX + 0x38]"
        }, 
        {
          "address": "0x140002748", 
          "code": "MOV qword ptr [RAX],R14"
        }, 
        {
          "address": "0x14000274b", 
          "code": "MOV RAX,qword ptr [RBX + 0x50]"
        }, 
        {
          "address": "0x14000274f", 
          "code": "MOV dword ptr [RAX],0x0"
        }, 
        {
          "address": "0x140002755", 
          "code": "JMP 0x14000277e"
        }, 
        {
          "address": "0x140002757", 
          "code": "MOV RAX,qword ptr [RBX + 0x38]"
        }, 
        {
          "address": "0x14000275b", 
          "code": "MOV RDX,qword ptr [RBX + 0x68]"
        }, 
        {
          "address": "0x14000275f", 
          "code": "MOV RCX,qword ptr [RAX]"
        }, 
        {
          "address": "0x140002762", 
          "code": "MOV RAX,qword ptr [RBX + 0x18]"
        }, 
        {
          "address": "0x140002766", 
          "code": "SUB RCX,RSI"
        }, 
        {
          "address": "0x140002769", 
          "code": "ADD RCX,R14"
        }, 
        {
          "address": "0x14000276c", 
          "code": "SUB EDX,ECX"
        }, 
        {
          "address": "0x14000276e", 
          "code": "MOV qword ptr [RAX],R14"
        }, 
        {
          "address": "0x140002771", 
          "code": "MOV RAX,qword ptr [RBX + 0x38]"
        }, 
        {
          "address": "0x140002775", 
          "code": "MOV qword ptr [RAX],RCX"
        }, 
        {
          "address": "0x140002778", 
          "code": "MOV RAX,qword ptr [RBX + 0x50]"
        }, 
        {
          "address": "0x14000277c", 
          "code": "MOV dword ptr [RAX],EDX"
        }, 
        {
          "address": "0x14000277e", 
          "code": "TEST byte ptr [RBX + 0x70],0x1"
        }, 
        {
          "address": "0x140002782", 
          "code": "JZ 0x1400027b0"
        }, 
        {
          "address": "0x140002784", 
          "code": "CMP RDI,0x1000"
        }, 
        {
          "address": "0x14000278b", 
          "code": "JC 0x1400027a5"
        }, 
        {
          "address": "0x14000278d", 
          "code": "MOV RCX,qword ptr [RSI + -0x8]"
        }, 
        {
          "address": "0x140002791", 
          "code": "ADD RDI,0x27"
        }, 
        {
          "address": "0x140002795", 
          "code": "SUB RSI,RCX"
        }, 
        {
          "address": "0x140002798", 
          "code": "LEA RAX,[RSI + -0x8]"
        }, 
        {
          "address": "0x14000279c", 
          "code": "CMP RAX,0x1f"
        }, 
        {
          "address": "0x1400027a0", 
          "code": "JA 0x1400027d0"
        }, 
        {
          "address": "0x1400027a2", 
          "code": "MOV RSI,RCX"
        }, 
        {
          "address": "0x1400027a5", 
          "code": "MOV RDX,RDI"
        }, 
        {
          "address": "0x1400027a8", 
          "code": "MOV RCX,RSI"
        }, 
        {
          "address": "0x1400027ab", 
          "code": "CALL 0x1400037dc"
        }, 
        {
          "address": "0x1400027b0", 
          "code": "MOV RAX,qword ptr [RBX + 0x58]"
        }, 
        {
          "address": "0x1400027b4", 
          "code": "OR dword ptr [RBX + 0x70],0x1"
        }, 
        {
          "address": "0x1400027b8", 
          "code": "DEC dword ptr [RAX]"
        }, 
        {
          "address": "0x1400027ba", 
          "code": "MOV RCX,qword ptr [RBX + 0x40]"
        }, 
        {
          "address": "0x1400027be", 
          "code": "MOV RDX,qword ptr [RCX]"
        }, 
        {
          "address": "0x1400027c1", 
          "code": "LEA RAX,[RDX + 0x1]"
        }, 
        {
          "address": "0x1400027c5", 
          "code": "MOV qword ptr [RCX],RAX"
        }, 
        {
          "address": "0x1400027c8", 
          "code": "MOV EAX,R15D"
        }, 
        {
          "address": "0x1400027cb", 
          "code": "MOV byte ptr [RDX],R15B"
        }, 
        {
          "address": "0x1400027ce", 
          "code": "JMP 0x1400027dc"
        }, 
        {
          "address": "0x1400027d0", 
          "code": "CALL qword ptr [0x1400052b8]"
        }, 
        {
          "address": "0x1400027d7", 
          "code": "MOV EAX,0xffffffff"
        }, 
        {
          "address": "0x1400027dc", 
          "code": "MOV RBX,qword ptr [RSP + 0x48]"
        }, 
        {
          "address": "0x1400027e1", 
          "code": "MOV RBP,qword ptr [RSP + 0x50]"
        }, 
        {
          "address": "0x1400027e6", 
          "code": "MOV RSI,qword ptr [RSP + 0x58]"
        }, 
        {
          "address": "0x1400027eb", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x1400027ef", 
          "code": "POP R15"
        }, 
        {
          "address": "0x1400027f1", 
          "code": "POP R14"
        }, 
        {
          "address": "0x1400027f3", 
          "code": "POP RDI"
        }, 
        {
          "address": "0x1400027f4", 
          "code": "RET"
        }, 
        {
          "address": "0x1400027f5", 
          "code": "CALL 0x1400015f0"
        }, 
        {
          "address": "0x1400027fa", 
          "code": "INT3"
        }
      ], 
      "c_code": "\nulonglong FUN_140002600(longlong param_1,uint param_2)\n\n{\n  int iVar1;\n  undefined1 *puVar2;\n  undefined8 uVar3;\n  code *pcVar4;\n  void *pvVar5;\n  ulonglong uVar6;\n  longlong lVar7;\n  ulonglong uVar8;\n  void *_Src;\n  ulonglong uVar9;\n  void *pvVar10;\n  \n  if ((*(byte *)(param_1 + 0x70) & 2) != 0) {\n    return 0xffffffff;\n  }\n  if (param_2 == 0xffffffff) {\n    return 0;\n  }\n  uVar8 = **(ulonglong **)(param_1 + 0x40);\n  iVar1 = **(int **)(param_1 + 0x58);\n  uVar9 = uVar8 + (longlong)iVar1;\n  if (uVar8 == 0) {\n    uVar9 = 0;\n    _Src = (void *)**(longlong **)(param_1 + 0x18);\nLAB_1400026f3:\n    uVar8 = 0x20;\nLAB_1400026f8:\n    pvVar10 = operator_new(uVar8);\n  }\n  else {\n    if (uVar8 < uVar9) {\n      **(int **)(param_1 + 0x58) = iVar1 + -1;\n      puVar2 = (undefined1 *)**(longlong **)(param_1 + 0x40);\n      **(longlong **)(param_1 + 0x40) = (longlong)(puVar2 + 1);\n      *puVar2 = (char)param_2;\n      *(ulonglong *)(param_1 + 0x68) = uVar8 + 1;\n      return (ulonglong)param_2;\n    }\n    _Src = (void *)**(longlong **)(param_1 + 0x18);\n    uVar9 = uVar9 - (longlong)_Src;\n    if (uVar9 < 0x20) goto LAB_1400026f3;\n    if (uVar9 < 0x3fffffff) {\n      uVar8 = uVar9 * 2;\n      if (0xfff < uVar8) {\n        uVar6 = uVar8 + 0x27;\n        if (uVar6 <= uVar8) {\n          FUN_1400015f0();\n          pcVar4 = (code *)swi(3);\n          uVar9 = (*pcVar4)();\n          return uVar9;\n        }\n        goto LAB_1400026cd;\n      }\n      if (uVar8 == 0) {\n        pvVar10 = (void *)0x0;\n        goto LAB_140002704;\n      }\n      goto LAB_1400026f8;\n    }\n    uVar8 = 0x7fffffff;\n    if (0x7ffffffe < uVar9) {\n      return 0xffffffff;\n    }\n    uVar6 = 0x80000026;\nLAB_1400026cd:\n    pvVar5 = operator_new(uVar6);\n    if (pvVar5 == (void *)0x0) goto LAB_1400027d0;\n    pvVar10 = (void *)((longlong)pvVar5 + 0x27U & 0xffffffffffffffe0);\n    *(void **)((longlong)pvVar10 - 8) = pvVar5;\n  }\nLAB_140002704:\n  memcpy(pvVar10,_Src,uVar9);\n  lVar7 = (longlong)pvVar10 + uVar9;\n  *(longlong *)(param_1 + 0x68) = lVar7 + 1;\n  **(undefined8 **)(param_1 + 0x20) = pvVar10;\n  **(longlong **)(param_1 + 0x40) = lVar7;\n  **(int **)(param_1 + 0x58) = ((int)uVar8 - (int)lVar7) + (int)pvVar10;\n  if ((*(byte *)(param_1 + 0x70) & 4) == 0) {\n    uVar3 = *(undefined8 *)(param_1 + 0x68);\n    lVar7 = (**(longlong **)(param_1 + 0x38) - (longlong)_Src) + (longlong)pvVar10;\n    **(undefined8 **)(param_1 + 0x18) = pvVar10;\n    **(longlong **)(param_1 + 0x38) = lVar7;\n    **(int **)(param_1 + 0x50) = (int)uVar3 - (int)lVar7;\n  }\n  else {\n    **(undefined8 **)(param_1 + 0x18) = pvVar10;\n    **(undefined8 **)(param_1 + 0x38) = pvVar10;\n    **(undefined4 **)(param_1 + 0x50) = 0;\n  }\n  if ((*(byte *)(param_1 + 0x70) & 1) != 0) {\n    pvVar10 = _Src;\n    if ((0xfff < uVar9) &&\n       (pvVar10 = *(void **)((longlong)_Src + -8),\n       0x1f < (ulonglong)((longlong)_Src + (-8 - (longlong)pvVar10)))) {\nLAB_1400027d0:\n                    /* WARNING: Subroutine does not return */\n      _invalid_parameter_noinfo_noreturn();\n    }\n    operator_delete(pvVar10);\n  }\n  *(uint *)(param_1 + 0x70) = *(uint *)(param_1 + 0x70) | 1;\n  **(int **)(param_1 + 0x58) = **(int **)(param_1 + 0x58) + -1;\n  puVar2 = (undefined1 *)**(longlong **)(param_1 + 0x40);\n  **(longlong **)(param_1 + 0x40) = (longlong)(puVar2 + 1);\n  *puVar2 = (char)param_2;\n  return (ulonglong)param_2;\n}\n\n", 
      "name": "FUN_140002600", 
      "entry_point": "0x140002600"
    }, 
    {
      "signature": "undefined __fastcall FUN_140002800(basic_streambuf<char,struct_std::char_traits<char>_> * param_1)", 
      "disassembly": [
        {
          "address": "0x140002800", 
          "code": "PUSH RBX"
        }, 
        {
          "address": "0x140002802", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x140002806", 
          "code": "TEST byte ptr [RCX + 0x70],0x1"
        }, 
        {
          "address": "0x14000280a", 
          "code": "LEA RAX,[0x140005f88]"
        }, 
        {
          "address": "0x140002811", 
          "code": "MOV qword ptr [RCX],RAX"
        }, 
        {
          "address": "0x140002814", 
          "code": "MOV RBX,RCX"
        }, 
        {
          "address": "0x140002817", 
          "code": "JZ 0x14000286f"
        }, 
        {
          "address": "0x140002819", 
          "code": "MOV RAX,qword ptr [RCX + 0x40]"
        }, 
        {
          "address": "0x14000281d", 
          "code": "MOV RCX,qword ptr [RAX]"
        }, 
        {
          "address": "0x140002820", 
          "code": "TEST RCX,RCX"
        }, 
        {
          "address": "0x140002823", 
          "code": "JZ 0x140002831"
        }, 
        {
          "address": "0x140002825", 
          "code": "MOV RAX,qword ptr [RBX + 0x58]"
        }, 
        {
          "address": "0x140002829", 
          "code": "MOVSXD RDX,dword ptr [RAX]"
        }, 
        {
          "address": "0x14000282c", 
          "code": "ADD RDX,RCX"
        }, 
        {
          "address": "0x14000282f", 
          "code": "JMP 0x14000283f"
        }, 
        {
          "address": "0x140002831", 
          "code": "MOV RAX,qword ptr [RBX + 0x50]"
        }, 
        {
          "address": "0x140002835", 
          "code": "MOVSXD RDX,dword ptr [RAX]"
        }, 
        {
          "address": "0x140002838", 
          "code": "MOV RAX,qword ptr [RBX + 0x38]"
        }, 
        {
          "address": "0x14000283c", 
          "code": "ADD RDX,qword ptr [RAX]"
        }, 
        {
          "address": "0x14000283f", 
          "code": "MOV RAX,qword ptr [RBX + 0x18]"
        }, 
        {
          "address": "0x140002843", 
          "code": "MOV RCX,qword ptr [RAX]"
        }, 
        {
          "address": "0x140002846", 
          "code": "SUB RDX,RCX"
        }, 
        {
          "address": "0x140002849", 
          "code": "CMP RDX,0x1000"
        }, 
        {
          "address": "0x140002850", 
          "code": "JC 0x14000286a"
        }, 
        {
          "address": "0x140002852", 
          "code": "MOV R8,qword ptr [RCX + -0x8]"
        }, 
        {
          "address": "0x140002856", 
          "code": "ADD RDX,0x27"
        }, 
        {
          "address": "0x14000285a", 
          "code": "SUB RCX,R8"
        }, 
        {
          "address": "0x14000285d", 
          "code": "LEA RAX,[RCX + -0x8]"
        }, 
        {
          "address": "0x140002861", 
          "code": "CMP RAX,0x1f"
        }, 
        {
          "address": "0x140002865", 
          "code": "JA 0x1400028b0"
        }, 
        {
          "address": "0x140002867", 
          "code": "MOV RCX,R8"
        }, 
        {
          "address": "0x14000286a", 
          "code": "CALL 0x1400037dc"
        }, 
        {
          "address": "0x14000286f", 
          "code": "MOV RAX,qword ptr [RBX + 0x18]"
        }, 
        {
          "address": "0x140002873", 
          "code": "XOR ECX,ECX"
        }, 
        {
          "address": "0x140002875", 
          "code": "MOV qword ptr [RAX],RCX"
        }, 
        {
          "address": "0x140002878", 
          "code": "MOV RAX,qword ptr [RBX + 0x38]"
        }, 
        {
          "address": "0x14000287c", 
          "code": "MOV qword ptr [RAX],RCX"
        }, 
        {
          "address": "0x14000287f", 
          "code": "MOV RAX,qword ptr [RBX + 0x50]"
        }, 
        {
          "address": "0x140002883", 
          "code": "MOV dword ptr [RAX],ECX"
        }, 
        {
          "address": "0x140002885", 
          "code": "MOV RAX,qword ptr [RBX + 0x20]"
        }, 
        {
          "address": "0x140002889", 
          "code": "MOV qword ptr [RAX],RCX"
        }, 
        {
          "address": "0x14000288c", 
          "code": "MOV RAX,qword ptr [RBX + 0x40]"
        }, 
        {
          "address": "0x140002890", 
          "code": "MOV qword ptr [RAX],RCX"
        }, 
        {
          "address": "0x140002893", 
          "code": "MOV RAX,qword ptr [RBX + 0x58]"
        }, 
        {
          "address": "0x140002897", 
          "code": "MOV dword ptr [RAX],ECX"
        }, 
        {
          "address": "0x140002899", 
          "code": "AND dword ptr [RBX + 0x70],0xfffffffe"
        }, 
        {
          "address": "0x14000289d", 
          "code": "MOV qword ptr [RBX + 0x68],RCX"
        }, 
        {
          "address": "0x1400028a1", 
          "code": "MOV RCX,RBX"
        }, 
        {
          "address": "0x1400028a4", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x1400028a8", 
          "code": "POP RBX"
        }, 
        {
          "address": "0x1400028a9", 
          "code": "JMP qword ptr [0x140005158]"
        }, 
        {
          "address": "0x1400028b0", 
          "code": "CALL qword ptr [0x1400052b8]"
        }
      ], 
      "c_code": "\nvoid FUN_140002800(basic_streambuf<char,struct_std::char_traits<char>_> *param_1)\n\n{\n  void *pvVar1;\n  void *pvVar2;\n  longlong lVar3;\n  \n  *(undefined ***)param_1 =\n       std::basic_stringbuf<char,struct_std::char_traits<char>,class_std::allocator<char>_>::vftable\n  ;\n  if (((byte)param_1[0x70] & 1) != 0) {\n    if (**(longlong **)(param_1 + 0x40) == 0) {\n      lVar3 = (longlong)**(int **)(param_1 + 0x50) + **(longlong **)(param_1 + 0x38);\n    }\n    else {\n      lVar3 = (longlong)**(int **)(param_1 + 0x58) + **(longlong **)(param_1 + 0x40);\n    }\n    pvVar1 = (void *)**(longlong **)(param_1 + 0x18);\n    pvVar2 = pvVar1;\n    if ((0xfff < (ulonglong)(lVar3 - (longlong)pvVar1)) &&\n       (pvVar2 = *(void **)((longlong)pvVar1 + -8),\n       0x1f < (ulonglong)((longlong)pvVar1 + (-8 - (longlong)pvVar2)))) {\n                    /* WARNING: Subroutine does not return */\n      _invalid_parameter_noinfo_noreturn();\n    }\n    operator_delete(pvVar2);\n  }\n  **(undefined8 **)(param_1 + 0x18) = 0;\n  **(undefined8 **)(param_1 + 0x38) = 0;\n  **(undefined4 **)(param_1 + 0x50) = 0;\n  **(undefined8 **)(param_1 + 0x20) = 0;\n  **(undefined8 **)(param_1 + 0x40) = 0;\n  **(undefined4 **)(param_1 + 0x58) = 0;\n  *(uint *)(param_1 + 0x70) = *(uint *)(param_1 + 0x70) & 0xfffffffe;\n  *(undefined8 *)(param_1 + 0x68) = 0;\n                    /* WARNING: Could not recover jumptable at 0x0001400028a9. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  std::basic_streambuf<char,struct_std::char_traits<char>_>::\n  ~basic_streambuf<char,struct_std::char_traits<char>_>(param_1);\n  return;\n}\n\n", 
      "name": "FUN_140002800", 
      "entry_point": "0x140002800"
    }, 
    {
      "signature": "undefined __fastcall FUN_1400028e0(longlong * param_1)", 
      "disassembly": [
        {
          "address": "0x1400028e0", 
          "code": "PUSH RBX"
        }, 
        {
          "address": "0x1400028e2", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x1400028e6", 
          "code": "MOV RDX,qword ptr [RCX + 0x18]"
        }, 
        {
          "address": "0x1400028ea", 
          "code": "MOV RBX,RCX"
        }, 
        {
          "address": "0x1400028ed", 
          "code": "CMP RDX,0xf"
        }, 
        {
          "address": "0x1400028f1", 
          "code": "JBE 0x14000291f"
        }, 
        {
          "address": "0x1400028f3", 
          "code": "MOV RCX,qword ptr [RCX]"
        }, 
        {
          "address": "0x1400028f6", 
          "code": "INC RDX"
        }, 
        {
          "address": "0x1400028f9", 
          "code": "CMP RDX,0x1000"
        }, 
        {
          "address": "0x140002900", 
          "code": "JC 0x14000291a"
        }, 
        {
          "address": "0x140002902", 
          "code": "MOV R8,qword ptr [RCX + -0x8]"
        }, 
        {
          "address": "0x140002906", 
          "code": "ADD RDX,0x27"
        }, 
        {
          "address": "0x14000290a", 
          "code": "SUB RCX,R8"
        }, 
        {
          "address": "0x14000290d", 
          "code": "LEA RAX,[RCX + -0x8]"
        }, 
        {
          "address": "0x140002911", 
          "code": "CMP RAX,0x1f"
        }, 
        {
          "address": "0x140002915", 
          "code": "JA 0x140002938"
        }, 
        {
          "address": "0x140002917", 
          "code": "MOV RCX,R8"
        }, 
        {
          "address": "0x14000291a", 
          "code": "CALL 0x1400037dc"
        }, 
        {
          "address": "0x14000291f", 
          "code": "MOV qword ptr [RBX + 0x10],0x0"
        }, 
        {
          "address": "0x140002927", 
          "code": "MOV qword ptr [RBX + 0x18],0xf"
        }, 
        {
          "address": "0x14000292f", 
          "code": "MOV byte ptr [RBX],0x0"
        }, 
        {
          "address": "0x140002932", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x140002936", 
          "code": "POP RBX"
        }, 
        {
          "address": "0x140002937", 
          "code": "RET"
        }, 
        {
          "address": "0x140002938", 
          "code": "CALL qword ptr [0x1400052b8]"
        }
      ], 
      "c_code": "\nvoid FUN_1400028e0(longlong *param_1)\n\n{\n  void *pvVar1;\n  void *pvVar2;\n  \n  if (0xf < (ulonglong)param_1[3]) {\n    pvVar1 = (void *)*param_1;\n    pvVar2 = pvVar1;\n    if ((0xfff < param_1[3] + 1U) &&\n       (pvVar2 = *(void **)((longlong)pvVar1 + -8),\n       0x1f < (ulonglong)((longlong)pvVar1 + (-8 - (longlong)pvVar2)))) {\n                    /* WARNING: Subroutine does not return */\n      _invalid_parameter_noinfo_noreturn();\n    }\n    operator_delete(pvVar2);\n  }\n  param_1[2] = 0;\n  param_1[3] = 0xf;\n  *(undefined1 *)param_1 = 0;\n  return;\n}\n\n", 
      "name": "FUN_1400028e0", 
      "entry_point": "0x1400028e0"
    }, 
    {
      "signature": "undefined8 * __fastcall FUN_140002940(undefined8 * param_1, void * param_2)", 
      "disassembly": [
        {
          "address": "0x140002940", 
          "code": "MOV qword ptr [RSP + 0x18],RBX"
        }, 
        {
          "address": "0x140002945", 
          "code": "MOV qword ptr [RSP + 0x20],RBP"
        }, 
        {
          "address": "0x14000294a", 
          "code": "PUSH RSI"
        }, 
        {
          "address": "0x14000294b", 
          "code": "PUSH RDI"
        }, 
        {
          "address": "0x14000294c", 
          "code": "PUSH R14"
        }, 
        {
          "address": "0x14000294e", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x140002952", 
          "code": "XOR R14D,R14D"
        }, 
        {
          "address": "0x140002955", 
          "code": "XORPS XMM0,XMM0"
        }, 
        {
          "address": "0x140002958", 
          "code": "MOVUPS xmmword ptr [RCX],XMM0"
        }, 
        {
          "address": "0x14000295b", 
          "code": "MOV qword ptr [RCX + 0x10],R14"
        }, 
        {
          "address": "0x14000295f", 
          "code": "MOV RBP,RDX"
        }, 
        {
          "address": "0x140002962", 
          "code": "MOV qword ptr [RCX + 0x18],R14"
        }, 
        {
          "address": "0x140002966", 
          "code": "MOV RDI,RCX"
        }, 
        {
          "address": "0x140002969", 
          "code": "MOV RBX,-0x1"
        }, 
        {
          "address": "0x140002970", 
          "code": "INC RBX"
        }, 
        {
          "address": "0x140002973", 
          "code": "CMP byte ptr [RBX + RDX*0x1],R14B"
        }, 
        {
          "address": "0x140002977", 
          "code": "JNZ 0x140002970"
        }, 
        {
          "address": "0x140002979", 
          "code": "MOV RSI,0x7fffffffffffffff"
        }, 
        {
          "address": "0x140002983", 
          "code": "CMP RBX,RSI"
        }, 
        {
          "address": "0x140002986", 
          "code": "JA 0x140002a55"
        }, 
        {
          "address": "0x14000298c", 
          "code": "MOV qword ptr [RCX + 0x18],0xf"
        }, 
        {
          "address": "0x140002994", 
          "code": "CMP RBX,0xf"
        }, 
        {
          "address": "0x140002998", 
          "code": "JA 0x1400029af"
        }, 
        {
          "address": "0x14000299a", 
          "code": "MOV R8,RBX"
        }, 
        {
          "address": "0x14000299d", 
          "code": "MOV qword ptr [RCX + 0x10],RBX"
        }, 
        {
          "address": "0x1400029a1", 
          "code": "CALL 0x1400041ff"
        }, 
        {
          "address": "0x1400029a6", 
          "code": "MOV byte ptr [RDI + RBX*0x1],R14B"
        }, 
        {
          "address": "0x1400029aa", 
          "code": "JMP 0x140002a3f"
        }, 
        {
          "address": "0x1400029af", 
          "code": "MOV RAX,RBX"
        }, 
        {
          "address": "0x1400029b2", 
          "code": "OR RAX,0xf"
        }, 
        {
          "address": "0x1400029b6", 
          "code": "CMP RAX,RSI"
        }, 
        {
          "address": "0x1400029b9", 
          "code": "JBE 0x1400029e5"
        }, 
        {
          "address": "0x1400029bb", 
          "code": "MOV RAX,-0x8000000000000000"
        }, 
        {
          "address": "0x1400029c5", 
          "code": "ADD RAX,0x27"
        }, 
        {
          "address": "0x1400029c9", 
          "code": "MOV RCX,RAX"
        }, 
        {
          "address": "0x1400029cc", 
          "code": "CALL qword ptr [0x140005720]"
        }, 
        {
          "address": "0x1400029d2", 
          "code": "TEST RAX,RAX"
        }, 
        {
          "address": "0x1400029d5", 
          "code": "JZ 0x140002a0c"
        }, 
        {
          "address": "0x1400029d7", 
          "code": "LEA R14,[RAX + 0x27]"
        }, 
        {
          "address": "0x1400029db", 
          "code": "AND R14,-0x20"
        }, 
        {
          "address": "0x1400029df", 
          "code": "MOV qword ptr [R14 + -0x8],RAX"
        }, 
        {
          "address": "0x1400029e3", 
          "code": "JMP 0x140002a21"
        }, 
        {
          "address": "0x1400029e5", 
          "code": "MOV ECX,0x16"
        }, 
        {
          "address": "0x1400029ea", 
          "code": "MOV RSI,RAX"
        }, 
        {
          "address": "0x1400029ed", 
          "code": "CMP RAX,RCX"
        }, 
        {
          "address": "0x1400029f0", 
          "code": "CMOVC RSI,RCX"
        }, 
        {
          "address": "0x1400029f4", 
          "code": "LEA RCX,[RSI + 0x1]"
        }, 
        {
          "address": "0x1400029f8", 
          "code": "CMP RCX,0x1000"
        }, 
        {
          "address": "0x1400029ff", 
          "code": "JC 0x140002a13"
        }, 
        {
          "address": "0x140002a01", 
          "code": "LEA RAX,[RCX + 0x27]"
        }, 
        {
          "address": "0x140002a05", 
          "code": "CMP RAX,RCX"
        }, 
        {
          "address": "0x140002a08", 
          "code": "JBE 0x140002a5b"
        }, 
        {
          "address": "0x140002a0a", 
          "code": "JMP 0x1400029c9"
        }, 
        {
          "address": "0x140002a0c", 
          "code": "CALL qword ptr [0x1400052b8]"
        }, 
        {
          "address": "0x140002a13", 
          "code": "TEST RCX,RCX"
        }, 
        {
          "address": "0x140002a16", 
          "code": "JZ 0x140002a21"
        }, 
        {
          "address": "0x140002a18", 
          "code": "CALL qword ptr [0x140005720]"
        }, 
        {
          "address": "0x140002a1e", 
          "code": "MOV R14,RAX"
        }, 
        {
          "address": "0x140002a21", 
          "code": "MOV R8,RBX"
        }, 
        {
          "address": "0x140002a24", 
          "code": "MOV qword ptr [RDI],R14"
        }, 
        {
          "address": "0x140002a27", 
          "code": "MOV RDX,RBP"
        }, 
        {
          "address": "0x140002a2a", 
          "code": "MOV qword ptr [RDI + 0x10],RBX"
        }, 
        {
          "address": "0x140002a2e", 
          "code": "MOV RCX,R14"
        }, 
        {
          "address": "0x140002a31", 
          "code": "MOV qword ptr [RDI + 0x18],RSI"
        }, 
        {
          "address": "0x140002a35", 
          "code": "CALL 0x1400041ff"
        }, 
        {
          "address": "0x140002a3a", 
          "code": "MOV byte ptr [R14 + RBX*0x1],0x0"
        }, 
        {
          "address": "0x140002a3f", 
          "code": "MOV RBX,qword ptr [RSP + 0x50]"
        }, 
        {
          "address": "0x140002a44", 
          "code": "MOV RAX,RDI"
        }, 
        {
          "address": "0x140002a47", 
          "code": "MOV RBP,qword ptr [RSP + 0x58]"
        }, 
        {
          "address": "0x140002a4c", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x140002a50", 
          "code": "POP R14"
        }, 
        {
          "address": "0x140002a52", 
          "code": "POP RDI"
        }, 
        {
          "address": "0x140002a53", 
          "code": "POP RSI"
        }, 
        {
          "address": "0x140002a54", 
          "code": "RET"
        }, 
        {
          "address": "0x140002a55", 
          "code": "CALL 0x140001690"
        }, 
        {
          "address": "0x140002a5a", 
          "code": "INT3"
        }, 
        {
          "address": "0x140002a5b", 
          "code": "CALL 0x1400015f0"
        }, 
        {
          "address": "0x140002a60", 
          "code": "INT3"
        }
      ], 
      "c_code": "\nundefined8 * FUN_140002940(undefined8 *param_1,void *param_2)\n\n{\n  ulonglong uVar1;\n  code *pcVar2;\n  ulonglong uVar3;\n  ulonglong uVar4;\n  void *pvVar5;\n  undefined8 *puVar6;\n  ulonglong _Size;\n  void *_Dst;\n  \n  _Dst = (void *)0x0;\n  *param_1 = 0;\n  param_1[1] = 0;\n  param_1[2] = 0;\n  param_1[3] = 0;\n  _Size = 0xffffffffffffffff;\n  do {\n    _Size = _Size + 1;\n  } while (*(char *)(_Size + (longlong)param_2) != '\\0');\n  if (0x7fffffffffffffff < _Size) {\n    FUN_140001690();\n    pcVar2 = (code *)swi(3);\n    puVar6 = (undefined8 *)(*pcVar2)();\n    return puVar6;\n  }\n  param_1[3] = 0xf;\n  if (_Size < 0x10) {\n    param_1[2] = _Size;\n    memcpy(param_1,param_2,_Size);\n    *(undefined1 *)((longlong)param_1 + _Size) = 0;\n    return param_1;\n  }\n  uVar3 = _Size | 0xf;\n  if (uVar3 < 0x8000000000000000) {\n    if (uVar3 < 0x16) {\n      uVar3 = 0x16;\n    }\n    uVar1 = uVar3 + 1;\n    if (uVar1 < 0x1000) {\n      if (uVar1 != 0) {\n        _Dst = operator_new(uVar1);\n      }\n      goto LAB_140002a21;\n    }\n    uVar4 = uVar3 + 0x28;\n    if (uVar4 <= uVar1) {\n      FUN_1400015f0();\n      pcVar2 = (code *)swi(3);\n      puVar6 = (undefined8 *)(*pcVar2)();\n      return puVar6;\n    }\n  }\n  else {\n    uVar4 = 0x8000000000000027;\n    uVar3 = 0x7fffffffffffffff;\n  }\n  pvVar5 = operator_new(uVar4);\n  if (pvVar5 == (void *)0x0) {\n                    /* WARNING: Subroutine does not return */\n    _invalid_parameter_noinfo_noreturn();\n  }\n  _Dst = (void *)((longlong)pvVar5 + 0x27U & 0xffffffffffffffe0);\n  *(void **)((longlong)_Dst - 8) = pvVar5;\nLAB_140002a21:\n  *param_1 = _Dst;\n  param_1[2] = _Size;\n  param_1[3] = uVar3;\n  memcpy(_Dst,param_2,_Size);\n  *(undefined1 *)((longlong)_Dst + _Size) = 0;\n  return param_1;\n}\n\n", 
      "name": "FUN_140002940", 
      "entry_point": "0x140002940"
    }, 
    {
      "signature": "basic_streambuf<char,struct_std::char_traits<char>_> * __fastcall FUN_140002a70(basic_streambuf<char,struct_std::char_traits<char>_> * param_1, uint param_2)", 
      "disassembly": [
        {
          "address": "0x140002a70", 
          "code": "MOV qword ptr [RSP + 0x8],RBX"
        }, 
        {
          "address": "0x140002a75", 
          "code": "PUSH RDI"
        }, 
        {
          "address": "0x140002a76", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x140002a7a", 
          "code": "MOV EBX,EDX"
        }, 
        {
          "address": "0x140002a7c", 
          "code": "MOV RDI,RCX"
        }, 
        {
          "address": "0x140002a7f", 
          "code": "CALL 0x140002800"
        }, 
        {
          "address": "0x140002a84", 
          "code": "TEST BL,0x1"
        }, 
        {
          "address": "0x140002a87", 
          "code": "JZ 0x140002a96"
        }, 
        {
          "address": "0x140002a89", 
          "code": "MOV EDX,0x78"
        }, 
        {
          "address": "0x140002a8e", 
          "code": "MOV RCX,RDI"
        }, 
        {
          "address": "0x140002a91", 
          "code": "CALL 0x1400037dc"
        }, 
        {
          "address": "0x140002a96", 
          "code": "MOV RBX,qword ptr [RSP + 0x30]"
        }, 
        {
          "address": "0x140002a9b", 
          "code": "MOV RAX,RDI"
        }, 
        {
          "address": "0x140002a9e", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x140002aa2", 
          "code": "POP RDI"
        }, 
        {
          "address": "0x140002aa3", 
          "code": "RET"
        }
      ], 
      "c_code": "\nbasic_streambuf<char,struct_std::char_traits<char>_> *\nFUN_140002a70(basic_streambuf<char,struct_std::char_traits<char>_> *param_1,uint param_2)\n\n{\n  FUN_140002800(param_1);\n  if ((param_2 & 1) != 0) {\n    operator_delete(param_1);\n  }\n  return param_1;\n}\n\n", 
      "name": "FUN_140002a70", 
      "entry_point": "0x140002a70"
    }, 
    {
      "signature": "basic_ios<char,struct_std::char_traits<char>_> * __fastcall FUN_140002ab0(basic_ios<char,struct_std::char_traits<char>_> * param_1, uint param_2)", 
      "disassembly": [
        {
          "address": "0x140002ab0", 
          "code": "MOV qword ptr [RSP + 0x8],RBX"
        }, 
        {
          "address": "0x140002ab5", 
          "code": "MOV qword ptr [RSP + 0x10],RSI"
        }, 
        {
          "address": "0x140002aba", 
          "code": "PUSH RDI"
        }, 
        {
          "address": "0x140002abb", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x140002abf", 
          "code": "MOV RAX,qword ptr [RCX + -0x98]"
        }, 
        {
          "address": "0x140002ac6", 
          "code": "MOV RBX,RCX"
        }, 
        {
          "address": "0x140002ac9", 
          "code": "MOV EDI,EDX"
        }, 
        {
          "address": "0x140002acb", 
          "code": "MOVSXD R8,dword ptr [RAX + 0x4]"
        }, 
        {
          "address": "0x140002acf", 
          "code": "LEA RAX,[0x140005f78]"
        }, 
        {
          "address": "0x140002ad6", 
          "code": "MOV qword ptr [R8 + RCX*0x1 + -0x98],RAX"
        }, 
        {
          "address": "0x140002ade", 
          "code": "MOV RAX,qword ptr [RCX + -0x98]"
        }, 
        {
          "address": "0x140002ae5", 
          "code": "MOVSXD R8,dword ptr [RAX + 0x4]"
        }, 
        {
          "address": "0x140002ae9", 
          "code": "LEA R9D,[R8 + -0x98]"
        }, 
        {
          "address": "0x140002af0", 
          "code": "MOV dword ptr [R8 + RCX*0x1 + -0x9c],R9D"
        }, 
        {
          "address": "0x140002af8", 
          "code": "ADD RCX,-0x80"
        }, 
        {
          "address": "0x140002afc", 
          "code": "CALL 0x140002800"
        }, 
        {
          "address": "0x140002b01", 
          "code": "LEA RCX,[RBX + -0x78]"
        }, 
        {
          "address": "0x140002b05", 
          "code": "CALL qword ptr [0x140005110]"
        }, 
        {
          "address": "0x140002b0b", 
          "code": "MOV RCX,RBX"
        }, 
        {
          "address": "0x140002b0e", 
          "code": "CALL qword ptr [0x140005128]"
        }, 
        {
          "address": "0x140002b14", 
          "code": "TEST DIL,0x1"
        }, 
        {
          "address": "0x140002b18", 
          "code": "JZ 0x140002b2b"
        }, 
        {
          "address": "0x140002b1a", 
          "code": "MOV EDX,0xf8"
        }, 
        {
          "address": "0x140002b1f", 
          "code": "LEA RCX,[RBX + -0x98]"
        }, 
        {
          "address": "0x140002b26", 
          "code": "CALL 0x1400037dc"
        }, 
        {
          "address": "0x140002b2b", 
          "code": "MOV RSI,qword ptr [RSP + 0x38]"
        }, 
        {
          "address": "0x140002b30", 
          "code": "LEA RAX,[RBX + -0x98]"
        }, 
        {
          "address": "0x140002b37", 
          "code": "MOV RBX,qword ptr [RSP + 0x30]"
        }, 
        {
          "address": "0x140002b3c", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x140002b40", 
          "code": "POP RDI"
        }, 
        {
          "address": "0x140002b41", 
          "code": "RET"
        }
      ], 
      "c_code": "\nbasic_ios<char,struct_std::char_traits<char>_> *\nFUN_140002ab0(basic_ios<char,struct_std::char_traits<char>_> *param_1,uint param_2)\n\n{\n  *(undefined ***)(param_1 + (longlong)*(int *)(*(longlong *)(param_1 + -0x98) + 4) + -0x98) =\n       std::basic_stringstream<char,struct_std::char_traits<char>,class_std::allocator<char>_>::\n       vftable;\n  *(int *)(param_1 + (longlong)*(int *)(*(longlong *)(param_1 + -0x98) + 4) + -0x9c) =\n       *(int *)(*(longlong *)(param_1 + -0x98) + 4) + -0x98;\n  FUN_140002800((basic_streambuf<char,struct_std::char_traits<char>_> *)(param_1 + -0x80));\n  std::basic_iostream<char,struct_std::char_traits<char>_>::\n  ~basic_iostream<char,struct_std::char_traits<char>_>\n            ((basic_iostream<char,struct_std::char_traits<char>_> *)(param_1 + -0x78));\n  std::basic_ios<char,struct_std::char_traits<char>_>::\n  ~basic_ios<char,struct_std::char_traits<char>_>(param_1);\n  if ((param_2 & 1) != 0) {\n    operator_delete(param_1 + -0x98);\n  }\n  return param_1 + -0x98;\n}\n\n", 
      "name": "FUN_140002ab0", 
      "entry_point": "0x140002ab0"
    }, 
    {
      "signature": "undefined __fastcall FUN_140002b50(undefined8 * param_1, LPCWSTR param_2, UINT param_3)", 
      "disassembly": [
        {
          "address": "0x140002b50", 
          "code": "PUSH RSI"
        }, 
        {
          "address": "0x140002b52", 
          "code": "PUSH RDI"
        }, 
        {
          "address": "0x140002b53", 
          "code": "PUSH R13"
        }, 
        {
          "address": "0x140002b55", 
          "code": "PUSH R14"
        }, 
        {
          "address": "0x140002b57", 
          "code": "SUB RSP,0x48"
        }, 
        {
          "address": "0x140002b5b", 
          "code": "MOV R13D,R8D"
        }, 
        {
          "address": "0x140002b5e", 
          "code": "MOV R14,RDX"
        }, 
        {
          "address": "0x140002b61", 
          "code": "MOV RDI,RCX"
        }, 
        {
          "address": "0x140002b64", 
          "code": "TEST RDX,RDX"
        }, 
        {
          "address": "0x140002b67", 
          "code": "JNZ 0x140002b79"
        }, 
        {
          "address": "0x140002b69", 
          "code": "XOR ESI,ESI"
        }, 
        {
          "address": "0x140002b6b", 
          "code": "MOV qword ptr [RCX],RSI"
        }, 
        {
          "address": "0x140002b6e", 
          "code": "ADD RSP,0x48"
        }, 
        {
          "address": "0x140002b72", 
          "code": "POP R14"
        }, 
        {
          "address": "0x140002b74", 
          "code": "POP R13"
        }, 
        {
          "address": "0x140002b76", 
          "code": "POP RDI"
        }, 
        {
          "address": "0x140002b77", 
          "code": "POP RSI"
        }, 
        {
          "address": "0x140002b78", 
          "code": "RET"
        }, 
        {
          "address": "0x140002b79", 
          "code": "MOV qword ptr [RSP + 0x70],RBX"
        }, 
        {
          "address": "0x140002b7e", 
          "code": "MOV RBX,-0x1"
        }, 
        {
          "address": "0x140002b85", 
          "code": "MOV qword ptr [RSP + 0x78],RBP"
        }, 
        {
          "address": "0x140002b8a", 
          "code": "MOV qword ptr [RSP + 0x40],R15"
        }, 
        {
          "address": "0x140002b8f", 
          "code": "NOP"
        }, 
        {
          "address": "0x140002b90", 
          "code": "INC RBX"
        }, 
        {
          "address": "0x140002b93", 
          "code": "CMP word ptr [RDX + RBX*0x2],0x0"
        }, 
        {
          "address": "0x140002b98", 
          "code": "JNZ 0x140002b90"
        }, 
        {
          "address": "0x140002b9a", 
          "code": "INC EBX"
        }, 
        {
          "address": "0x140002b9c", 
          "code": "LEA RBP,[RCX + 0x8]"
        }, 
        {
          "address": "0x140002ba0", 
          "code": "LEA R15D,[RBX*0x4]"
        }, 
        {
          "address": "0x140002ba8", 
          "code": "TEST RDI,RDI"
        }, 
        {
          "address": "0x140002bab", 
          "code": "JZ 0x140002d9e"
        }, 
        {
          "address": "0x140002bb1", 
          "code": "TEST R15D,R15D"
        }, 
        {
          "address": "0x140002bb4", 
          "code": "JS 0x140002d9e"
        }, 
        {
          "address": "0x140002bba", 
          "code": "TEST RBP,RBP"
        }, 
        {
          "address": "0x140002bbd", 
          "code": "JZ 0x140002d9e"
        }, 
        {
          "address": "0x140002bc3", 
          "code": "MOV RCX,qword ptr [RCX]"
        }, 
        {
          "address": "0x140002bc6", 
          "code": "MOV qword ptr [RSP + 0x80],R12"
        }, 
        {
          "address": "0x140002bce", 
          "code": "CMP RCX,RBP"
        }, 
        {
          "address": "0x140002bd1", 
          "code": "JZ 0x140002c81"
        }, 
        {
          "address": "0x140002bd7", 
          "code": "CMP R15D,0x80"
        }, 
        {
          "address": "0x140002bde", 
          "code": "JLE 0x140002bfa"
        }, 
        {
          "address": "0x140002be0", 
          "code": "MOVSXD RDX,R15D"
        }, 
        {
          "address": "0x140002be3", 
          "code": "MOV R8D,0x1"
        }, 
        {
          "address": "0x140002be9", 
          "code": "CALL qword ptr [0x140005250]"
        }, 
        {
          "address": "0x140002bef", 
          "code": "TEST RAX,RAX"
        }, 
        {
          "address": "0x140002bf2", 
          "code": "JZ 0x140002d61"
        }, 
        {
          "address": "0x140002bf8", 
          "code": "JMP 0x140002c03"
        }, 
        {
          "address": "0x140002bfa", 
          "code": "CALL qword ptr [0x140005258]"
        }, 
        {
          "address": "0x140002c00", 
          "code": "MOV RAX,RBP"
        }, 
        {
          "address": "0x140002c03", 
          "code": "MOV qword ptr [RDI],RAX"
        }, 
        {
          "address": "0x140002c06", 
          "code": "MOV R12,RDI"
        }, 
        {
          "address": "0x140002c09", 
          "code": "XOR ESI,ESI"
        }, 
        {
          "address": "0x140002c0b", 
          "code": "MOV R9D,EBX"
        }, 
        {
          "address": "0x140002c0e", 
          "code": "MOV qword ptr [RSP + 0x38],RSI"
        }, 
        {
          "address": "0x140002c13", 
          "code": "MOV R8,R14"
        }, 
        {
          "address": "0x140002c16", 
          "code": "MOV qword ptr [RSP + 0x30],RSI"
        }, 
        {
          "address": "0x140002c1b", 
          "code": "XOR EDX,EDX"
        }, 
        {
          "address": "0x140002c1d", 
          "code": "MOV dword ptr [RSP + 0x28],R15D"
        }, 
        {
          "address": "0x140002c22", 
          "code": "MOV ECX,R13D"
        }, 
        {
          "address": "0x140002c25", 
          "code": "MOV qword ptr [RSP + 0x20],RAX"
        }, 
        {
          "address": "0x140002c2a", 
          "code": "CALL qword ptr [0x1400050c8]"
        }, 
        {
          "address": "0x140002c30", 
          "code": "TEST EAX,EAX"
        }, 
        {
          "address": "0x140002c32", 
          "code": "MOV R15D,ESI"
        }, 
        {
          "address": "0x140002c35", 
          "code": "SETZ R15B"
        }, 
        {
          "address": "0x140002c39", 
          "code": "TEST EAX,EAX"
        }, 
        {
          "address": "0x140002c3b", 
          "code": "JNZ 0x140002d16"
        }, 
        {
          "address": "0x140002c41", 
          "code": "CALL qword ptr [0x1400050d0]"
        }, 
        {
          "address": "0x140002c47", 
          "code": "CMP EAX,0x7a"
        }, 
        {
          "address": "0x140002c4a", 
          "code": "JNZ 0x140002d16"
        }, 
        {
          "address": "0x140002c50", 
          "code": "MOV qword ptr [RSP + 0x38],RSI"
        }, 
        {
          "address": "0x140002c55", 
          "code": "MOV R9D,EBX"
        }, 
        {
          "address": "0x140002c58", 
          "code": "MOV qword ptr [RSP + 0x30],RSI"
        }, 
        {
          "address": "0x140002c5d", 
          "code": "MOV R8,R14"
        }, 
        {
          "address": "0x140002c60", 
          "code": "MOV dword ptr [RSP + 0x28],ESI"
        }, 
        {
          "address": "0x140002c64", 
          "code": "XOR EDX,EDX"
        }, 
        {
          "address": "0x140002c66", 
          "code": "MOV ECX,R13D"
        }, 
        {
          "address": "0x140002c69", 
          "code": "MOV qword ptr [RSP + 0x20],RSI"
        }, 
        {
          "address": "0x140002c6e", 
          "code": "CALL qword ptr [0x1400050c8]"
        }, 
        {
          "address": "0x140002c74", 
          "code": "MOVSXD R15,EAX"
        }, 
        {
          "address": "0x140002c77", 
          "code": "TEST EAX,EAX"
        }, 
        {
          "address": "0x140002c79", 
          "code": "JS 0x140002d6c"
        }, 
        {
          "address": "0x140002c7f", 
          "code": "JMP 0x140002cb0"
        }, 
        {
          "address": "0x140002c81", 
          "code": "CMP R15D,0x80"
        }, 
        {
          "address": "0x140002c88", 
          "code": "JLE 0x140002c00"
        }, 
        {
          "address": "0x140002c8e", 
          "code": "MOVSXD RCX,R15D"
        }, 
        {
          "address": "0x140002c91", 
          "code": "MOV EDX,0x1"
        }, 
        {
          "address": "0x140002c96", 
          "code": "CALL qword ptr [0x140005260]"
        }, 
        {
          "address": "0x140002c9c", 
          "code": "MOV qword ptr [RDI],RAX"
        }, 
        {
          "address": "0x140002c9f", 
          "code": "MOV R12,RDI"
        }, 
        {
          "address": "0x140002ca2", 
          "code": "TEST RAX,RAX"
        }, 
        {
          "address": "0x140002ca5", 
          "code": "JZ 0x140002d77"
        }, 
        {
          "address": "0x140002cab", 
          "code": "JMP 0x140002c09"
        }, 
        {
          "address": "0x140002cb0", 
          "code": "MOV RCX,qword ptr [RDI]"
        }, 
        {
          "address": "0x140002cb3", 
          "code": "CMP RCX,RBP"
        }, 
        {
          "address": "0x140002cb6", 
          "code": "JZ 0x140002d1d"
        }, 
        {
          "address": "0x140002cb8", 
          "code": "CMP R15D,0x80"
        }, 
        {
          "address": "0x140002cbf", 
          "code": "JLE 0x140002cdb"
        }, 
        {
          "address": "0x140002cc1", 
          "code": "MOV RDX,R15"
        }, 
        {
          "address": "0x140002cc4", 
          "code": "MOV R8D,0x1"
        }, 
        {
          "address": "0x140002cca", 
          "code": "CALL qword ptr [0x140005250]"
        }, 
        {
          "address": "0x140002cd0", 
          "code": "TEST RAX,RAX"
        }, 
        {
          "address": "0x140002cd3", 
          "code": "JZ 0x140002d77"
        }, 
        {
          "address": "0x140002cd9", 
          "code": "JMP 0x140002ce4"
        }, 
        {
          "address": "0x140002cdb", 
          "code": "CALL qword ptr [0x140005258]"
        }, 
        {
          "address": "0x140002ce1", 
          "code": "MOV RAX,RBP"
        }, 
        {
          "address": "0x140002ce4", 
          "code": "MOV qword ptr [R12],RAX"
        }, 
        {
          "address": "0x140002ce8", 
          "code": "MOV qword ptr [RSP + 0x38],RSI"
        }, 
        {
          "address": "0x140002ced", 
          "code": "MOV R9D,EBX"
        }, 
        {
          "address": "0x140002cf0", 
          "code": "MOV qword ptr [RSP + 0x30],RSI"
        }, 
        {
          "address": "0x140002cf5", 
          "code": "MOV R8,R14"
        }, 
        {
          "address": "0x140002cf8", 
          "code": "MOV dword ptr [RSP + 0x28],R15D"
        }, 
        {
          "address": "0x140002cfd", 
          "code": "XOR EDX,EDX"
        }, 
        {
          "address": "0x140002cff", 
          "code": "MOV ECX,R13D"
        }, 
        {
          "address": "0x140002d02", 
          "code": "MOV qword ptr [RSP + 0x20],RAX"
        }, 
        {
          "address": "0x140002d07", 
          "code": "CALL qword ptr [0x1400050c8]"
        }, 
        {
          "address": "0x140002d0d", 
          "code": "TEST EAX,EAX"
        }, 
        {
          "address": "0x140002d0f", 
          "code": "MOV R15D,ESI"
        }, 
        {
          "address": "0x140002d12", 
          "code": "SETZ R15B"
        }, 
        {
          "address": "0x140002d16", 
          "code": "TEST R15D,R15D"
        }, 
        {
          "address": "0x140002d19", 
          "code": "JNZ 0x140002d82"
        }, 
        {
          "address": "0x140002d1b", 
          "code": "JMP 0x140002d3f"
        }, 
        {
          "address": "0x140002d1d", 
          "code": "CMP R15D,0x80"
        }, 
        {
          "address": "0x140002d24", 
          "code": "JLE 0x140002ce1"
        }, 
        {
          "address": "0x140002d26", 
          "code": "MOV RCX,R15"
        }, 
        {
          "address": "0x140002d29", 
          "code": "MOV EDX,0x1"
        }, 
        {
          "address": "0x140002d2e", 
          "code": "CALL qword ptr [0x140005260]"
        }, 
        {
          "address": "0x140002d34", 
          "code": "MOV qword ptr [R12],RAX"
        }, 
        {
          "address": "0x140002d38", 
          "code": "TEST RAX,RAX"
        }, 
        {
          "address": "0x140002d3b", 
          "code": "JZ 0x140002d93"
        }, 
        {
          "address": "0x140002d3d", 
          "code": "JMP 0x140002ce8"
        }, 
        {
          "address": "0x140002d3f", 
          "code": "MOV R12,qword ptr [RSP + 0x80]"
        }, 
        {
          "address": "0x140002d47", 
          "code": "MOV RBP,qword ptr [RSP + 0x78]"
        }, 
        {
          "address": "0x140002d4c", 
          "code": "MOV RBX,qword ptr [RSP + 0x70]"
        }, 
        {
          "address": "0x140002d51", 
          "code": "MOV R15,qword ptr [RSP + 0x40]"
        }, 
        {
          "address": "0x140002d56", 
          "code": "ADD RSP,0x48"
        }, 
        {
          "address": "0x140002d5a", 
          "code": "POP R14"
        }, 
        {
          "address": "0x140002d5c", 
          "code": "POP R13"
        }, 
        {
          "address": "0x140002d5e", 
          "code": "POP RDI"
        }, 
        {
          "address": "0x140002d5f", 
          "code": "POP RSI"
        }, 
        {
          "address": "0x140002d60", 
          "code": "RET"
        }, 
        {
          "address": "0x140002d61", 
          "code": "MOV ECX,0x8007000e"
        }, 
        {
          "address": "0x140002d66", 
          "code": "CALL 0x140002f50"
        }, 
        {
          "address": "0x140002d6b", 
          "code": "INT3"
        }, 
        {
          "address": "0x140002d6c", 
          "code": "MOV ECX,0x80070057"
        }, 
        {
          "address": "0x140002d71", 
          "code": "CALL 0x140002f50"
        }, 
        {
          "address": "0x140002d76", 
          "code": "INT3"
        }, 
        {
          "address": "0x140002d77", 
          "code": "MOV ECX,0x8007000e"
        }, 
        {
          "address": "0x140002d7c", 
          "code": "CALL 0x140002f50"
        }, 
        {
          "address": "0x140002d81", 
          "code": "INT3"
        }, 
        {
          "address": "0x140002d82", 
          "code": "MOV RCX,qword ptr [RDI]"
        }, 
        {
          "address": "0x140002d85", 
          "code": "MOV RDX,RBP"
        }, 
        {
          "address": "0x140002d88", 
          "code": "CALL 0x140002db0"
        }, 
        {
          "address": "0x140002d8d", 
          "code": "CALL 0x140002f30"
        }, 
        {
          "address": "0x140002d92", 
          "code": "INT3"
        }, 
        {
          "address": "0x140002d93", 
          "code": "MOV ECX,0x8007000e"
        }, 
        {
          "address": "0x140002d98", 
          "code": "CALL 0x140002f50"
        }, 
        {
          "address": "0x140002d9d", 
          "code": "INT3"
        }, 
        {
          "address": "0x140002d9e", 
          "code": "MOV ECX,0x80070057"
        }, 
        {
          "address": "0x140002da3", 
          "code": "CALL 0x140002f50"
        }, 
        {
          "address": "0x140002da8", 
          "code": "INT3"
        }
      ], 
      "c_code": "\nvoid FUN_140002b50(undefined8 *param_1,LPCWSTR param_2,UINT param_3)\n\n{\n  LPSTR pCVar1;\n  LPSTR pCVar2;\n  code *pcVar3;\n  int iVar4;\n  DWORD DVar5;\n  LPSTR pCVar6;\n  int cchWideChar;\n  longlong lVar7;\n  bool bVar8;\n  \n  if (param_2 == (LPCWSTR)0x0) {\n    *param_1 = 0;\n    return;\n  }\n  lVar7 = -1;\n  do {\n    lVar7 = lVar7 + 1;\n  } while (param_2[lVar7] != L'\\0');\n  cchWideChar = (int)lVar7 + 1;\n  pCVar1 = (LPSTR)(param_1 + 1);\n  iVar4 = cchWideChar * 4;\n  if (((param_1 == (undefined8 *)0x0) || (iVar4 < 0)) || (pCVar1 == (LPSTR)0x0)) {\n    FUN_140002f50(-0x7ff8ffa9);\n    pcVar3 = (code *)swi(3);\n    (*pcVar3)();\n    return;\n  }\n  pCVar2 = (LPSTR)*param_1;\n  pCVar6 = pCVar1;\n  if (pCVar2 == pCVar1) {\n    if (iVar4 < 0x81) goto LAB_140002c03;\n    pCVar6 = (LPSTR)calloc((longlong)iVar4,1);\n    *param_1 = pCVar6;\n    if (pCVar6 == (LPSTR)0x0) goto LAB_140002d77;\n  }\n  else {\n    if (iVar4 < 0x81) {\n      free(pCVar2);\n    }\n    else {\n      pCVar6 = (LPSTR)_recalloc(pCVar2,(longlong)iVar4,1);\n      if (pCVar6 == (LPSTR)0x0) {\n        FUN_140002f50(-0x7ff8fff2);\n        pcVar3 = (code *)swi(3);\n        (*pcVar3)();\n        return;\n      }\n    }\nLAB_140002c03:\n    *param_1 = pCVar6;\n  }\n  iVar4 = WideCharToMultiByte(param_3,0,param_2,cchWideChar,pCVar6,iVar4,(LPCSTR)0x0,(LPBOOL)0x0);\n  bVar8 = iVar4 == 0;\n  if ((iVar4 != 0) || (DVar5 = GetLastError(), DVar5 != 0x7a)) goto LAB_140002d16;\n  iVar4 = WideCharToMultiByte(param_3,0,param_2,cchWideChar,(LPSTR)0x0,0,(LPCSTR)0x0,(LPBOOL)0x0);\n  if (iVar4 < 0) {\n    FUN_140002f50(-0x7ff8ffa9);\n    pcVar3 = (code *)swi(3);\n    (*pcVar3)();\n    return;\n  }\n  pCVar2 = (LPSTR)*param_1;\n  pCVar6 = pCVar1;\n  if (pCVar2 == pCVar1) {\n    if (iVar4 < 0x81) goto LAB_140002ce4;\n    pCVar6 = (LPSTR)calloc((longlong)iVar4,1);\n    *param_1 = pCVar6;\n    if (pCVar6 == (LPSTR)0x0) {\n      FUN_140002f50(-0x7ff8fff2);\n      pcVar3 = (code *)swi(3);\n      (*pcVar3)();\n      return;\n    }\n  }\n  else {\n    if (iVar4 < 0x81) {\n      free(pCVar2);\n    }\n    else {\n      pCVar6 = (LPSTR)_recalloc(pCVar2,(longlong)iVar4,1);\n      if (pCVar6 == (LPSTR)0x0) {\nLAB_140002d77:\n        FUN_140002f50(-0x7ff8fff2);\n        pcVar3 = (code *)swi(3);\n        (*pcVar3)();\n        return;\n      }\n    }\nLAB_140002ce4:\n    *param_1 = pCVar6;\n  }\n  iVar4 = WideCharToMultiByte(param_3,0,param_2,cchWideChar,pCVar6,iVar4,(LPCSTR)0x0,(LPBOOL)0x0);\n  bVar8 = iVar4 == 0;\nLAB_140002d16:\n  if (bVar8) {\n    FUN_140002db0((void *)*param_1,pCVar1);\n    FUN_140002f30();\n    pcVar3 = (code *)swi(3);\n    (*pcVar3)();\n    return;\n  }\n  return;\n}\n\n", 
      "name": "FUN_140002b50", 
      "entry_point": "0x140002b50"
    }, 
    {
      "signature": "undefined __fastcall FUN_140002db0(void * param_1, void * param_2)", 
      "disassembly": [
        {
          "address": "0x140002db0", 
          "code": "CMP RCX,RDX"
        }, 
        {
          "address": "0x140002db3", 
          "code": "JZ 0x140002dbc"
        }, 
        {
          "address": "0x140002db5", 
          "code": "JMP qword ptr [0x140005258]"
        }, 
        {
          "address": "0x140002dbc", 
          "code": "RET"
        }
      ], 
      "c_code": "\nvoid FUN_140002db0(void *param_1,void *param_2)\n\n{\n  if (param_1 != param_2) {\n                    /* WARNING: Could not recover jumptable at 0x000140002db5. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n    free(param_1);\n    return;\n  }\n  return;\n}\n\n", 
      "name": "FUN_140002db0", 
      "entry_point": "0x140002db0"
    }, 
    {
      "signature": "longlong * __fastcall FUN_140002dc0(longlong * param_1, ulonglong param_2, undefined8 param_3, void * param_4)", 
      "disassembly": [
        {
          "address": "0x140002dc0", 
          "code": "PUSH RBX"
        }, 
        {
          "address": "0x140002dc2", 
          "code": "PUSH RSI"
        }, 
        {
          "address": "0x140002dc3", 
          "code": "PUSH R14"
        }, 
        {
          "address": "0x140002dc5", 
          "code": "PUSH R15"
        }, 
        {
          "address": "0x140002dc7", 
          "code": "SUB RSP,0x28"
        }, 
        {
          "address": "0x140002dcb", 
          "code": "MOV RBX,0x7fffffffffffffff"
        }, 
        {
          "address": "0x140002dd5", 
          "code": "MOV R15,R9"
        }, 
        {
          "address": "0x140002dd8", 
          "code": "MOV R14,RDX"
        }, 
        {
          "address": "0x140002ddb", 
          "code": "MOV RSI,RCX"
        }, 
        {
          "address": "0x140002dde", 
          "code": "CMP RDX,RBX"
        }, 
        {
          "address": "0x140002de1", 
          "code": "JA 0x140002ee8"
        }, 
        {
          "address": "0x140002de7", 
          "code": "MOV qword ptr [RSP + 0x60],RBP"
        }, 
        {
          "address": "0x140002dec", 
          "code": "OR RDX,0xf"
        }, 
        {
          "address": "0x140002df0", 
          "code": "MOV RBP,qword ptr [RCX + 0x18]"
        }, 
        {
          "address": "0x140002df4", 
          "code": "MOV qword ptr [RSP + 0x20],RDI"
        }, 
        {
          "address": "0x140002df9", 
          "code": "CMP RDX,RBX"
        }, 
        {
          "address": "0x140002dfc", 
          "code": "JA 0x140002e38"
        }, 
        {
          "address": "0x140002dfe", 
          "code": "MOV RCX,RBP"
        }, 
        {
          "address": "0x140002e01", 
          "code": "MOV RAX,RBX"
        }, 
        {
          "address": "0x140002e04", 
          "code": "SHR RCX,0x1"
        }, 
        {
          "address": "0x140002e07", 
          "code": "SUB RAX,RCX"
        }, 
        {
          "address": "0x140002e0a", 
          "code": "CMP RBP,RAX"
        }, 
        {
          "address": "0x140002e0d", 
          "code": "JA 0x140002e38"
        }, 
        {
          "address": "0x140002e0f", 
          "code": "LEA RAX,[RCX + RBP*0x1]"
        }, 
        {
          "address": "0x140002e13", 
          "code": "MOV RBX,RDX"
        }, 
        {
          "address": "0x140002e16", 
          "code": "CMP RDX,RAX"
        }, 
        {
          "address": "0x140002e19", 
          "code": "CMOVC RBX,RAX"
        }, 
        {
          "address": "0x140002e1d", 
          "code": "LEA RAX,[RBX + 0x1]"
        }, 
        {
          "address": "0x140002e21", 
          "code": "CMP RAX,0x1000"
        }, 
        {
          "address": "0x140002e27", 
          "code": "JC 0x140002e63"
        }, 
        {
          "address": "0x140002e29", 
          "code": "LEA RCX,[RAX + 0x27]"
        }, 
        {
          "address": "0x140002e2d", 
          "code": "CMP RCX,RAX"
        }, 
        {
          "address": "0x140002e30", 
          "code": "JBE 0x140002eee"
        }, 
        {
          "address": "0x140002e36", 
          "code": "JMP 0x140002e46"
        }, 
        {
          "address": "0x140002e38", 
          "code": "MOV RCX,-0x8000000000000000"
        }, 
        {
          "address": "0x140002e42", 
          "code": "ADD RCX,0x27"
        }, 
        {
          "address": "0x140002e46", 
          "code": "CALL qword ptr [0x140005720]"
        }, 
        {
          "address": "0x140002e4c", 
          "code": "TEST RAX,RAX"
        }, 
        {
          "address": "0x140002e4f", 
          "code": "JZ 0x140002ee1"
        }, 
        {
          "address": "0x140002e55", 
          "code": "LEA RDI,[RAX + 0x27]"
        }, 
        {
          "address": "0x140002e59", 
          "code": "AND RDI,-0x20"
        }, 
        {
          "address": "0x140002e5d", 
          "code": "MOV qword ptr [RDI + -0x8],RAX"
        }, 
        {
          "address": "0x140002e61", 
          "code": "JMP 0x140002e78"
        }, 
        {
          "address": "0x140002e63", 
          "code": "TEST RAX,RAX"
        }, 
        {
          "address": "0x140002e66", 
          "code": "JZ 0x140002e76"
        }, 
        {
          "address": "0x140002e68", 
          "code": "MOV RCX,RAX"
        }, 
        {
          "address": "0x140002e6b", 
          "code": "CALL qword ptr [0x140005720]"
        }, 
        {
          "address": "0x140002e71", 
          "code": "MOV RDI,RAX"
        }, 
        {
          "address": "0x140002e74", 
          "code": "JMP 0x140002e78"
        }, 
        {
          "address": "0x140002e76", 
          "code": "XOR EDI,EDI"
        }, 
        {
          "address": "0x140002e78", 
          "code": "MOV R8,R14"
        }, 
        {
          "address": "0x140002e7b", 
          "code": "MOV qword ptr [RSI + 0x10],R14"
        }, 
        {
          "address": "0x140002e7f", 
          "code": "MOV RDX,R15"
        }, 
        {
          "address": "0x140002e82", 
          "code": "MOV qword ptr [RSI + 0x18],RBX"
        }, 
        {
          "address": "0x140002e86", 
          "code": "MOV RCX,RDI"
        }, 
        {
          "address": "0x140002e89", 
          "code": "CALL 0x1400041ff"
        }, 
        {
          "address": "0x140002e8e", 
          "code": "MOV byte ptr [RDI + R14*0x1],0x0"
        }, 
        {
          "address": "0x140002e93", 
          "code": "CMP RBP,0xf"
        }, 
        {
          "address": "0x140002e97", 
          "code": "JBE 0x140002ec6"
        }, 
        {
          "address": "0x140002e99", 
          "code": "MOV RCX,qword ptr [RSI]"
        }, 
        {
          "address": "0x140002e9c", 
          "code": "LEA RDX,[RBP + 0x1]"
        }, 
        {
          "address": "0x140002ea0", 
          "code": "CMP RDX,0x1000"
        }, 
        {
          "address": "0x140002ea7", 
          "code": "JC 0x140002ec1"
        }, 
        {
          "address": "0x140002ea9", 
          "code": "MOV R8,qword ptr [RCX + -0x8]"
        }, 
        {
          "address": "0x140002ead", 
          "code": "ADD RDX,0x27"
        }, 
        {
          "address": "0x140002eb1", 
          "code": "SUB RCX,R8"
        }, 
        {
          "address": "0x140002eb4", 
          "code": "LEA RAX,[RCX + -0x8]"
        }, 
        {
          "address": "0x140002eb8", 
          "code": "CMP RAX,0x1f"
        }, 
        {
          "address": "0x140002ebc", 
          "code": "JA 0x140002ee1"
        }, 
        {
          "address": "0x140002ebe", 
          "code": "MOV RCX,R8"
        }, 
        {
          "address": "0x140002ec1", 
          "code": "CALL 0x1400037dc"
        }, 
        {
          "address": "0x140002ec6", 
          "code": "MOV qword ptr [RSI],RDI"
        }, 
        {
          "address": "0x140002ec9", 
          "code": "MOV RAX,RSI"
        }, 
        {
          "address": "0x140002ecc", 
          "code": "MOV RBP,qword ptr [RSP + 0x60]"
        }, 
        {
          "address": "0x140002ed1", 
          "code": "MOV RDI,qword ptr [RSP + 0x20]"
        }, 
        {
          "address": "0x140002ed6", 
          "code": "ADD RSP,0x28"
        }, 
        {
          "address": "0x140002eda", 
          "code": "POP R15"
        }, 
        {
          "address": "0x140002edc", 
          "code": "POP R14"
        }, 
        {
          "address": "0x140002ede", 
          "code": "POP RSI"
        }, 
        {
          "address": "0x140002edf", 
          "code": "POP RBX"
        }, 
        {
          "address": "0x140002ee0", 
          "code": "RET"
        }, 
        {
          "address": "0x140002ee1", 
          "code": "CALL qword ptr [0x1400052b8]"
        }, 
        {
          "address": "0x140002ee8", 
          "code": "CALL 0x140001690"
        }, 
        {
          "address": "0x140002eed", 
          "code": "INT3"
        }, 
        {
          "address": "0x140002eee", 
          "code": "CALL 0x1400015f0"
        }, 
        {
          "address": "0x140002ef3", 
          "code": "INT3"
        }
      ], 
      "c_code": "\nlonglong * FUN_140002dc0(longlong *param_1,ulonglong param_2,undefined8 param_3,void *param_4)\n\n{\n  ulonglong uVar1;\n  ulonglong uVar2;\n  code *pcVar3;\n  void *pvVar4;\n  longlong *plVar5;\n  void *pvVar6;\n  ulonglong uVar7;\n  ulonglong uVar8;\n  void *_Dst;\n  \n  uVar8 = 0x7fffffffffffffff;\n  if (0x7fffffffffffffff < param_2) {\n    FUN_140001690();\n    pcVar3 = (code *)swi(3);\n    plVar5 = (longlong *)(*pcVar3)();\n    return plVar5;\n  }\n  uVar7 = param_2 | 0xf;\n  uVar2 = param_1[3];\n  if ((uVar7 < 0x8000000000000000) && (uVar2 <= 0x7fffffffffffffff - (uVar2 >> 1))) {\n    uVar1 = (uVar2 >> 1) + uVar2;\n    uVar8 = uVar7;\n    if (uVar7 < uVar1) {\n      uVar8 = uVar1;\n    }\n    uVar1 = uVar8 + 1;\n    if (0xfff < uVar1) {\n      uVar7 = uVar8 + 0x28;\n      if (uVar7 <= uVar1) {\n        FUN_1400015f0();\n        pcVar3 = (code *)swi(3);\n        plVar5 = (longlong *)(*pcVar3)();\n        return plVar5;\n      }\n      goto LAB_140002e46;\n    }\n    if (uVar1 == 0) {\n      _Dst = (void *)0x0;\n    }\n    else {\n      _Dst = operator_new(uVar1);\n    }\n  }\n  else {\n    uVar7 = 0x8000000000000027;\nLAB_140002e46:\n    pvVar4 = operator_new(uVar7);\n    if (pvVar4 == (void *)0x0) goto LAB_140002ee1;\n    _Dst = (void *)((longlong)pvVar4 + 0x27U & 0xffffffffffffffe0);\n    *(void **)((longlong)_Dst - 8) = pvVar4;\n  }\n  param_1[2] = param_2;\n  param_1[3] = uVar8;\n  memcpy(_Dst,param_4,param_2);\n  *(undefined1 *)((longlong)_Dst + param_2) = 0;\n  if (0xf < uVar2) {\n    pvVar4 = (void *)*param_1;\n    pvVar6 = pvVar4;\n    if ((0xfff < uVar2 + 1) &&\n       (pvVar6 = *(void **)((longlong)pvVar4 + -8),\n       0x1f < (ulonglong)((longlong)pvVar4 + (-8 - (longlong)pvVar6)))) {\nLAB_140002ee1:\n                    /* WARNING: Subroutine does not return */\n      _invalid_parameter_noinfo_noreturn();\n    }\n    operator_delete(pvVar6);\n  }\n  *param_1 = (longlong)_Dst;\n  return param_1;\n}\n\n", 
      "name": "FUN_140002dc0", 
      "entry_point": "0x140002dc0"
    }, 
    {
      "signature": "undefined __fastcall FUN_140002ef4(longlong param_1, uint param_2)", 
      "disassembly": [
        {
          "address": "0x140002ef4", 
          "code": "MOVSXD RAX,dword ptr [RCX + -0x4]"
        }, 
        {
          "address": "0x140002ef8", 
          "code": "SUB RCX,RAX"
        }, 
        {
          "address": "0x140002efb", 
          "code": "JMP 0x140002ab0"
        }
      ], 
      "c_code": "\nvoid FUN_140002ef4(longlong param_1,uint param_2)\n\n{\n  FUN_140002ab0((basic_ios<char,struct_std::char_traits<char>_> *)(param_1 - *(int *)(param_1 + -4))\n                ,param_2);\n  return;\n}\n\n", 
      "name": "FUN_140002ef4", 
      "entry_point": "0x140002ef4"
    }, 
    {
      "signature": "undefined __fastcall FUN_140002f00(CDialog * param_1, ushort param_2, CWnd * param_3)", 
      "disassembly": [
        {
          "address": "0x140002f00", 
          "code": "MOVZX EDX,DX"
        }, 
        {
          "address": "0x140002f03", 
          "code": "JMP qword ptr [0x140005898]"
        }
      ], 
      "c_code": "\nvoid FUN_140002f00(CDialog *param_1,ushort param_2,CWnd *param_3)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x000140002f03. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  CDialog::Create(param_1,(wchar_t *)(ulonglong)param_2,param_3);\n  return;\n}\n\n", 
      "name": "FUN_140002f00", 
      "entry_point": "0x140002f00"
    }, 
    {
      "signature": "undefined __fastcall FUN_140002f10(longlong param_1)", 
      "disassembly": [
        {
          "address": "0x140002f10", 
          "code": "MOV RCX,qword ptr [RCX + 0x40]"
        }, 
        {
          "address": "0x140002f14", 
          "code": "MOV EDX,0x1"
        }, 
        {
          "address": "0x140002f19", 
          "code": "JMP qword ptr [0x1400051d0]"
        }
      ], 
      "c_code": "\nvoid FUN_140002f10(longlong param_1)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x000140002f19. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  EnableWindow(*(undefined8 *)(param_1 + 0x40),1);\n  return;\n}\n\n", 
      "name": "FUN_140002f10", 
      "entry_point": "0x140002f10"
    }, 
    {
      "signature": "undefined __fastcall FUN_140002f20(longlong param_1)", 
      "disassembly": [
        {
          "address": "0x140002f20", 
          "code": "MOV RCX,qword ptr [RCX + 0x40]"
        }, 
        {
          "address": "0x140002f24", 
          "code": "XOR EDX,EDX"
        }, 
        {
          "address": "0x140002f26", 
          "code": "JMP qword ptr [0x1400051d0]"
        }
      ], 
      "c_code": "\nvoid FUN_140002f20(longlong param_1)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x000140002f26. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  EnableWindow(*(undefined8 *)(param_1 + 0x40),0);\n  return;\n}\n\n", 
      "name": "FUN_140002f20", 
      "entry_point": "0x140002f20"
    }, 
    {
      "signature": "undefined __fastcall FUN_140002f30(void)", 
      "disassembly": [
        {
          "address": "0x140002f30", 
          "code": "SUB RSP,0x28"
        }, 
        {
          "address": "0x140002f34", 
          "code": "CALL qword ptr [0x1400050d0]"
        }, 
        {
          "address": "0x140002f3a", 
          "code": "TEST EAX,EAX"
        }, 
        {
          "address": "0x140002f3c", 
          "code": "JLE 0x140002f46"
        }, 
        {
          "address": "0x140002f3e", 
          "code": "MOVZX EAX,AX"
        }, 
        {
          "address": "0x140002f41", 
          "code": "OR EAX,0x80070000"
        }, 
        {
          "address": "0x140002f46", 
          "code": "MOV ECX,EAX"
        }, 
        {
          "address": "0x140002f48", 
          "code": "CALL 0x140002f50"
        }, 
        {
          "address": "0x140002f4d", 
          "code": "INT3"
        }
      ], 
      "c_code": "\nvoid FUN_140002f30(void)\n\n{\n  code *pcVar1;\n  DWORD DVar2;\n  \n  DVar2 = GetLastError();\n  if (0 < (int)DVar2) {\n    DVar2 = DVar2 & 0xffff | 0x80070000;\n  }\n  FUN_140002f50(DVar2);\n  pcVar1 = (code *)swi(3);\n  (*pcVar1)();\n  return;\n}\n\n", 
      "name": "FUN_140002f30", 
      "entry_point": "0x140002f30"
    }, 
    {
      "signature": "undefined __fastcall FUN_140002f50(int param_1)", 
      "disassembly": [
        {
          "address": "0x140002f50", 
          "code": "SUB RSP,0x28"
        }, 
        {
          "address": "0x140002f54", 
          "code": "CMP ECX,0x8007000e"
        }, 
        {
          "address": "0x140002f5a", 
          "code": "JNZ 0x140002f63"
        }, 
        {
          "address": "0x140002f5c", 
          "code": "CALL qword ptr [0x1400054c8]"
        }, 
        {
          "address": "0x140002f62", 
          "code": "INT3"
        }, 
        {
          "address": "0x140002f63", 
          "code": "CALL qword ptr [0x1400054d0]"
        }, 
        {
          "address": "0x140002f69", 
          "code": "INT3"
        }
      ], 
      "c_code": "\nvoid FUN_140002f50(int param_1)\n\n{\n  code *pcVar1;\n  \n  if (param_1 == -0x7ff8fff2) {\n    AfxThrowMemoryException();\n    pcVar1 = (code *)swi(3);\n    (*pcVar1)();\n    return;\n  }\n  AfxThrowOleException(param_1);\n  pcVar1 = (code *)swi(3);\n  (*pcVar1)();\n  return;\n}\n\n", 
      "name": "FUN_140002f50", 
      "entry_point": "0x140002f50"
    }, 
    {
      "signature": "BOOL __stdcall InitializeCriticalSectionEx(LPCRITICAL_SECTION lpCriticalSection, DWORD dwSpinCount, DWORD Flags)", 
      "disassembly": [
        {
          "address": "0x140002f70", 
          "code": "JMP qword ptr [0x1400050e8]"
        }
      ], 
      "c_code": "\nBOOL __stdcall\nInitializeCriticalSectionEx(LPCRITICAL_SECTION lpCriticalSection,DWORD dwSpinCount,DWORD Flags)\n\n{\n  BOOL BVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140002f70. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  BVar1 = InitializeCriticalSectionEx(lpCriticalSection,dwSpinCount,Flags);\n  return BVar1;\n}\n\n", 
      "name": "InitializeCriticalSectionEx", 
      "entry_point": "0x140002f70"
    }, 
    {
      "signature": "void __cdecl operator_delete(void * param_1)", 
      "disassembly": [
        {
          "address": "0x140002f77", 
          "code": "JMP qword ptr [0x1400058a0]"
        }
      ], 
      "c_code": "\nvoid __cdecl operator_delete(void *param_1)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x000140002f77. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  operator_delete(param_1);\n  return;\n}\n\n", 
      "name": "operator_delete", 
      "entry_point": "0x140002f77"
    }, 
    {
      "signature": "AFX_MSGMAP * __cdecl GetThisMessageMap(void)", 
      "disassembly": [
        {
          "address": "0x140002f83", 
          "code": "JMP qword ptr [0x140005880]"
        }
      ], 
      "c_code": "\nAFX_MSGMAP * __cdecl CWinApp::GetThisMessageMap(void)\n\n{\n  AFX_MSGMAP *pAVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140002f83. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pAVar1 = GetThisMessageMap();\n  return pAVar1;\n}\n\n", 
      "name": "GetThisMessageMap", 
      "entry_point": "0x140002f83"
    }, 
    {
      "signature": "__int64 __thiscall DoModal(void)", 
      "disassembly": [
        {
          "address": "0x140002f89", 
          "code": "JMP qword ptr [0x1400056f0]"
        }
      ], 
      "c_code": "\n__int64 __thiscall CDialog::DoModal(CDialog *this)\n\n{\n  __int64 _Var1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140002f89. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  _Var1 = DoModal(this);\n  return _Var1;\n}\n\n", 
      "name": "DoModal", 
      "entry_point": "0x140002f89"
    }, 
    {
      "signature": "CRuntimeClass * __thiscall GetRuntimeClass(void)", 
      "disassembly": [
        {
          "address": "0x140002f95", 
          "code": "JMP qword ptr [0x1400056b8]"
        }
      ], 
      "c_code": "\nCRuntimeClass * __thiscall CGdiObject::GetRuntimeClass(CGdiObject *this)\n\n{\n  CRuntimeClass *pCVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140002f95. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pCVar1 = GetRuntimeClass(this);\n  return pCVar1;\n}\n\n", 
      "name": "GetRuntimeClass", 
      "entry_point": "0x140002f95"
    }, 
    {
      "signature": "CRuntimeClass * __thiscall GetRuntimeClass(void)", 
      "disassembly": [
        {
          "address": "0x140002f9b", 
          "code": "JMP qword ptr [0x1400056b0]"
        }
      ], 
      "c_code": "\nCRuntimeClass * __thiscall CBrush::GetRuntimeClass(CBrush *this)\n\n{\n  CRuntimeClass *pCVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140002f9b. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pCVar1 = GetRuntimeClass(this);\n  return pCVar1;\n}\n\n", 
      "name": "GetRuntimeClass", 
      "entry_point": "0x140002f9b"
    }, 
    {
      "signature": "CRuntimeClass * __thiscall GetRuntimeClass(void)", 
      "disassembly": [
        {
          "address": "0x140002fa1", 
          "code": "JMP qword ptr [0x1400056a0]"
        }
      ], 
      "c_code": "\nCRuntimeClass * __thiscall CWinApp::GetRuntimeClass(CWinApp *this)\n\n{\n  CRuntimeClass *pCVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140002fa1. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pCVar1 = GetRuntimeClass(this);\n  return pCVar1;\n}\n\n", 
      "name": "GetRuntimeClass", 
      "entry_point": "0x140002fa1"
    }, 
    {
      "signature": "int __thiscall OnCmdMsg(uint param_1, int param_2, void * param_3, AFX_CMDHANDLERINFO * param_4)", 
      "disassembly": [
        {
          "address": "0x140002fa7", 
          "code": "JMP qword ptr [0x140005698]"
        }
      ], 
      "c_code": "\nint __thiscall\nCCmdTarget::OnCmdMsg\n          (CCmdTarget *this,uint param_1,int param_2,void *param_3,AFX_CMDHANDLERINFO *param_4)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140002fa7. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = OnCmdMsg(this,param_1,param_2,param_3,param_4);\n  return iVar1;\n}\n\n", 
      "name": "OnCmdMsg", 
      "entry_point": "0x140002fa7"
    }, 
    {
      "signature": "void __thiscall OnFinalRelease(void)", 
      "disassembly": [
        {
          "address": "0x140002fad", 
          "code": "JMP qword ptr [0x140005690]"
        }
      ], 
      "c_code": "\nvoid __thiscall CCmdTarget::OnFinalRelease(CCmdTarget *this)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x000140002fad. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  OnFinalRelease(this);\n  return;\n}\n\n", 
      "name": "OnFinalRelease", 
      "entry_point": "0x140002fad"
    }, 
    {
      "signature": "int __thiscall IsInvokeAllowed(long param_1)", 
      "disassembly": [
        {
          "address": "0x140002fb3", 
          "code": "JMP qword ptr [0x140005688]"
        }
      ], 
      "c_code": "\nint __thiscall CCmdTarget::IsInvokeAllowed(CCmdTarget *this,long param_1)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140002fb3. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = IsInvokeAllowed(this,param_1);\n  return iVar1;\n}\n\n", 
      "name": "IsInvokeAllowed", 
      "entry_point": "0x140002fb3"
    }, 
    {
      "signature": "int __thiscall GetDispatchIID(_GUID * param_1)", 
      "disassembly": [
        {
          "address": "0x140002fb9", 
          "code": "JMP qword ptr [0x140005680]"
        }
      ], 
      "c_code": "\nint __thiscall CCmdTarget::GetDispatchIID(CCmdTarget *this,_GUID *param_1)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140002fb9. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = GetDispatchIID(this,param_1);\n  return iVar1;\n}\n\n", 
      "name": "GetDispatchIID", 
      "entry_point": "0x140002fb9"
    }, 
    {
      "signature": "uint __thiscall GetTypeInfoCount(void)", 
      "disassembly": [
        {
          "address": "0x140002fbf", 
          "code": "JMP qword ptr [0x140005678]"
        }
      ], 
      "c_code": "\nuint __thiscall CCmdTarget::GetTypeInfoCount(CCmdTarget *this)\n\n{\n  uint uVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140002fbf. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  uVar1 = GetTypeInfoCount(this);\n  return uVar1;\n}\n\n", 
      "name": "GetTypeInfoCount", 
      "entry_point": "0x140002fbf"
    }, 
    {
      "signature": "CTypeLibCache * __thiscall GetTypeLibCache(void)", 
      "disassembly": [
        {
          "address": "0x140002fc5", 
          "code": "JMP qword ptr [0x140005670]"
        }
      ], 
      "c_code": "\nCTypeLibCache * __thiscall CCmdTarget::GetTypeLibCache(CCmdTarget *this)\n\n{\n  CTypeLibCache *pCVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140002fc5. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pCVar1 = GetTypeLibCache(this);\n  return pCVar1;\n}\n\n", 
      "name": "GetTypeLibCache", 
      "entry_point": "0x140002fc5"
    }, 
    {
      "signature": "long __thiscall GetTypeLib(ulong param_1, ITypeLib * * param_2)", 
      "disassembly": [
        {
          "address": "0x140002fcb", 
          "code": "JMP qword ptr [0x140005668]"
        }
      ], 
      "c_code": "\nlong __thiscall CCmdTarget::GetTypeLib(CCmdTarget *this,ulong param_1,ITypeLib **param_2)\n\n{\n  long lVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140002fcb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  lVar1 = GetTypeLib(this,param_1,param_2);\n  return lVar1;\n}\n\n", 
      "name": "GetTypeLib", 
      "entry_point": "0x140002fcb"
    }, 
    {
      "signature": "AFX_OLECMDMAP * __thiscall GetCommandMap(void)", 
      "disassembly": [
        {
          "address": "0x140002fd1", 
          "code": "JMP qword ptr [0x140005660]"
        }
      ], 
      "c_code": "\nAFX_OLECMDMAP * __thiscall CCmdTarget::GetCommandMap(CCmdTarget *this)\n\n{\n  AFX_OLECMDMAP *pAVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140002fd1. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pAVar1 = GetCommandMap(this);\n  return pAVar1;\n}\n\n", 
      "name": "GetCommandMap", 
      "entry_point": "0x140002fd1"
    }, 
    {
      "signature": "AFX_DISPMAP * __thiscall GetDispatchMap(void)", 
      "disassembly": [
        {
          "address": "0x140002fd7", 
          "code": "JMP qword ptr [0x140005658]"
        }
      ], 
      "c_code": "\nAFX_DISPMAP * __thiscall CCmdTarget::GetDispatchMap(CCmdTarget *this)\n\n{\n  AFX_DISPMAP *pAVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140002fd7. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pAVar1 = GetDispatchMap(this);\n  return pAVar1;\n}\n\n", 
      "name": "GetDispatchMap", 
      "entry_point": "0x140002fd7"
    }, 
    {
      "signature": "AFX_CONNECTIONMAP * __thiscall GetConnectionMap(void)", 
      "disassembly": [
        {
          "address": "0x140002fdd", 
          "code": "JMP qword ptr [0x140005650]"
        }
      ], 
      "c_code": "\nAFX_CONNECTIONMAP * __thiscall CCmdTarget::GetConnectionMap(CCmdTarget *this)\n\n{\n  AFX_CONNECTIONMAP *pAVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140002fdd. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pAVar1 = GetConnectionMap(this);\n  return pAVar1;\n}\n\n", 
      "name": "GetConnectionMap", 
      "entry_point": "0x140002fdd"
    }, 
    {
      "signature": "AFX_INTERFACEMAP * __thiscall GetInterfaceMap(void)", 
      "disassembly": [
        {
          "address": "0x140002fe3", 
          "code": "JMP qword ptr [0x140005648]"
        }
      ], 
      "c_code": "\nAFX_INTERFACEMAP * __thiscall CCmdTarget::GetInterfaceMap(CCmdTarget *this)\n\n{\n  AFX_INTERFACEMAP *pAVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140002fe3. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pAVar1 = GetInterfaceMap(this);\n  return pAVar1;\n}\n\n", 
      "name": "GetInterfaceMap", 
      "entry_point": "0x140002fe3"
    }, 
    {
      "signature": "AFX_EVENTSINKMAP * __thiscall GetEventSinkMap(void)", 
      "disassembly": [
        {
          "address": "0x140002fe9", 
          "code": "JMP qword ptr [0x140005640]"
        }
      ], 
      "c_code": "\nAFX_EVENTSINKMAP * __thiscall CCmdTarget::GetEventSinkMap(CCmdTarget *this)\n\n{\n  AFX_EVENTSINKMAP *pAVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140002fe9. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pAVar1 = GetEventSinkMap(this);\n  return pAVar1;\n}\n\n", 
      "name": "GetEventSinkMap", 
      "entry_point": "0x140002fe9"
    }, 
    {
      "signature": "int __thiscall OnCreateAggregates(void)", 
      "disassembly": [
        {
          "address": "0x140002fef", 
          "code": "JMP qword ptr [0x140005638]"
        }
      ], 
      "c_code": "\nint __thiscall CCmdTarget::OnCreateAggregates(CCmdTarget *this)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140002fef. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = OnCreateAggregates(this);\n  return iVar1;\n}\n\n", 
      "name": "OnCreateAggregates", 
      "entry_point": "0x140002fef"
    }, 
    {
      "signature": "IUnknown * __thiscall GetInterfaceHook(void * param_1)", 
      "disassembly": [
        {
          "address": "0x140002ff5", 
          "code": "JMP qword ptr [0x140005630]"
        }
      ], 
      "c_code": "\nIUnknown * __thiscall CCmdTarget::GetInterfaceHook(CCmdTarget *this,void *param_1)\n\n{\n  IUnknown *pIVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140002ff5. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pIVar1 = GetInterfaceHook(this,param_1);\n  return pIVar1;\n}\n\n", 
      "name": "GetInterfaceHook", 
      "entry_point": "0x140002ff5"
    }, 
    {
      "signature": "int __thiscall GetExtraConnectionPoints(CPtrArray * param_1)", 
      "disassembly": [
        {
          "address": "0x140002ffb", 
          "code": "JMP qword ptr [0x140005628]"
        }
      ], 
      "c_code": "\nint __thiscall CCmdTarget::GetExtraConnectionPoints(CCmdTarget *this,CPtrArray *param_1)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140002ffb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = GetExtraConnectionPoints(this,param_1);\n  return iVar1;\n}\n\n", 
      "name": "GetExtraConnectionPoints", 
      "entry_point": "0x140002ffb"
    }, 
    {
      "signature": "IConnectionPoint * __thiscall GetConnectionHook(_GUID * param_1)", 
      "disassembly": [
        {
          "address": "0x140003001", 
          "code": "JMP qword ptr [0x140005620]"
        }
      ], 
      "c_code": "\nIConnectionPoint * __thiscall CCmdTarget::GetConnectionHook(CCmdTarget *this,_GUID *param_1)\n\n{\n  IConnectionPoint *pIVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003001. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pIVar1 = GetConnectionHook(this,param_1);\n  return pIVar1;\n}\n\n", 
      "name": "GetConnectionHook", 
      "entry_point": "0x140003001"
    }, 
    {
      "signature": "int __thiscall Run(void)", 
      "disassembly": [
        {
          "address": "0x140003007", 
          "code": "JMP qword ptr [0x140005618]"
        }
      ], 
      "c_code": "\nint __thiscall CWinApp::Run(CWinApp *this)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003007. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = Run(this);\n  return iVar1;\n}\n\n", 
      "name": "Run", 
      "entry_point": "0x140003007"
    }, 
    {
      "signature": "int __thiscall PreTranslateMessage(tagMSG * param_1)", 
      "disassembly": [
        {
          "address": "0x14000300d", 
          "code": "JMP qword ptr [0x140005610]"
        }
      ], 
      "c_code": "\nint __thiscall CWinThread::PreTranslateMessage(CWinThread *this,tagMSG *param_1)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x00014000300d. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = PreTranslateMessage(this,param_1);\n  return iVar1;\n}\n\n", 
      "name": "PreTranslateMessage", 
      "entry_point": "0x14000300d"
    }, 
    {
      "signature": "int __thiscall PumpMessage(void)", 
      "disassembly": [
        {
          "address": "0x140003013", 
          "code": "JMP qword ptr [0x140005608]"
        }
      ], 
      "c_code": "\nint __thiscall CWinThread::PumpMessage(CWinThread *this)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003013. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = PumpMessage(this);\n  return iVar1;\n}\n\n", 
      "name": "PumpMessage", 
      "entry_point": "0x140003013"
    }, 
    {
      "signature": "int __thiscall OnIdle(long param_1)", 
      "disassembly": [
        {
          "address": "0x140003019", 
          "code": "JMP qword ptr [0x140005600]"
        }
      ], 
      "c_code": "\nint __thiscall CWinApp::OnIdle(CWinApp *this,long param_1)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003019. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = OnIdle(this,param_1);\n  return iVar1;\n}\n\n", 
      "name": "OnIdle", 
      "entry_point": "0x140003019"
    }, 
    {
      "signature": "int __thiscall IsIdleMessage(tagMSG * param_1)", 
      "disassembly": [
        {
          "address": "0x14000301f", 
          "code": "JMP qword ptr [0x1400055f8]"
        }
      ], 
      "c_code": "\nint __thiscall CWinThread::IsIdleMessage(CWinThread *this,tagMSG *param_1)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x00014000301f. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = IsIdleMessage(this,param_1);\n  return iVar1;\n}\n\n", 
      "name": "IsIdleMessage", 
      "entry_point": "0x14000301f"
    }, 
    {
      "signature": "int __thiscall ExitInstance(void)", 
      "disassembly": [
        {
          "address": "0x140003025", 
          "code": "JMP qword ptr [0x1400055f0]"
        }
      ], 
      "c_code": "\nint __thiscall CWinApp::ExitInstance(CWinApp *this)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003025. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = ExitInstance(this);\n  return iVar1;\n}\n\n", 
      "name": "ExitInstance", 
      "entry_point": "0x140003025"
    }, 
    {
      "signature": "__int64 __thiscall ProcessWndProcException(CException * param_1, tagMSG * param_2)", 
      "disassembly": [
        {
          "address": "0x14000302b", 
          "code": "JMP qword ptr [0x1400055e8]"
        }
      ], 
      "c_code": "\n__int64 __thiscall\nCWinApp::ProcessWndProcException(CWinApp *this,CException *param_1,tagMSG *param_2)\n\n{\n  __int64 _Var1;\n  \n                    /* WARNING: Could not recover jumptable at 0x00014000302b. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  _Var1 = ProcessWndProcException(this,param_1,param_2);\n  return _Var1;\n}\n\n", 
      "name": "ProcessWndProcException", 
      "entry_point": "0x14000302b"
    }, 
    {
      "signature": "int __thiscall ProcessMessageFilter(int param_1, tagMSG * param_2)", 
      "disassembly": [
        {
          "address": "0x140003031", 
          "code": "JMP qword ptr [0x1400055e0]"
        }
      ], 
      "c_code": "\nint __thiscall CWinThread::ProcessMessageFilter(CWinThread *this,int param_1,tagMSG *param_2)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003031. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = ProcessMessageFilter(this,param_1,param_2);\n  return iVar1;\n}\n\n", 
      "name": "ProcessMessageFilter", 
      "entry_point": "0x140003031"
    }, 
    {
      "signature": "CWnd * __thiscall GetMainWnd(void)", 
      "disassembly": [
        {
          "address": "0x140003037", 
          "code": "JMP qword ptr [0x1400055d8]"
        }
      ], 
      "c_code": "\nCWnd * __thiscall CWinThread::GetMainWnd(CWinThread *this)\n\n{\n  CWnd *pCVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003037. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pCVar1 = GetMainWnd(this);\n  return pCVar1;\n}\n\n", 
      "name": "GetMainWnd", 
      "entry_point": "0x140003037"
    }, 
    {
      "signature": "void __thiscall Delete(void)", 
      "disassembly": [
        {
          "address": "0x14000303d", 
          "code": "JMP qword ptr [0x1400055d0]"
        }
      ], 
      "c_code": "\nvoid __thiscall CWinThread::Delete(CWinThread *this)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x00014000303d. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  Delete(this);\n  return;\n}\n\n", 
      "name": "Delete", 
      "entry_point": "0x14000303d"
    }, 
    {
      "signature": "uint __thiscall GetProfileIntW(wchar_t * param_1, wchar_t * param_2, int param_3)", 
      "disassembly": [
        {
          "address": "0x140003043", 
          "code": "JMP qword ptr [0x1400055c8]"
        }
      ], 
      "c_code": "\nuint __thiscall CWinApp::GetProfileIntW(CWinApp *this,wchar_t *param_1,wchar_t *param_2,int param_3)\n\n{\n  uint uVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003043. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  uVar1 = GetProfileIntW(this,param_1,param_2,param_3);\n  return uVar1;\n}\n\n", 
      "name": "GetProfileIntW", 
      "entry_point": "0x140003043"
    }, 
    {
      "signature": "int __thiscall WriteProfileInt(wchar_t * param_1, wchar_t * param_2, int param_3)", 
      "disassembly": [
        {
          "address": "0x140003049", 
          "code": "JMP qword ptr [0x1400055c0]"
        }
      ], 
      "c_code": "\nint __thiscall CWinApp::WriteProfileInt(CWinApp *this,wchar_t *param_1,wchar_t *param_2,int param_3)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003049. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = WriteProfileInt(this,param_1,param_2,param_3);\n  return iVar1;\n}\n\n", 
      "name": "WriteProfileInt", 
      "entry_point": "0x140003049"
    }, 
    {
      "signature": "CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_> __thiscall GetProfileStringW(wchar_t * param_1, wchar_t * param_2, wchar_t * param_3)", 
      "disassembly": [
        {
          "address": "0x14000304f", 
          "code": "JMP qword ptr [0x1400055a8]"
        }
      ], 
      "c_code": "\nvoid __thiscall\nCWinApp::GetProfileStringW(CWinApp *this,wchar_t *param_1,wchar_t *param_2,wchar_t *param_3)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x00014000304f. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  GetProfileStringW(this,param_1,param_2,param_3);\n  return;\n}\n\n", 
      "name": "GetProfileStringW", 
      "entry_point": "0x14000304f"
    }, 
    {
      "signature": "int __thiscall WriteProfileStringW(wchar_t * param_1, wchar_t * param_2, wchar_t * param_3)", 
      "disassembly": [
        {
          "address": "0x140003055", 
          "code": "JMP qword ptr [0x1400055a0]"
        }
      ], 
      "c_code": "\nint __thiscall\nCWinApp::WriteProfileStringW(CWinApp *this,wchar_t *param_1,wchar_t *param_2,wchar_t *param_3)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003055. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = WriteProfileStringW(this,param_1,param_2,param_3);\n  return iVar1;\n}\n\n", 
      "name": "WriteProfileStringW", 
      "entry_point": "0x140003055"
    }, 
    {
      "signature": "int __thiscall GetProfileBinary(wchar_t * param_1, wchar_t * param_2, uchar * * param_3, uint * param_4)", 
      "disassembly": [
        {
          "address": "0x14000305b", 
          "code": "JMP qword ptr [0x140005598]"
        }
      ], 
      "c_code": "\nint __thiscall\nCWinApp::GetProfileBinary\n          (CWinApp *this,wchar_t *param_1,wchar_t *param_2,uchar **param_3,uint *param_4)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x00014000305b. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = GetProfileBinary(this,param_1,param_2,param_3,param_4);\n  return iVar1;\n}\n\n", 
      "name": "GetProfileBinary", 
      "entry_point": "0x14000305b"
    }, 
    {
      "signature": "int __thiscall WriteProfileBinary(wchar_t * param_1, wchar_t * param_2, uchar * param_3, uint param_4)", 
      "disassembly": [
        {
          "address": "0x140003061", 
          "code": "JMP qword ptr [0x140005590]"
        }
      ], 
      "c_code": "\nint __thiscall\nCWinApp::WriteProfileBinary\n          (CWinApp *this,wchar_t *param_1,wchar_t *param_2,uchar *param_3,uint param_4)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003061. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = WriteProfileBinary(this,param_1,param_2,param_3,param_4);\n  return iVar1;\n}\n\n", 
      "name": "WriteProfileBinary", 
      "entry_point": "0x140003061"
    }, 
    {
      "signature": "void __thiscall InitLibId(void)", 
      "disassembly": [
        {
          "address": "0x140003067", 
          "code": "JMP qword ptr [0x140005588]"
        }
      ], 
      "c_code": "\nvoid __thiscall CWinApp::InitLibId(CWinApp *this)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x000140003067. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  InitLibId(this);\n  return;\n}\n\n", 
      "name": "InitLibId", 
      "entry_point": "0x140003067"
    }, 
    {
      "signature": "int __thiscall Register(void)", 
      "disassembly": [
        {
          "address": "0x14000306d", 
          "code": "JMP qword ptr [0x140005580]"
        }
      ], 
      "c_code": "\nint __thiscall CWinApp::Register(CWinApp *this)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x00014000306d. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = Register(this);\n  return iVar1;\n}\n\n", 
      "name": "Register", 
      "entry_point": "0x14000306d"
    }, 
    {
      "signature": "int __thiscall Unregister(void)", 
      "disassembly": [
        {
          "address": "0x140003073", 
          "code": "JMP qword ptr [0x140005578]"
        }
      ], 
      "c_code": "\nint __thiscall CWinApp::Unregister(CWinApp *this)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003073. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = Unregister(this);\n  return iVar1;\n}\n\n", 
      "name": "Unregister", 
      "entry_point": "0x140003073"
    }, 
    {
      "signature": "CDocument * __thiscall OpenDocumentFile(wchar_t * param_1, int param_2)", 
      "disassembly": [
        {
          "address": "0x140003079", 
          "code": "JMP qword ptr [0x140005570]"
        }
      ], 
      "c_code": "\nCDocument * __thiscall CWinApp::OpenDocumentFile(CWinApp *this,wchar_t *param_1,int param_2)\n\n{\n  CDocument *pCVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003079. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pCVar1 = OpenDocumentFile(this,param_1,param_2);\n  return pCVar1;\n}\n\n", 
      "name": "OpenDocumentFile", 
      "entry_point": "0x140003079"
    }, 
    {
      "signature": "CDocument * __thiscall OpenDocumentFile(wchar_t * param_1)", 
      "disassembly": [
        {
          "address": "0x14000307f", 
          "code": "JMP qword ptr [0x140005568]"
        }
      ], 
      "c_code": "\nCDocument * __thiscall CWinApp::OpenDocumentFile(CWinApp *this,wchar_t *param_1)\n\n{\n  CDocument *pCVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x00014000307f. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pCVar1 = OpenDocumentFile(this,param_1);\n  return pCVar1;\n}\n\n", 
      "name": "OpenDocumentFile", 
      "entry_point": "0x14000307f"
    }, 
    {
      "signature": "void __thiscall AddToRecentFileList(wchar_t * param_1)", 
      "disassembly": [
        {
          "address": "0x140003085", 
          "code": "JMP qword ptr [0x140005560]"
        }
      ], 
      "c_code": "\nvoid __thiscall CWinApp::AddToRecentFileList(CWinApp *this,wchar_t *param_1)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x000140003085. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  AddToRecentFileList(this,param_1);\n  return;\n}\n\n", 
      "name": "AddToRecentFileList", 
      "entry_point": "0x140003085"
    }, 
    {
      "signature": "int __thiscall InitApplication(void)", 
      "disassembly": [
        {
          "address": "0x14000308b", 
          "code": "JMP qword ptr [0x140005558]"
        }
      ], 
      "c_code": "\nint __thiscall CWinApp::InitApplication(CWinApp *this)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x00014000308b. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = InitApplication(this);\n  return iVar1;\n}\n\n", 
      "name": "InitApplication", 
      "entry_point": "0x14000308b"
    }, 
    {
      "signature": "int __thiscall SaveAllModified(void)", 
      "disassembly": [
        {
          "address": "0x140003091", 
          "code": "JMP qword ptr [0x140005550]"
        }
      ], 
      "c_code": "\nint __thiscall CWinApp::SaveAllModified(CWinApp *this)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003091. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = SaveAllModified(this);\n  return iVar1;\n}\n\n", 
      "name": "SaveAllModified", 
      "entry_point": "0x140003091"
    }, 
    {
      "signature": "int __thiscall DoMessageBox(wchar_t * param_1, uint param_2, uint param_3)", 
      "disassembly": [
        {
          "address": "0x140003097", 
          "code": "JMP qword ptr [0x140005548]"
        }
      ], 
      "c_code": "\nint __thiscall CWinApp::DoMessageBox(CWinApp *this,wchar_t *param_1,uint param_2,uint param_3)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003097. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = DoMessageBox(this,param_1,param_2,param_3);\n  return iVar1;\n}\n\n", 
      "name": "DoMessageBox", 
      "entry_point": "0x140003097"
    }, 
    {
      "signature": "void __thiscall DoWaitCursor(int param_1)", 
      "disassembly": [
        {
          "address": "0x14000309d", 
          "code": "JMP qword ptr [0x140005540]"
        }
      ], 
      "c_code": "\nvoid __thiscall CWinApp::DoWaitCursor(CWinApp *this,int param_1)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x00014000309d. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  DoWaitCursor(this,param_1);\n  return;\n}\n\n", 
      "name": "DoWaitCursor", 
      "entry_point": "0x14000309d"
    }, 
    {
      "signature": "int __thiscall OnDDECommand(wchar_t * param_1)", 
      "disassembly": [
        {
          "address": "0x1400030a3", 
          "code": "JMP qword ptr [0x140005538]"
        }
      ], 
      "c_code": "\nint __thiscall CWinApp::OnDDECommand(CWinApp *this,wchar_t *param_1)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400030a3. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = OnDDECommand(this,param_1);\n  return iVar1;\n}\n\n", 
      "name": "OnDDECommand", 
      "entry_point": "0x1400030a3"
    }, 
    {
      "signature": "void __thiscall WinHelpW(__uint64 param_1, uint param_2)", 
      "disassembly": [
        {
          "address": "0x1400030a9", 
          "code": "JMP qword ptr [0x140005530]"
        }
      ], 
      "c_code": "\nvoid __thiscall CWinApp::WinHelpW(CWinApp *this,__uint64 param_1,uint param_2)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x0001400030a9. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  WinHelpW(this,param_1,param_2);\n  return;\n}\n\n", 
      "name": "WinHelpW", 
      "entry_point": "0x1400030a9"
    }, 
    {
      "signature": "void __thiscall HtmlHelpW(__uint64 param_1, uint param_2)", 
      "disassembly": [
        {
          "address": "0x1400030af", 
          "code": "JMP qword ptr [0x140005870]"
        }
      ], 
      "c_code": "\nvoid __thiscall CWinApp::HtmlHelpW(CWinApp *this,__uint64 param_1,uint param_2)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x0001400030af. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  HtmlHelpW(this,param_1,param_2);\n  return;\n}\n\n", 
      "name": "HtmlHelpW", 
      "entry_point": "0x1400030af"
    }, 
    {
      "signature": "void __thiscall WinHelpInternal(__uint64 param_1, uint param_2)", 
      "disassembly": [
        {
          "address": "0x1400030b5", 
          "code": "JMP qword ptr [0x140005520]"
        }
      ], 
      "c_code": "\nvoid __thiscall CWinApp::WinHelpInternal(CWinApp *this,__uint64 param_1,uint param_2)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x0001400030b5. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  WinHelpInternal(this,param_1,param_2);\n  return;\n}\n\n", 
      "name": "WinHelpInternal", 
      "entry_point": "0x1400030b5"
    }, 
    {
      "signature": "long __thiscall RegisterWithRestartManager(wchar_t * param_1, ulong param_2, _func_ulong_void_ptr * param_3, void * param_4, ulong param_5, ulong param_6)", 
      "disassembly": [
        {
          "address": "0x1400030bb", 
          "code": "JMP qword ptr [0x140005518]"
        }
      ], 
      "c_code": "\nlong __thiscall\nCWinApp::RegisterWithRestartManager\n          (CWinApp *this,wchar_t *param_1,ulong param_2,_func_ulong_void_ptr *param_3,void *param_4,\n          ulong param_5,ulong param_6)\n\n{\n  long lVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400030bb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  lVar1 = RegisterWithRestartManager(this,param_1,param_2,param_3,param_4,param_5,param_6);\n  return lVar1;\n}\n\n", 
      "name": "RegisterWithRestartManager", 
      "entry_point": "0x1400030bb"
    }, 
    {
      "signature": "long __thiscall RegisterWithRestartManager(int param_1, CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_> * param_2)", 
      "disassembly": [
        {
          "address": "0x1400030c1", 
          "code": "JMP qword ptr [0x140005510]"
        }
      ], 
      "c_code": "\nlong __thiscall\nCWinApp::RegisterWithRestartManager\n          (CWinApp *this,int param_1,\n          CStringT<wchar_t,class_StrTraitMFC_DLL<wchar_t,class_ATL::ChTraitsCRT<wchar_t>_>_>\n          *param_2)\n\n{\n  long lVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400030c1. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  lVar1 = RegisterWithRestartManager(this,param_1,param_2);\n  return lVar1;\n}\n\n", 
      "name": "RegisterWithRestartManager", 
      "entry_point": "0x1400030c1"
    }, 
    {
      "signature": "ulong __thiscall ApplicationRecoveryCallback(void * param_1)", 
      "disassembly": [
        {
          "address": "0x1400030c7", 
          "code": "JMP qword ptr [0x140005508]"
        }
      ], 
      "c_code": "\nulong __thiscall CWinApp::ApplicationRecoveryCallback(CWinApp *this,void *param_1)\n\n{\n  ulong uVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400030c7. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  uVar1 = ApplicationRecoveryCallback(this,param_1);\n  return uVar1;\n}\n\n", 
      "name": "ApplicationRecoveryCallback", 
      "entry_point": "0x1400030c7"
    }, 
    {
      "signature": "CDataRecoveryHandler * __thiscall GetDataRecoveryHandler(void)", 
      "disassembly": [
        {
          "address": "0x1400030cd", 
          "code": "JMP qword ptr [0x140005500]"
        }
      ], 
      "c_code": "\nCDataRecoveryHandler * __thiscall CWinApp::GetDataRecoveryHandler(CWinApp *this)\n\n{\n  CDataRecoveryHandler *pCVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400030cd. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pCVar1 = GetDataRecoveryHandler(this);\n  return pCVar1;\n}\n\n", 
      "name": "GetDataRecoveryHandler", 
      "entry_point": "0x1400030cd"
    }, 
    {
      "signature": "int __thiscall IsTaskbarInteractionEnabled(void)", 
      "disassembly": [
        {
          "address": "0x1400030d3", 
          "code": "JMP qword ptr [0x1400054f8]"
        }
      ], 
      "c_code": "\nint __thiscall CWinApp::IsTaskbarInteractionEnabled(CWinApp *this)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400030d3. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = IsTaskbarInteractionEnabled(this);\n  return iVar1;\n}\n\n", 
      "name": "IsTaskbarInteractionEnabled", 
      "entry_point": "0x1400030d3"
    }, 
    {
      "signature": "int __thiscall RestartInstance(void)", 
      "disassembly": [
        {
          "address": "0x1400030d9", 
          "code": "JMP qword ptr [0x1400054f0]"
        }
      ], 
      "c_code": "\nint __thiscall CWinApp::RestartInstance(CWinApp *this)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400030d9. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = RestartInstance(this);\n  return iVar1;\n}\n\n", 
      "name": "RestartInstance", 
      "entry_point": "0x1400030d9"
    }, 
    {
      "signature": "HINSTANCE__ * __thiscall LoadAppLangResourceDLL(void)", 
      "disassembly": [
        {
          "address": "0x1400030df", 
          "code": "JMP qword ptr [0x1400054e8]"
        }
      ], 
      "c_code": "\nHINSTANCE__ * __thiscall CWinApp::LoadAppLangResourceDLL(CWinApp *this)\n\n{\n  HINSTANCE__ *pHVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400030df. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pHVar1 = LoadAppLangResourceDLL(this);\n  return pHVar1;\n}\n\n", 
      "name": "LoadAppLangResourceDLL", 
      "entry_point": "0x1400030df"
    }, 
    {
      "signature": "int __thiscall LoadSysPolicies(void)", 
      "disassembly": [
        {
          "address": "0x1400030e5", 
          "code": "JMP qword ptr [0x1400054e0]"
        }
      ], 
      "c_code": "\nint __thiscall CWinApp::LoadSysPolicies(CWinApp *this)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400030e5. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = LoadSysPolicies(this);\n  return iVar1;\n}\n\n", 
      "name": "LoadSysPolicies", 
      "entry_point": "0x1400030e5"
    }, 
    {
      "signature": "AFX_MSGMAP * __cdecl GetThisMessageMap(void)", 
      "disassembly": [
        {
          "address": "0x1400030eb", 
          "code": "JMP qword ptr [0x1400054c0]"
        }
      ], 
      "c_code": "\nAFX_MSGMAP * __cdecl CDialogEx::GetThisMessageMap(void)\n\n{\n  AFX_MSGMAP *pAVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400030eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pAVar1 = GetThisMessageMap();\n  return pAVar1;\n}\n\n", 
      "name": "GetThisMessageMap", 
      "entry_point": "0x1400030eb"
    }, 
    {
      "signature": "AFX_MODULE_STATE * __cdecl AfxGetModuleState(void)", 
      "disassembly": [
        {
          "address": "0x1400030f1", 
          "code": "JMP qword ptr [0x1400054a0]"
        }
      ], 
      "c_code": "\nAFX_MODULE_STATE * __cdecl AfxGetModuleState(void)\n\n{\n  AFX_MODULE_STATE *pAVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400030f1. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pAVar1 = AfxGetModuleState();\n  return pAVar1;\n}\n\n", 
      "name": "AfxGetModuleState", 
      "entry_point": "0x1400030f1"
    }, 
    {
      "signature": "int __thiscall OnInitDialog(void)", 
      "disassembly": [
        {
          "address": "0x1400030f7", 
          "code": "JMP qword ptr [0x140005490]"
        }
      ], 
      "c_code": "\nint __thiscall CDialog::OnInitDialog(CDialog *this)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400030f7. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = OnInitDialog(this);\n  return iVar1;\n}\n\n", 
      "name": "OnInitDialog", 
      "entry_point": "0x1400030f7"
    }, 
    {
      "signature": "void __thiscall OnOK(void)", 
      "disassembly": [
        {
          "address": "0x1400030fd", 
          "code": "JMP qword ptr [0x140005460]"
        }
      ], 
      "c_code": "\nvoid __thiscall CDialog::OnOK(CDialog *this)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x0001400030fd. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  OnOK(this);\n  return;\n}\n\n", 
      "name": "OnOK", 
      "entry_point": "0x1400030fd"
    }, 
    {
      "signature": "CRuntimeClass * __thiscall GetRuntimeClass(void)", 
      "disassembly": [
        {
          "address": "0x140003103", 
          "code": "JMP qword ptr [0x140005440]"
        }
      ], 
      "c_code": "\nCRuntimeClass * __thiscall CDialogEx::GetRuntimeClass(CDialogEx *this)\n\n{\n  CRuntimeClass *pCVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003103. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pCVar1 = GetRuntimeClass(this);\n  return pCVar1;\n}\n\n", 
      "name": "GetRuntimeClass", 
      "entry_point": "0x140003103"
    }, 
    {
      "signature": "int __thiscall OnCmdMsg(uint param_1, int param_2, void * param_3, AFX_CMDHANDLERINFO * param_4)", 
      "disassembly": [
        {
          "address": "0x140003109", 
          "code": "JMP qword ptr [0x140005438]"
        }
      ], 
      "c_code": "\nint __thiscall\nCDialog::OnCmdMsg(CDialog *this,uint param_1,int param_2,void *param_3,AFX_CMDHANDLERINFO *param_4)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003109. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = OnCmdMsg(this,param_1,param_2,param_3,param_4);\n  return iVar1;\n}\n\n", 
      "name": "OnCmdMsg", 
      "entry_point": "0x140003109"
    }, 
    {
      "signature": "void __thiscall OnFinalRelease(void)", 
      "disassembly": [
        {
          "address": "0x14000310f", 
          "code": "JMP qword ptr [0x140005430]"
        }
      ], 
      "c_code": "\nvoid __thiscall CWnd::OnFinalRelease(CWnd *this)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x00014000310f. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  OnFinalRelease(this);\n  return;\n}\n\n", 
      "name": "OnFinalRelease", 
      "entry_point": "0x14000310f"
    }, 
    {
      "signature": "AFX_INTERFACEMAP * __thiscall GetInterfaceMap(void)", 
      "disassembly": [
        {
          "address": "0x140003115", 
          "code": "JMP qword ptr [0x140005428]"
        }
      ], 
      "c_code": "\nAFX_INTERFACEMAP * __thiscall CWnd::GetInterfaceMap(CWnd *this)\n\n{\n  AFX_INTERFACEMAP *pAVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003115. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pAVar1 = GetInterfaceMap(this);\n  return pAVar1;\n}\n\n", 
      "name": "GetInterfaceMap", 
      "entry_point": "0x140003115"
    }, 
    {
      "signature": "void __thiscall PreSubclassWindow(void)", 
      "disassembly": [
        {
          "address": "0x14000311b", 
          "code": "JMP qword ptr [0x140005420]"
        }
      ], 
      "c_code": "\nvoid __thiscall CWnd::PreSubclassWindow(CWnd *this)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x00014000311b. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  PreSubclassWindow(this);\n  return;\n}\n\n", 
      "name": "PreSubclassWindow", 
      "entry_point": "0x14000311b"
    }, 
    {
      "signature": "int __thiscall Create(wchar_t * param_1, wchar_t * param_2, ulong param_3, tagRECT * param_4, CWnd * param_5, uint param_6, CCreateContext * param_7)", 
      "disassembly": [
        {
          "address": "0x140003121", 
          "code": "JMP qword ptr [0x140005418]"
        }
      ], 
      "c_code": "\nint __thiscall\nCWnd::Create(CWnd *this,wchar_t *param_1,wchar_t *param_2,ulong param_3,tagRECT *param_4,\n            CWnd *param_5,uint param_6,CCreateContext *param_7)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003121. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = Create(this,param_1,param_2,param_3,param_4,param_5,param_6,param_7);\n  return iVar1;\n}\n\n", 
      "name": "Create", 
      "entry_point": "0x140003121"
    }, 
    {
      "signature": "int __thiscall CreateEx(ulong param_1, wchar_t * param_2, wchar_t * param_3, ulong param_4, tagRECT * param_5, CWnd * param_6, uint param_7, void * param_8)", 
      "disassembly": [
        {
          "address": "0x140003127", 
          "code": "JMP qword ptr [0x140005410]"
        }
      ], 
      "c_code": "\nint __thiscall\nCWnd::CreateEx(CWnd *this,ulong param_1,wchar_t *param_2,wchar_t *param_3,ulong param_4,\n              tagRECT *param_5,CWnd *param_6,uint param_7,void *param_8)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003127. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = CreateEx(this,param_1,param_2,param_3,param_4,param_5,param_6,param_7,param_8);\n  return iVar1;\n}\n\n", 
      "name": "CreateEx", 
      "entry_point": "0x140003127"
    }, 
    {
      "signature": "int __thiscall CreateEx(ulong param_1, wchar_t * param_2, wchar_t * param_3, ulong param_4, int param_5, int param_6, int param_7, int param_8, HWND__ * param_9, HMENU__ * param_10, void * param_11)", 
      "disassembly": [
        {
          "address": "0x14000312d", 
          "code": "JMP qword ptr [0x140005408]"
        }
      ], 
      "c_code": "\nint __thiscall\nCWnd::CreateEx(CWnd *this,ulong param_1,wchar_t *param_2,wchar_t *param_3,ulong param_4,int param_5,\n              int param_6,int param_7,int param_8,HWND__ *param_9,HMENU__ *param_10,void *param_11)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x00014000312d. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = CreateEx(this,param_1,param_2,param_3,param_4,param_5,param_6,param_7,param_8,param_9,\n                   param_10,param_11);\n  return iVar1;\n}\n\n", 
      "name": "CreateEx", 
      "entry_point": "0x14000312d"
    }, 
    {
      "signature": "int __thiscall DestroyWindow(void)", 
      "disassembly": [
        {
          "address": "0x140003133", 
          "code": "JMP qword ptr [0x140005400]"
        }
      ], 
      "c_code": "\nint __thiscall CWnd::DestroyWindow(CWnd *this)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003133. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = DestroyWindow(this);\n  return iVar1;\n}\n\n", 
      "name": "DestroyWindow", 
      "entry_point": "0x140003133"
    }, 
    {
      "signature": "int __thiscall PreCreateWindow(tagCREATESTRUCTW * param_1)", 
      "disassembly": [
        {
          "address": "0x140003139", 
          "code": "JMP qword ptr [0x1400053f8]"
        }
      ], 
      "c_code": "\nint __thiscall CWnd::PreCreateWindow(CWnd *this,tagCREATESTRUCTW *param_1)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003139. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = PreCreateWindow(this,param_1);\n  return iVar1;\n}\n\n", 
      "name": "PreCreateWindow", 
      "entry_point": "0x140003139"
    }, 
    {
      "signature": "void __thiscall CalcWindowRect(tagRECT * param_1, uint param_2)", 
      "disassembly": [
        {
          "address": "0x14000313f", 
          "code": "JMP qword ptr [0x1400053f0]"
        }
      ], 
      "c_code": "\nvoid __thiscall CWnd::CalcWindowRect(CWnd *this,tagRECT *param_1,uint param_2)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x00014000313f. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  CalcWindowRect(this,param_1,param_2);\n  return;\n}\n\n", 
      "name": "CalcWindowRect", 
      "entry_point": "0x14000313f"
    }, 
    {
      "signature": "CMenu * __thiscall GetMenu(void)", 
      "disassembly": [
        {
          "address": "0x140003145", 
          "code": "JMP qword ptr [0x1400053e8]"
        }
      ], 
      "c_code": "\nCMenu * __thiscall CWnd::GetMenu(CWnd *this)\n\n{\n  CMenu *pCVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003145. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pCVar1 = GetMenu(this);\n  return pCVar1;\n}\n\n", 
      "name": "GetMenu", 
      "entry_point": "0x140003145"
    }, 
    {
      "signature": "int __thiscall SetMenu(CMenu * param_1)", 
      "disassembly": [
        {
          "address": "0x14000314b", 
          "code": "JMP qword ptr [0x1400053e0]"
        }
      ], 
      "c_code": "\nint __thiscall CWnd::SetMenu(CWnd *this,CMenu *param_1)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x00014000314b. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = SetMenu(this,param_1);\n  return iVar1;\n}\n\n", 
      "name": "SetMenu", 
      "entry_point": "0x14000314b"
    }, 
    {
      "signature": "__int64 __thiscall OnToolHitTest(CPoint param_1, tagTOOLINFOW * param_2)", 
      "disassembly": [
        {
          "address": "0x140003151", 
          "code": "JMP qword ptr [0x1400053d8]"
        }
      ], 
      "c_code": "\n__int64 __thiscall CWnd::OnToolHitTest(void)\n\n{\n  __int64 _Var1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003151. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  _Var1 = OnToolHitTest();\n  return _Var1;\n}\n\n", 
      "name": "OnToolHitTest", 
      "entry_point": "0x140003151"
    }, 
    {
      "signature": "CScrollBar * __thiscall GetScrollBarCtrl(int param_1)", 
      "disassembly": [
        {
          "address": "0x140003157", 
          "code": "JMP qword ptr [0x1400053d0]"
        }
      ], 
      "c_code": "\nCScrollBar * __thiscall CWnd::GetScrollBarCtrl(CWnd *this,int param_1)\n\n{\n  CScrollBar *pCVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003157. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pCVar1 = GetScrollBarCtrl(this,param_1);\n  return pCVar1;\n}\n\n", 
      "name": "GetScrollBarCtrl", 
      "entry_point": "0x140003157"
    }, 
    {
      "signature": "void __thiscall WinHelpW(__uint64 param_1, uint param_2)", 
      "disassembly": [
        {
          "address": "0x14000315d", 
          "code": "JMP qword ptr [0x1400053c8]"
        }
      ], 
      "c_code": "\nvoid __thiscall CWnd::WinHelpW(CWnd *this,__uint64 param_1,uint param_2)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x00014000315d. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  WinHelpW(this,param_1,param_2);\n  return;\n}\n\n", 
      "name": "WinHelpW", 
      "entry_point": "0x14000315d"
    }, 
    {
      "signature": "void __thiscall HtmlHelpW(__uint64 param_1, uint param_2)", 
      "disassembly": [
        {
          "address": "0x140003163", 
          "code": "JMP qword ptr [0x1400053c0]"
        }
      ], 
      "c_code": "\nvoid __thiscall CWnd::HtmlHelpW(CWnd *this,__uint64 param_1,uint param_2)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x000140003163. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  HtmlHelpW(this,param_1,param_2);\n  return;\n}\n\n", 
      "name": "HtmlHelpW", 
      "entry_point": "0x140003163"
    }, 
    {
      "signature": "void __thiscall WinHelpInternal(__uint64 param_1, uint param_2)", 
      "disassembly": [
        {
          "address": "0x140003169", 
          "code": "JMP qword ptr [0x1400053b8]"
        }
      ], 
      "c_code": "\nvoid __thiscall CWnd::WinHelpInternal(CWnd *this,__uint64 param_1,uint param_2)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x000140003169. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  WinHelpInternal(this,param_1,param_2);\n  return;\n}\n\n", 
      "name": "WinHelpInternal", 
      "entry_point": "0x140003169"
    }, 
    {
      "signature": "int __thiscall ContinueModal(void)", 
      "disassembly": [
        {
          "address": "0x14000316f", 
          "code": "JMP qword ptr [0x1400053b0]"
        }
      ], 
      "c_code": "\nint __thiscall CWnd::ContinueModal(CWnd *this)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x00014000316f. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = ContinueModal(this);\n  return iVar1;\n}\n\n", 
      "name": "ContinueModal", 
      "entry_point": "0x14000316f"
    }, 
    {
      "signature": "void __thiscall EndModalLoop(int param_1)", 
      "disassembly": [
        {
          "address": "0x140003175", 
          "code": "JMP qword ptr [0x1400053a8]"
        }
      ], 
      "c_code": "\nvoid __thiscall CWnd::EndModalLoop(CWnd *this,int param_1)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x000140003175. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  EndModalLoop(this,param_1);\n  return;\n}\n\n", 
      "name": "EndModalLoop", 
      "entry_point": "0x140003175"
    }, 
    {
      "signature": "void __thiscall OnDrawIconicThumbnailOrLivePreview(CDC * param_1, CRect param_2, CSize param_3, int param_4, int * param_5)", 
      "disassembly": [
        {
          "address": "0x14000317b", 
          "code": "JMP qword ptr [0x1400053a0]"
        }
      ], 
      "c_code": "\nvoid __thiscall CWnd::OnDrawIconicThumbnailOrLivePreview(void)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x00014000317b. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  OnDrawIconicThumbnailOrLivePreview();\n  return;\n}\n\n", 
      "name": "OnDrawIconicThumbnailOrLivePreview", 
      "entry_point": "0x14000317b"
    }, 
    {
      "signature": "long __thiscall EnsureStdObj(void)", 
      "disassembly": [
        {
          "address": "0x140003181", 
          "code": "JMP qword ptr [0x140005398]"
        }
      ], 
      "c_code": "\nlong __thiscall CWnd::EnsureStdObj(CWnd *this)\n\n{\n  long lVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003181. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  lVar1 = EnsureStdObj(this);\n  return lVar1;\n}\n\n", 
      "name": "EnsureStdObj", 
      "entry_point": "0x140003181"
    }, 
    {
      "signature": "long __thiscall get_accParent(IDispatch * * param_1)", 
      "disassembly": [
        {
          "address": "0x140003187", 
          "code": "JMP qword ptr [0x140005368]"
        }
      ], 
      "c_code": "\nlong __thiscall CWnd::get_accParent(CWnd *this,IDispatch **param_1)\n\n{\n  long lVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003187. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  lVar1 = get_accParent(this,param_1);\n  return lVar1;\n}\n\n", 
      "name": "get_accParent", 
      "entry_point": "0x140003187"
    }, 
    {
      "signature": "long __thiscall get_accChildCount(long * param_1)", 
      "disassembly": [
        {
          "address": "0x14000318d", 
          "code": "JMP qword ptr [0x140005878]"
        }
      ], 
      "c_code": "\nlong __thiscall CWnd::get_accChildCount(CWnd *this,long *param_1)\n\n{\n  long lVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x00014000318d. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  lVar1 = get_accChildCount(this,param_1);\n  return lVar1;\n}\n\n", 
      "name": "get_accChildCount", 
      "entry_point": "0x14000318d"
    }, 
    {
      "signature": "long __thiscall get_accChild(tagVARIANT param_1, IDispatch * * param_2)", 
      "disassembly": [
        {
          "address": "0x140003193", 
          "code": "JMP qword ptr [0x140005868]"
        }
      ], 
      "c_code": "\nlong __thiscall CWnd::get_accChild(void)\n\n{\n  long lVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003193. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  lVar1 = get_accChild();\n  return lVar1;\n}\n\n", 
      "name": "get_accChild", 
      "entry_point": "0x140003193"
    }, 
    {
      "signature": "long __thiscall get_accName(tagVARIANT param_1, wchar_t * * param_2)", 
      "disassembly": [
        {
          "address": "0x140003199", 
          "code": "JMP qword ptr [0x140005860]"
        }
      ], 
      "c_code": "\nlong __thiscall CWnd::get_accName(void)\n\n{\n  long lVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003199. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  lVar1 = get_accName();\n  return lVar1;\n}\n\n", 
      "name": "get_accName", 
      "entry_point": "0x140003199"
    }, 
    {
      "signature": "long __thiscall get_accValue(tagVARIANT param_1, wchar_t * * param_2)", 
      "disassembly": [
        {
          "address": "0x14000319f", 
          "code": "JMP qword ptr [0x140005858]"
        }
      ], 
      "c_code": "\nlong __thiscall CWnd::get_accValue(void)\n\n{\n  long lVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x00014000319f. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  lVar1 = get_accValue();\n  return lVar1;\n}\n\n", 
      "name": "get_accValue", 
      "entry_point": "0x14000319f"
    }, 
    {
      "signature": "long __thiscall get_accDescription(tagVARIANT param_1, wchar_t * * param_2)", 
      "disassembly": [
        {
          "address": "0x1400031a5", 
          "code": "JMP qword ptr [0x140005850]"
        }
      ], 
      "c_code": "\nlong __thiscall CWnd::get_accDescription(void)\n\n{\n  long lVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400031a5. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  lVar1 = get_accDescription();\n  return lVar1;\n}\n\n", 
      "name": "get_accDescription", 
      "entry_point": "0x1400031a5"
    }, 
    {
      "signature": "long __thiscall get_accRole(tagVARIANT param_1, tagVARIANT * param_2)", 
      "disassembly": [
        {
          "address": "0x1400031ab", 
          "code": "JMP qword ptr [0x140005848]"
        }
      ], 
      "c_code": "\nlong __thiscall CWnd::get_accRole(void)\n\n{\n  long lVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400031ab. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  lVar1 = get_accRole();\n  return lVar1;\n}\n\n", 
      "name": "get_accRole", 
      "entry_point": "0x1400031ab"
    }, 
    {
      "signature": "long __thiscall get_accState(tagVARIANT param_1, tagVARIANT * param_2)", 
      "disassembly": [
        {
          "address": "0x1400031b1", 
          "code": "JMP qword ptr [0x140005840]"
        }
      ], 
      "c_code": "\nlong __thiscall CWnd::get_accState(void)\n\n{\n  long lVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400031b1. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  lVar1 = get_accState();\n  return lVar1;\n}\n\n", 
      "name": "get_accState", 
      "entry_point": "0x1400031b1"
    }, 
    {
      "signature": "long __thiscall get_accHelp(tagVARIANT param_1, wchar_t * * param_2)", 
      "disassembly": [
        {
          "address": "0x1400031b7", 
          "code": "JMP qword ptr [0x140005838]"
        }
      ], 
      "c_code": "\nlong __thiscall CWnd::get_accHelp(void)\n\n{\n  long lVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400031b7. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  lVar1 = get_accHelp();\n  return lVar1;\n}\n\n", 
      "name": "get_accHelp", 
      "entry_point": "0x1400031b7"
    }, 
    {
      "signature": "long __thiscall get_accHelpTopic(wchar_t * * param_1, tagVARIANT param_2, long * param_3)", 
      "disassembly": [
        {
          "address": "0x1400031bd", 
          "code": "JMP qword ptr [0x140005830]"
        }
      ], 
      "c_code": "\nlong __thiscall CWnd::get_accHelpTopic(void)\n\n{\n  long lVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400031bd. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  lVar1 = get_accHelpTopic();\n  return lVar1;\n}\n\n", 
      "name": "get_accHelpTopic", 
      "entry_point": "0x1400031bd"
    }, 
    {
      "signature": "long __thiscall get_accKeyboardShortcut(tagVARIANT param_1, wchar_t * * param_2)", 
      "disassembly": [
        {
          "address": "0x1400031c3", 
          "code": "JMP qword ptr [0x140005828]"
        }
      ], 
      "c_code": "\nlong __thiscall CWnd::get_accKeyboardShortcut(void)\n\n{\n  long lVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400031c3. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  lVar1 = get_accKeyboardShortcut();\n  return lVar1;\n}\n\n", 
      "name": "get_accKeyboardShortcut", 
      "entry_point": "0x1400031c3"
    }, 
    {
      "signature": "long __thiscall get_accFocus(tagVARIANT * param_1)", 
      "disassembly": [
        {
          "address": "0x1400031c9", 
          "code": "JMP qword ptr [0x140005820]"
        }
      ], 
      "c_code": "\nlong __thiscall CWnd::get_accFocus(CWnd *this,tagVARIANT *param_1)\n\n{\n  long lVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400031c9. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  lVar1 = get_accFocus(this,param_1);\n  return lVar1;\n}\n\n", 
      "name": "get_accFocus", 
      "entry_point": "0x1400031c9"
    }, 
    {
      "signature": "long __thiscall get_accSelection(tagVARIANT * param_1)", 
      "disassembly": [
        {
          "address": "0x1400031cf", 
          "code": "JMP qword ptr [0x140005818]"
        }
      ], 
      "c_code": "\nlong __thiscall CWnd::get_accSelection(CWnd *this,tagVARIANT *param_1)\n\n{\n  long lVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400031cf. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  lVar1 = get_accSelection(this,param_1);\n  return lVar1;\n}\n\n", 
      "name": "get_accSelection", 
      "entry_point": "0x1400031cf"
    }, 
    {
      "signature": "long __thiscall get_accDefaultAction(tagVARIANT param_1, wchar_t * * param_2)", 
      "disassembly": [
        {
          "address": "0x1400031d5", 
          "code": "JMP qword ptr [0x140005810]"
        }
      ], 
      "c_code": "\nlong __thiscall CWnd::get_accDefaultAction(void)\n\n{\n  long lVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400031d5. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  lVar1 = get_accDefaultAction();\n  return lVar1;\n}\n\n", 
      "name": "get_accDefaultAction", 
      "entry_point": "0x1400031d5"
    }, 
    {
      "signature": "long __thiscall accSelect(long param_1, tagVARIANT param_2)", 
      "disassembly": [
        {
          "address": "0x1400031db", 
          "code": "JMP qword ptr [0x140005808]"
        }
      ], 
      "c_code": "\nlong __thiscall CWnd::accSelect(void)\n\n{\n  long lVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400031db. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  lVar1 = accSelect();\n  return lVar1;\n}\n\n", 
      "name": "accSelect", 
      "entry_point": "0x1400031db"
    }, 
    {
      "signature": "long __thiscall accLocation(long * param_1, long * param_2, long * param_3, long * param_4, tagVARIANT param_5)", 
      "disassembly": [
        {
          "address": "0x1400031e1", 
          "code": "JMP qword ptr [0x140005800]"
        }
      ], 
      "c_code": "\nlong __thiscall CWnd::accLocation(void)\n\n{\n  long lVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400031e1. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  lVar1 = accLocation();\n  return lVar1;\n}\n\n", 
      "name": "accLocation", 
      "entry_point": "0x1400031e1"
    }, 
    {
      "signature": "long __thiscall accNavigate(long param_1, tagVARIANT param_2, tagVARIANT * param_3)", 
      "disassembly": [
        {
          "address": "0x1400031e7", 
          "code": "JMP qword ptr [0x1400057f8]"
        }
      ], 
      "c_code": "\nlong __thiscall CWnd::accNavigate(void)\n\n{\n  long lVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400031e7. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  lVar1 = accNavigate();\n  return lVar1;\n}\n\n", 
      "name": "accNavigate", 
      "entry_point": "0x1400031e7"
    }, 
    {
      "signature": "long __thiscall accHitTest(long param_1, long param_2, tagVARIANT * param_3)", 
      "disassembly": [
        {
          "address": "0x1400031ed", 
          "code": "JMP qword ptr [0x1400057f0]"
        }
      ], 
      "c_code": "\nlong __thiscall CWnd::accHitTest(CWnd *this,long param_1,long param_2,tagVARIANT *param_3)\n\n{\n  long lVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400031ed. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  lVar1 = accHitTest(this,param_1,param_2,param_3);\n  return lVar1;\n}\n\n", 
      "name": "accHitTest", 
      "entry_point": "0x1400031ed"
    }, 
    {
      "signature": "long __thiscall accDoDefaultAction(tagVARIANT param_1)", 
      "disassembly": [
        {
          "address": "0x1400031f3", 
          "code": "JMP qword ptr [0x1400057e8]"
        }
      ], 
      "c_code": "\nlong __thiscall CWnd::accDoDefaultAction(void)\n\n{\n  long lVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400031f3. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  lVar1 = accDoDefaultAction();\n  return lVar1;\n}\n\n", 
      "name": "accDoDefaultAction", 
      "entry_point": "0x1400031f3"
    }, 
    {
      "signature": "long __thiscall put_accName(tagVARIANT param_1, wchar_t * param_2)", 
      "disassembly": [
        {
          "address": "0x1400031f9", 
          "code": "JMP qword ptr [0x1400057e0]"
        }
      ], 
      "c_code": "\nlong __thiscall CWnd::put_accName(void)\n\n{\n  long lVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400031f9. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  lVar1 = put_accName();\n  return lVar1;\n}\n\n", 
      "name": "put_accName", 
      "entry_point": "0x1400031f9"
    }, 
    {
      "signature": "long __thiscall put_accValue(tagVARIANT param_1, wchar_t * param_2)", 
      "disassembly": [
        {
          "address": "0x1400031ff", 
          "code": "JMP qword ptr [0x1400057d8]"
        }
      ], 
      "c_code": "\nlong __thiscall CWnd::put_accValue(void)\n\n{\n  long lVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400031ff. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  lVar1 = put_accValue();\n  return lVar1;\n}\n\n", 
      "name": "put_accValue", 
      "entry_point": "0x1400031ff"
    }, 
    {
      "signature": "long __thiscall SetProxy(IAccessibleProxy * param_1)", 
      "disassembly": [
        {
          "address": "0x140003205", 
          "code": "JMP qword ptr [0x1400057d0]"
        }
      ], 
      "c_code": "\nlong __thiscall CWnd::SetProxy(CWnd *this,IAccessibleProxy *param_1)\n\n{\n  long lVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003205. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  lVar1 = SetProxy(this,param_1);\n  return lVar1;\n}\n\n", 
      "name": "SetProxy", 
      "entry_point": "0x140003205"
    }, 
    {
      "signature": "long __thiscall CreateAccessibleProxy(__uint64 param_1, __int64 param_2, __int64 * param_3)", 
      "disassembly": [
        {
          "address": "0x14000320b", 
          "code": "JMP qword ptr [0x1400057c8]"
        }
      ], 
      "c_code": "\nlong __thiscall\nCWnd::CreateAccessibleProxy(CWnd *this,__uint64 param_1,__int64 param_2,__int64 *param_3)\n\n{\n  long lVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x00014000320b. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  lVar1 = CreateAccessibleProxy(this,param_1,param_2,param_3);\n  return lVar1;\n}\n\n", 
      "name": "CreateAccessibleProxy", 
      "entry_point": "0x14000320b"
    }, 
    {
      "signature": "int __thiscall OnCommand(__uint64 param_1, __int64 param_2)", 
      "disassembly": [
        {
          "address": "0x140003211", 
          "code": "JMP qword ptr [0x1400057c0]"
        }
      ], 
      "c_code": "\nint __thiscall CDialogEx::OnCommand(CDialogEx *this,__uint64 param_1,__int64 param_2)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003211. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = OnCommand(this,param_1,param_2);\n  return iVar1;\n}\n\n", 
      "name": "OnCommand", 
      "entry_point": "0x140003211"
    }, 
    {
      "signature": "int __thiscall OnNotify(__uint64 param_1, __int64 param_2, __int64 * param_3)", 
      "disassembly": [
        {
          "address": "0x140003217", 
          "code": "JMP qword ptr [0x1400057b8]"
        }
      ], 
      "c_code": "\nint __thiscall CWnd::OnNotify(CWnd *this,__uint64 param_1,__int64 param_2,__int64 *param_3)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003217. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = OnNotify(this,param_1,param_2,param_3);\n  return iVar1;\n}\n\n", 
      "name": "OnNotify", 
      "entry_point": "0x140003217"
    }, 
    {
      "signature": "_func___int64_HWND___ptr_uint___uint64___int64 * * __thiscall GetSuperWndProcAddr(void)", 
      "disassembly": [
        {
          "address": "0x14000321d", 
          "code": "JMP qword ptr [0x1400057b0]"
        }
      ], 
      "c_code": "\n_func___int64_HWND___ptr_uint___uint64___int64 ** __thiscall CWnd::GetSuperWndProcAddr(CWnd *this)\n\n{\n  _func___int64_HWND___ptr_uint___uint64___int64 **pp_Var1;\n  \n                    /* WARNING: Could not recover jumptable at 0x00014000321d. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pp_Var1 = GetSuperWndProcAddr(this);\n  return pp_Var1;\n}\n\n", 
      "name": "GetSuperWndProcAddr", 
      "entry_point": "0x14000321d"
    }, 
    {
      "signature": "int __thiscall PreTranslateMessage(tagMSG * param_1)", 
      "disassembly": [
        {
          "address": "0x140003223", 
          "code": "JMP qword ptr [0x1400057a8]"
        }
      ], 
      "c_code": "\nint __thiscall CDialogEx::PreTranslateMessage(CDialogEx *this,tagMSG *param_1)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003223. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = PreTranslateMessage(this,param_1);\n  return iVar1;\n}\n\n", 
      "name": "PreTranslateMessage", 
      "entry_point": "0x140003223"
    }, 
    {
      "signature": "int __thiscall OnAmbientProperty(COleControlSite * param_1, long param_2, tagVARIANT * param_3)", 
      "disassembly": [
        {
          "address": "0x140003229", 
          "code": "JMP qword ptr [0x1400057a0]"
        }
      ], 
      "c_code": "\nint __thiscall\nCWnd::OnAmbientProperty(CWnd *this,COleControlSite *param_1,long param_2,tagVARIANT *param_3)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003229. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = OnAmbientProperty(this,param_1,param_2,param_3);\n  return iVar1;\n}\n\n", 
      "name": "OnAmbientProperty", 
      "entry_point": "0x140003229"
    }, 
    {
      "signature": "__int64 __thiscall WindowProc(uint param_1, __uint64 param_2, __int64 param_3)", 
      "disassembly": [
        {
          "address": "0x14000322f", 
          "code": "JMP qword ptr [0x140005798]"
        }
      ], 
      "c_code": "\n__int64 __thiscall CWnd::WindowProc(CWnd *this,uint param_1,__uint64 param_2,__int64 param_3)\n\n{\n  __int64 _Var1;\n  \n                    /* WARNING: Could not recover jumptable at 0x00014000322f. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  _Var1 = WindowProc(this,param_1,param_2,param_3);\n  return _Var1;\n}\n\n", 
      "name": "WindowProc", 
      "entry_point": "0x14000322f"
    }, 
    {
      "signature": "int __thiscall OnWndMsg(uint param_1, __uint64 param_2, __int64 param_3, __int64 * param_4)", 
      "disassembly": [
        {
          "address": "0x140003235", 
          "code": "JMP qword ptr [0x140005790]"
        }
      ], 
      "c_code": "\nint __thiscall\nCWnd::OnWndMsg(CWnd *this,uint param_1,__uint64 param_2,__int64 param_3,__int64 *param_4)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003235. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = OnWndMsg(this,param_1,param_2,param_3,param_4);\n  return iVar1;\n}\n\n", 
      "name": "OnWndMsg", 
      "entry_point": "0x140003235"
    }, 
    {
      "signature": "__int64 __thiscall DefWindowProcW(uint param_1, __uint64 param_2, __int64 param_3)", 
      "disassembly": [
        {
          "address": "0x14000323b", 
          "code": "JMP qword ptr [0x140005788]"
        }
      ], 
      "c_code": "\n__int64 __thiscall CWnd::DefWindowProcW(CWnd *this,uint param_1,__uint64 param_2,__int64 param_3)\n\n{\n  __int64 _Var1;\n  \n                    /* WARNING: Could not recover jumptable at 0x00014000323b. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  _Var1 = DefWindowProcW(this,param_1,param_2,param_3);\n  return _Var1;\n}\n\n", 
      "name": "DefWindowProcW", 
      "entry_point": "0x14000323b"
    }, 
    {
      "signature": "void __thiscall PostNcDestroy(void)", 
      "disassembly": [
        {
          "address": "0x140003241", 
          "code": "JMP qword ptr [0x140005780]"
        }
      ], 
      "c_code": "\nvoid __thiscall CWnd::PostNcDestroy(CWnd *this)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x000140003241. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  PostNcDestroy(this);\n  return;\n}\n\n", 
      "name": "PostNcDestroy", 
      "entry_point": "0x140003241"
    }, 
    {
      "signature": "int __thiscall OnChildNotify(uint param_1, __uint64 param_2, __int64 param_3, __int64 * param_4)", 
      "disassembly": [
        {
          "address": "0x140003247", 
          "code": "JMP qword ptr [0x140005778]"
        }
      ], 
      "c_code": "\nint __thiscall\nCWnd::OnChildNotify(CWnd *this,uint param_1,__uint64 param_2,__int64 param_3,__int64 *param_4)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003247. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = OnChildNotify(this,param_1,param_2,param_3,param_4);\n  return iVar1;\n}\n\n", 
      "name": "OnChildNotify", 
      "entry_point": "0x140003247"
    }, 
    {
      "signature": "int __thiscall OnTouchInputs(uint param_1, tagTOUCHINPUT * param_2)", 
      "disassembly": [
        {
          "address": "0x14000324d", 
          "code": "JMP qword ptr [0x140005770]"
        }
      ], 
      "c_code": "\nint __thiscall CWnd::OnTouchInputs(CWnd *this,uint param_1,tagTOUCHINPUT *param_2)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x00014000324d. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = OnTouchInputs(this,param_1,param_2);\n  return iVar1;\n}\n\n", 
      "name": "OnTouchInputs", 
      "entry_point": "0x14000324d"
    }, 
    {
      "signature": "int __thiscall OnTouchInput(CPoint param_1, int param_2, int param_3, tagTOUCHINPUT * param_4)", 
      "disassembly": [
        {
          "address": "0x140003253", 
          "code": "JMP qword ptr [0x140005768]"
        }
      ], 
      "c_code": "\nint __thiscall CWnd::OnTouchInput(void)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003253. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = OnTouchInput();\n  return iVar1;\n}\n\n", 
      "name": "OnTouchInput", 
      "entry_point": "0x140003253"
    }, 
    {
      "signature": "ulong __thiscall GetGestureStatus(CPoint param_1)", 
      "disassembly": [
        {
          "address": "0x140003259", 
          "code": "JMP qword ptr [0x140005760]"
        }
      ], 
      "c_code": "\nulong __thiscall CWnd::GetGestureStatus(void)\n\n{\n  ulong uVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003259. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  uVar1 = GetGestureStatus();\n  return uVar1;\n}\n\n", 
      "name": "GetGestureStatus", 
      "entry_point": "0x140003259"
    }, 
    {
      "signature": "int __thiscall OnGestureZoom(CPoint param_1, long param_2)", 
      "disassembly": [
        {
          "address": "0x14000325f", 
          "code": "JMP qword ptr [0x140005758]"
        }
      ], 
      "c_code": "\nint __thiscall CWnd::OnGestureZoom(void)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x00014000325f. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = OnGestureZoom();\n  return iVar1;\n}\n\n", 
      "name": "OnGestureZoom", 
      "entry_point": "0x14000325f"
    }, 
    {
      "signature": "int __thiscall OnGesturePan(CPoint param_1, CPoint param_2)", 
      "disassembly": [
        {
          "address": "0x140003265", 
          "code": "JMP qword ptr [0x140005750]"
        }
      ], 
      "c_code": "\nint __thiscall CWnd::OnGesturePan(void)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003265. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = OnGesturePan();\n  return iVar1;\n}\n\n", 
      "name": "OnGesturePan", 
      "entry_point": "0x140003265"
    }, 
    {
      "signature": "int __thiscall OnGestureRotate(CPoint param_1, double param_2)", 
      "disassembly": [
        {
          "address": "0x14000326b", 
          "code": "JMP qword ptr [0x140005748]"
        }
      ], 
      "c_code": "\nint __thiscall CWnd::OnGestureRotate(void)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x00014000326b. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = OnGestureRotate();\n  return iVar1;\n}\n\n", 
      "name": "OnGestureRotate", 
      "entry_point": "0x14000326b"
    }, 
    {
      "signature": "int __thiscall OnGestureTwoFingerTap(CPoint param_1)", 
      "disassembly": [
        {
          "address": "0x140003271", 
          "code": "JMP qword ptr [0x1400056f8]"
        }
      ], 
      "c_code": "\nint __thiscall CWnd::OnGestureTwoFingerTap(void)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003271. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = OnGestureTwoFingerTap();\n  return iVar1;\n}\n\n", 
      "name": "OnGestureTwoFingerTap", 
      "entry_point": "0x140003271"
    }, 
    {
      "signature": "int __thiscall OnGesturePressAndTap(CPoint param_1, long param_2)", 
      "disassembly": [
        {
          "address": "0x140003277", 
          "code": "JMP qword ptr [0x140005528]"
        }
      ], 
      "c_code": "\nint __thiscall CWnd::OnGesturePressAndTap(void)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003277. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = OnGesturePressAndTap();\n  return iVar1;\n}\n\n", 
      "name": "OnGesturePressAndTap", 
      "entry_point": "0x140003277"
    }, 
    {
      "signature": "void __thiscall ResizeDynamicLayout(void)", 
      "disassembly": [
        {
          "address": "0x14000327d", 
          "code": "JMP qword ptr [0x1400055b8]"
        }
      ], 
      "c_code": "\nvoid __thiscall CWnd::ResizeDynamicLayout(CWnd *this)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x00014000327d. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  ResizeDynamicLayout(this);\n  return;\n}\n\n", 
      "name": "ResizeDynamicLayout", 
      "entry_point": "0x14000327d"
    }, 
    {
      "signature": "int __thiscall CheckAutoCenter(void)", 
      "disassembly": [
        {
          "address": "0x140003283", 
          "code": "JMP qword ptr [0x140005480]"
        }
      ], 
      "c_code": "\nint __thiscall CDialog::CheckAutoCenter(CDialog *this)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003283. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = CheckAutoCenter(this);\n  return iVar1;\n}\n\n", 
      "name": "CheckAutoCenter", 
      "entry_point": "0x140003283"
    }, 
    {
      "signature": "int __thiscall IsFrameWnd(void)", 
      "disassembly": [
        {
          "address": "0x140003289", 
          "code": "JMP qword ptr [0x140005340]"
        }
      ], 
      "c_code": "\nint __thiscall CWnd::IsFrameWnd(CWnd *this)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003289. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = IsFrameWnd(this);\n  return iVar1;\n}\n\n", 
      "name": "IsFrameWnd", 
      "entry_point": "0x140003289"
    }, 
    {
      "signature": "int __thiscall CreateControlContainer(COleControlContainer * * param_1)", 
      "disassembly": [
        {
          "address": "0x14000328f", 
          "code": "JMP qword ptr [0x140005348]"
        }
      ], 
      "c_code": "\nint __thiscall CWnd::CreateControlContainer(CWnd *this,COleControlContainer **param_1)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x00014000328f. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = CreateControlContainer(this,param_1);\n  return iVar1;\n}\n\n", 
      "name": "CreateControlContainer", 
      "entry_point": "0x14000328f"
    }, 
    {
      "signature": "int __thiscall CreateControlSite(COleControlContainer * param_1, COleControlSite * * param_2, uint param_3, _GUID * param_4)", 
      "disassembly": [
        {
          "address": "0x140003295", 
          "code": "JMP qword ptr [0x140005350]"
        }
      ], 
      "c_code": "\nint __thiscall\nCWnd::CreateControlSite\n          (CWnd *this,COleControlContainer *param_1,COleControlSite **param_2,uint param_3,\n          _GUID *param_4)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140003295. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = CreateControlSite(this,param_1,param_2,param_3,param_4);\n  return iVar1;\n}\n\n", 
      "name": "CreateControlSite", 
      "entry_point": "0x140003295"
    }, 
    {
      "signature": "int __thiscall SetOccDialogInfo(_AFX_OCC_DIALOG_INFO * param_1)", 
      "disassembly": [
        {
          "address": "0x14000329b", 
          "code": "JMP qword ptr [0x140005358]"
        }
      ], 
      "c_code": "\nint __thiscall CDialog::SetOccDialogInfo(CDialog *this,_AFX_OCC_DIALOG_INFO *param_1)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x00014000329b. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = SetOccDialogInfo(this,param_1);\n  return iVar1;\n}\n\n", 
      "name": "SetOccDialogInfo", 
      "entry_point": "0x14000329b"
    }, 
    {
      "signature": "_AFX_OCC_DIALOG_INFO * __thiscall GetOccDialogInfo(void)", 
      "disassembly": [
        {
          "address": "0x1400032a1", 
          "code": "JMP qword ptr [0x140005360]"
        }
      ], 
      "c_code": "\n_AFX_OCC_DIALOG_INFO * __thiscall CDialog::GetOccDialogInfo(CDialog *this)\n\n{\n  _AFX_OCC_DIALOG_INFO *p_Var1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400032a1. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  p_Var1 = GetOccDialogInfo(this);\n  return p_Var1;\n}\n\n", 
      "name": "GetOccDialogInfo", 
      "entry_point": "0x1400032a1"
    }, 
    {
      "signature": "int __thiscall Create(wchar_t * param_1, CWnd * param_2)", 
      "disassembly": [
        {
          "address": "0x1400032a7", 
          "code": "JMP qword ptr [0x140005898]"
        }
      ], 
      "c_code": "\nint __thiscall CDialog::Create(CDialog *this,wchar_t *param_1,CWnd *param_2)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400032a7. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = Create(this,param_1,param_2);\n  return iVar1;\n}\n\n", 
      "name": "Create", 
      "entry_point": "0x1400032a7"
    }, 
    {
      "signature": "int __thiscall CreateIndirect(void * param_1, CWnd * param_2)", 
      "disassembly": [
        {
          "address": "0x1400032ad", 
          "code": "JMP qword ptr [0x140005370]"
        }
      ], 
      "c_code": "\nint __thiscall CDialog::CreateIndirect(CDialog *this,void *param_1,CWnd *param_2)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400032ad. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = CreateIndirect(this,param_1,param_2);\n  return iVar1;\n}\n\n", 
      "name": "CreateIndirect", 
      "entry_point": "0x1400032ad"
    }, 
    {
      "signature": "int __thiscall CreateIndirect(DLGTEMPLATE * param_1, CWnd * param_2, void * param_3)", 
      "disassembly": [
        {
          "address": "0x1400032b3", 
          "code": "JMP qword ptr [0x140005378]"
        }
      ], 
      "c_code": "\nint __thiscall\nCDialog::CreateIndirect(CDialog *this,DLGTEMPLATE *param_1,CWnd *param_2,void *param_3)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400032b3. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = CreateIndirect(this,param_1,param_2,param_3);\n  return iVar1;\n}\n\n", 
      "name": "CreateIndirect", 
      "entry_point": "0x1400032b3"
    }, 
    {
      "signature": "void __thiscall OnSetFont(CFont * param_1)", 
      "disassembly": [
        {
          "address": "0x1400032b9", 
          "code": "JMP qword ptr [0x140005380]"
        }
      ], 
      "c_code": "\nvoid __thiscall CDialog::OnSetFont(CDialog *this,CFont *param_1)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x0001400032b9. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  OnSetFont(this,param_1);\n  return;\n}\n\n", 
      "name": "OnSetFont", 
      "entry_point": "0x1400032b9"
    }, 
    {
      "signature": "void __thiscall OnCancel(void)", 
      "disassembly": [
        {
          "address": "0x1400032bf", 
          "code": "JMP qword ptr [0x140005388]"
        }
      ], 
      "c_code": "\nvoid __thiscall CDialog::OnCancel(CDialog *this)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x0001400032bf. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  OnCancel(this);\n  return;\n}\n\n", 
      "name": "OnCancel", 
      "entry_point": "0x1400032bf"
    }, 
    {
      "signature": "void __thiscall PreInitDialog(void)", 
      "disassembly": [
        {
          "address": "0x1400032c5", 
          "code": "JMP qword ptr [0x140005390]"
        }
      ], 
      "c_code": "\nvoid __thiscall CDialog::PreInitDialog(CDialog *this)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x0001400032c5. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  PreInitDialog(this);\n  return;\n}\n\n", 
      "name": "PreInitDialog", 
      "entry_point": "0x1400032c5"
    }, 
    {
      "signature": "undefined __fastcall FUN_1400032cc(void)", 
      "disassembly": [
        {
          "address": "0x1400032cc", 
          "code": "PUSH RBX"
        }, 
        {
          "address": "0x1400032ce", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x1400032d2", 
          "code": "MOV ECX,0x2"
        }, 
        {
          "address": "0x1400032d7", 
          "code": "CALL 0x1400040c2"
        }, 
        {
          "address": "0x1400032dc", 
          "code": "CALL 0x140003898"
        }, 
        {
          "address": "0x1400032e1", 
          "code": "MOV ECX,EAX"
        }, 
        {
          "address": "0x1400032e3", 
          "code": "CALL 0x1400040f8"
        }, 
        {
          "address": "0x1400032e8", 
          "code": "CALL 0x140001370"
        }, 
        {
          "address": "0x1400032ed", 
          "code": "MOV EBX,EAX"
        }, 
        {
          "address": "0x1400032ef", 
          "code": "CALL 0x14000411c"
        }, 
        {
          "address": "0x1400032f4", 
          "code": "MOV ECX,0x1"
        }, 
        {
          "address": "0x1400032f9", 
          "code": "MOV dword ptr [RAX],EBX"
        }, 
        {
          "address": "0x1400032fb", 
          "code": "CALL 0x1400035e8"
        }, 
        {
          "address": "0x140003300", 
          "code": "TEST AL,AL"
        }, 
        {
          "address": "0x140003302", 
          "code": "JZ 0x140003377"
        }, 
        {
          "address": "0x140003304", 
          "code": "CALL 0x140003b50"
        }, 
        {
          "address": "0x140003309", 
          "code": "LEA RCX,[0x140003b8c]"
        }, 
        {
          "address": "0x140003310", 
          "code": "CALL 0x140003798"
        }, 
        {
          "address": "0x140003315", 
          "code": "CALL 0x140003890"
        }, 
        {
          "address": "0x14000331a", 
          "code": "MOV ECX,EAX"
        }, 
        {
          "address": "0x14000331c", 
          "code": "CALL 0x1400040ce"
        }, 
        {
          "address": "0x140003321", 
          "code": "TEST EAX,EAX"
        }, 
        {
          "address": "0x140003323", 
          "code": "JNZ 0x140003377"
        }, 
        {
          "address": "0x140003325", 
          "code": "CALL 0x1400038a0"
        }, 
        {
          "address": "0x14000332a", 
          "code": "CALL 0x1400038e0"
        }, 
        {
          "address": "0x14000332f", 
          "code": "TEST EAX,EAX"
        }, 
        {
          "address": "0x140003331", 
          "code": "JZ 0x14000333f"
        }, 
        {
          "address": "0x140003333", 
          "code": "LEA RCX,[0x140001370]"
        }, 
        {
          "address": "0x14000333a", 
          "code": "CALL 0x1400040c8"
        }, 
        {
          "address": "0x14000333f", 
          "code": "CALL 0x140001350"
        }, 
        {
          "address": "0x140003344", 
          "code": "CALL 0x140001350"
        }, 
        {
          "address": "0x140003349", 
          "code": "CALL 0x140001370"
        }, 
        {
          "address": "0x14000334e", 
          "code": "MOV ECX,EAX"
        }, 
        {
          "address": "0x140003350", 
          "code": "CALL 0x140004110"
        }, 
        {
          "address": "0x140003355", 
          "code": "CALL 0x1400038b0"
        }, 
        {
          "address": "0x14000335a", 
          "code": "TEST AL,AL"
        }, 
        {
          "address": "0x14000335c", 
          "code": "JZ 0x140003363"
        }, 
        {
          "address": "0x14000335e", 
          "code": "CALL 0x1400040d4"
        }, 
        {
          "address": "0x140003363", 
          "code": "CALL 0x140001370"
        }, 
        {
          "address": "0x140003368", 
          "code": "CALL 0x140003a88"
        }, 
        {
          "address": "0x14000336d", 
          "code": "TEST EAX,EAX"
        }, 
        {
          "address": "0x14000336f", 
          "code": "JNZ 0x140003377"
        }, 
        {
          "address": "0x140003371", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x140003375", 
          "code": "POP RBX"
        }, 
        {
          "address": "0x140003376", 
          "code": "RET"
        }, 
        {
          "address": "0x140003377", 
          "code": "MOV ECX,0x7"
        }, 
        {
          "address": "0x14000337c", 
          "code": "CALL 0x140003904"
        }, 
        {
          "address": "0x140003381", 
          "code": "INT3"
        }
      ], 
      "c_code": "\nvoid FUN_1400032cc(void)\n\n{\n  code *pcVar1;\n  bool bVar2;\n  char cVar3;\n  int iVar4;\n  undefined8 uVar5;\n  undefined4 *puVar6;\n  ulonglong uVar7;\n  undefined7 extraout_var;\n  \n  _set_app_type(2);\n  uVar5 = FUN_140003898();\n  _set_fmode((int)uVar5);\n  uVar5 = FUN_140001370();\n  puVar6 = (undefined4 *)__p__commode();\n  *puVar6 = (int)uVar5;\n  uVar5 = __scrt_initialize_onexit_tables(1);\n  if ((char)uVar5 != '\\0') {\n    FUN_140003b50();\n    atexit((_func_5014 *)&LAB_140003b8c);\n    uVar7 = FUN_140003890();\n    iVar4 = _configure_wide_argv(uVar7 & 0xffffffff);\n    if (iVar4 == 0) {\n      FUN_1400038a0();\n      bVar2 = FUN_1400038e0();\n      if ((int)CONCAT71(extraout_var,bVar2) != 0) {\n        __setusermatherr(FUN_140001370);\n      }\n      _guard_check_icall();\n      _guard_check_icall();\n      uVar5 = FUN_140001370();\n      _configthreadlocale((int)uVar5);\n      cVar3 = FUN_1400038b0();\n      if (cVar3 != '\\0') {\n        _initialize_wide_environment();\n      }\n      FUN_140001370();\n      uVar5 = thunk_FUN_140001370();\n      if ((int)uVar5 == 0) {\n        return;\n      }\n    }\n  }\n  FUN_140003904(7);\n  pcVar1 = (code *)swi(3);\n  (*pcVar1)();\n  return;\n}\n\n", 
      "name": "FUN_1400032cc", 
      "entry_point": "0x1400032cc"
    }, 
    {
      "signature": "undefined8 __fastcall FUN_140003384(void)", 
      "disassembly": [
        {
          "address": "0x140003384", 
          "code": "SUB RSP,0x28"
        }, 
        {
          "address": "0x140003388", 
          "code": "CALL 0x1400038c4"
        }, 
        {
          "address": "0x14000338d", 
          "code": "XOR EAX,EAX"
        }, 
        {
          "address": "0x14000338f", 
          "code": "ADD RSP,0x28"
        }, 
        {
          "address": "0x140003393", 
          "code": "RET"
        }
      ], 
      "c_code": "\nundefined8 FUN_140003384(void)\n\n{\n  FUN_1400038c4();\n  return 0;\n}\n\n", 
      "name": "FUN_140003384", 
      "entry_point": "0x140003384"
    }, 
    {
      "signature": "int __fastcall FUN_1400033b0(void)", 
      "disassembly": [
        {
          "address": "0x1400033b0", 
          "code": "MOV qword ptr [RSP + 0x8],RBX"
        }, 
        {
          "address": "0x1400033b5", 
          "code": "PUSH RDI"
        }, 
        {
          "address": "0x1400033b6", 
          "code": "SUB RSP,0x30"
        }, 
        {
          "address": "0x1400033ba", 
          "code": "MOV ECX,0x1"
        }, 
        {
          "address": "0x1400033bf", 
          "code": "CALL 0x1400035ac"
        }, 
        {
          "address": "0x1400033c4", 
          "code": "TEST AL,AL"
        }, 
        {
          "address": "0x1400033c6", 
          "code": "JZ 0x1400034fc"
        }, 
        {
          "address": "0x1400033cc", 
          "code": "XOR DIL,DIL"
        }, 
        {
          "address": "0x1400033cf", 
          "code": "MOV byte ptr [RSP + 0x20],DIL"
        }, 
        {
          "address": "0x1400033d4", 
          "code": "CALL 0x140003570"
        }, 
        {
          "address": "0x1400033d9", 
          "code": "MOV BL,AL"
        }, 
        {
          "address": "0x1400033db", 
          "code": "MOV ECX,dword ptr [0x14000a5d8]"
        }, 
        {
          "address": "0x1400033e1", 
          "code": "CMP ECX,0x1"
        }, 
        {
          "address": "0x1400033e4", 
          "code": "JZ 0x140003507"
        }, 
        {
          "address": "0x1400033ea", 
          "code": "TEST ECX,ECX"
        }, 
        {
          "address": "0x1400033ec", 
          "code": "JNZ 0x140003438"
        }, 
        {
          "address": "0x1400033ee", 
          "code": "MOV dword ptr [0x14000a5d8],0x1"
        }, 
        {
          "address": "0x1400033f8", 
          "code": "LEA RDX,[0x140005930]"
        }, 
        {
          "address": "0x1400033ff", 
          "code": "LEA RCX,[0x140005918]"
        }, 
        {
          "address": "0x140003406", 
          "code": "CALL 0x1400040e6"
        }, 
        {
          "address": "0x14000340b", 
          "code": "TEST EAX,EAX"
        }, 
        {
          "address": "0x14000340d", 
          "code": "JZ 0x140003419"
        }, 
        {
          "address": "0x14000340f", 
          "code": "MOV EAX,0xff"
        }, 
        {
          "address": "0x140003414", 
          "code": "JMP 0x1400034f1"
        }, 
        {
          "address": "0x140003419", 
          "code": "LEA RDX,[0x140005910]"
        }, 
        {
          "address": "0x140003420", 
          "code": "LEA RCX,[0x1400058e8]"
        }, 
        {
          "address": "0x140003427", 
          "code": "CALL 0x1400040e0"
        }, 
        {
          "address": "0x14000342c", 
          "code": "MOV dword ptr [0x14000a5d8],0x2"
        }, 
        {
          "address": "0x140003436", 
          "code": "JMP 0x140003440"
        }, 
        {
          "address": "0x140003438", 
          "code": "MOV DIL,0x1"
        }, 
        {
          "address": "0x14000343b", 
          "code": "MOV byte ptr [RSP + 0x20],DIL"
        }, 
        {
          "address": "0x140003440", 
          "code": "MOV CL,BL"
        }, 
        {
          "address": "0x140003442", 
          "code": "CALL 0x14000370c"
        }, 
        {
          "address": "0x140003447", 
          "code": "CALL 0x1400038ec"
        }, 
        {
          "address": "0x14000344c", 
          "code": "MOV RBX,RAX"
        }, 
        {
          "address": "0x14000344f", 
          "code": "CMP qword ptr [RAX],0x0"
        }, 
        {
          "address": "0x140003453", 
          "code": "JZ 0x140003473"
        }, 
        {
          "address": "0x140003455", 
          "code": "MOV RCX,RAX"
        }, 
        {
          "address": "0x140003458", 
          "code": "CALL 0x140003674"
        }, 
        {
          "address": "0x14000345d", 
          "code": "TEST AL,AL"
        }, 
        {
          "address": "0x14000345f", 
          "code": "JZ 0x140003473"
        }, 
        {
          "address": "0x140003461", 
          "code": "XOR R8D,R8D"
        }, 
        {
          "address": "0x140003464", 
          "code": "LEA EDX,[R8 + 0x2]"
        }, 
        {
          "address": "0x140003468", 
          "code": "XOR ECX,ECX"
        }, 
        {
          "address": "0x14000346a", 
          "code": "MOV RAX,qword ptr [RBX]"
        }, 
        {
          "address": "0x14000346d", 
          "code": "CALL qword ptr [0x1400058c0]"
        }, 
        {
          "address": "0x140003473", 
          "code": "CALL 0x1400038f4"
        }, 
        {
          "address": "0x140003478", 
          "code": "MOV RBX,RAX"
        }, 
        {
          "address": "0x14000347b", 
          "code": "CMP qword ptr [RAX],0x0"
        }, 
        {
          "address": "0x14000347f", 
          "code": "JZ 0x140003495"
        }, 
        {
          "address": "0x140003481", 
          "code": "MOV RCX,RAX"
        }, 
        {
          "address": "0x140003484", 
          "code": "CALL 0x140003674"
        }, 
        {
          "address": "0x140003489", 
          "code": "TEST AL,AL"
        }, 
        {
          "address": "0x14000348b", 
          "code": "JZ 0x140003495"
        }, 
        {
          "address": "0x14000348d", 
          "code": "MOV RCX,qword ptr [RBX]"
        }, 
        {
          "address": "0x140003490", 
          "code": "CALL 0x14000410a"
        }, 
        {
          "address": "0x140003495", 
          "code": "CALL 0x140003a4c"
        }, 
        {
          "address": "0x14000349a", 
          "code": "MOVZX EBX,AX"
        }, 
        {
          "address": "0x14000349d", 
          "code": "CALL 0x1400040da"
        }, 
        {
          "address": "0x1400034a2", 
          "code": "MOV R9D,EBX"
        }, 
        {
          "address": "0x1400034a5", 
          "code": "MOV R8,RAX"
        }, 
        {
          "address": "0x1400034a8", 
          "code": "XOR EDX,EDX"
        }, 
        {
          "address": "0x1400034aa", 
          "code": "LEA RCX,[0x140000000]"
        }, 
        {
          "address": "0x1400034b1", 
          "code": "CALL 0x140004168"
        }, 
        {
          "address": "0x1400034b6", 
          "code": "MOV EBX,EAX"
        }, 
        {
          "address": "0x1400034b8", 
          "code": "CALL 0x140003a90"
        }, 
        {
          "address": "0x1400034bd", 
          "code": "TEST AL,AL"
        }, 
        {
          "address": "0x1400034bf", 
          "code": "JZ 0x140003511"
        }, 
        {
          "address": "0x1400034c1", 
          "code": "TEST DIL,DIL"
        }, 
        {
          "address": "0x1400034c4", 
          "code": "JNZ 0x1400034cb"
        }, 
        {
          "address": "0x1400034c6", 
          "code": "CALL 0x1400040fe"
        }, 
        {
          "address": "0x1400034cb", 
          "code": "XOR EDX,EDX"
        }, 
        {
          "address": "0x1400034cd", 
          "code": "MOV CL,0x1"
        }, 
        {
          "address": "0x1400034cf", 
          "code": "CALL 0x140003730"
        }, 
        {
          "address": "0x1400034d4", 
          "code": "MOV EAX,EBX"
        }, 
        {
          "address": "0x1400034d6", 
          "code": "JMP 0x1400034f1"
        }, 
        {
          "address": "0x1400034f1", 
          "code": "MOV RBX,qword ptr [RSP + 0x40]"
        }, 
        {
          "address": "0x1400034f6", 
          "code": "ADD RSP,0x30"
        }, 
        {
          "address": "0x1400034fa", 
          "code": "POP RDI"
        }, 
        {
          "address": "0x1400034fb", 
          "code": "RET"
        }, 
        {
          "address": "0x1400034fc", 
          "code": "MOV ECX,0x7"
        }, 
        {
          "address": "0x140003501", 
          "code": "CALL 0x140003904"
        }, 
        {
          "address": "0x140003506", 
          "code": "NOP"
        }, 
        {
          "address": "0x140003507", 
          "code": "MOV ECX,0x7"
        }, 
        {
          "address": "0x14000350c", 
          "code": "CALL 0x140003904"
        }, 
        {
          "address": "0x140003511", 
          "code": "MOV ECX,EBX"
        }, 
        {
          "address": "0x140003513", 
          "code": "CALL 0x1400040ec"
        }
      ], 
      "c_code": "\nint FUN_1400033b0(void)\n\n{\n  bool bVar1;\n  WORD WVar2;\n  int iVar3;\n  undefined8 uVar4;\n  longlong *plVar5;\n  ulonglong uVar6;\n  wchar_t *pwVar7;\n  IMAGE_DOS_HEADER *pIVar8;\n  undefined8 unaff_RBX;\n  \n  iVar3 = (int)unaff_RBX;\n  uVar4 = FUN_1400035ac(1);\n  if ((char)uVar4 == '\\0') {\n    FUN_140003904(7);\n  }\n  else {\n    bVar1 = false;\n    uVar4 = __scrt_acquire_startup_lock();\n    iVar3 = (int)CONCAT71((int7)((ulonglong)unaff_RBX >> 8),(char)uVar4);\n    if (DAT_14000a5d8 != 1) {\n      if (DAT_14000a5d8 == 0) {\n        DAT_14000a5d8 = 1;\n        iVar3 = _initterm_e(&DAT_140005918,&DAT_140005930);\n        if (iVar3 != 0) {\n          return 0xff;\n        }\n        _initterm(&DAT_1400058e8);\n        DAT_14000a5d8 = 2;\n      }\n      else {\n        bVar1 = true;\n      }\n      __scrt_release_startup_lock((char)uVar4);\n      plVar5 = (longlong *)FUN_1400038ec();\n      if ((*plVar5 != 0) && (uVar6 = FUN_140003674((longlong)plVar5), (char)uVar6 != '\\0')) {\n        (*(code *)PTR__guard_dispatch_icall_1400058c0)(0);\n      }\n      plVar5 = (longlong *)FUN_1400038f4();\n      if ((*plVar5 != 0) && (uVar6 = FUN_140003674((longlong)plVar5), (char)uVar6 != '\\0')) {\n        _register_thread_local_exe_atexit_callback(*plVar5);\n      }\n      WVar2 = __scrt_get_show_window_mode();\n      pwVar7 = (wchar_t *)_get_wide_winmain_command_line();\n      pIVar8 = &IMAGE_DOS_HEADER_140000000;\n      iVar3 = AfxWinMain((HINSTANCE__ *)&IMAGE_DOS_HEADER_140000000,(HINSTANCE__ *)0x0,pwVar7,\n                         (uint)WVar2);\n      uVar6 = FUN_140003a90();\n      if ((char)uVar6 != '\\0') {\n        if (!bVar1) {\n          _cexit();\n        }\n        __scrt_uninitialize_crt(CONCAT71((int7)((ulonglong)pIVar8 >> 8),1),'\\0');\n        return iVar3;\n      }\n      goto LAB_140003511;\n    }\n  }\n  FUN_140003904(7);\nLAB_140003511:\n                    /* WARNING: Subroutine does not return */\n  exit(iVar3);\n}\n\n", 
      "name": "FUN_1400033b0", 
      "entry_point": "0x1400033b0"
    }, 
    {
      "signature": "undefined __fastcall entry(void)", 
      "disassembly": [
        {
          "address": "0x140003524", 
          "code": "SUB RSP,0x28"
        }, 
        {
          "address": "0x140003528", 
          "code": "CALL 0x1400037e4"
        }, 
        {
          "address": "0x14000352d", 
          "code": "ADD RSP,0x28"
        }, 
        {
          "address": "0x140003531", 
          "code": "JMP 0x1400033b0"
        }
      ], 
      "c_code": "\nvoid entry(void)\n\n{\n  __security_init_cookie();\n  FUN_1400033b0();\n  return;\n}\n\n", 
      "name": "entry", 
      "entry_point": "0x140003524"
    }, 
    {
      "signature": "undefined __fastcall FUN_140003550(longlong param_1)", 
      "disassembly": [
        {
          "address": "0x140003550", 
          "code": "CMP RCX,qword ptr [0x14000a040]"
        }, 
        {
          "address": "0x140003557", 
          "code": "JNZ 0x140003569"
        }, 
        {
          "address": "0x140003559", 
          "code": "ROL RCX,0x10"
        }, 
        {
          "address": "0x14000355d", 
          "code": "TEST CX,0xffff"
        }, 
        {
          "address": "0x140003562", 
          "code": "JNZ 0x140003565"
        }, 
        {
          "address": "0x140003564", 
          "code": "RET"
        }, 
        {
          "address": "0x140003565", 
          "code": "ROR RCX,0x10"
        }, 
        {
          "address": "0x140003569", 
          "code": "JMP 0x140003bfc"
        }
      ], 
      "c_code": "\nvoid FUN_140003550(longlong param_1)\n\n{\n  if ((param_1 == DAT_14000a040) && ((short)((ulonglong)param_1 >> 0x30) == 0)) {\n    return;\n  }\n  FUN_140003bfc();\n  return;\n}\n\n", 
      "name": "FUN_140003550", 
      "entry_point": "0x140003550"
    }, 
    {
      "signature": "undefined8 __fastcall __scrt_acquire_startup_lock(void)", 
      "disassembly": [
        {
          "address": "0x140003570", 
          "code": "SUB RSP,0x28"
        }, 
        {
          "address": "0x140003574", 
          "code": "CALL 0x140003ef0"
        }, 
        {
          "address": "0x140003579", 
          "code": "TEST EAX,EAX"
        }, 
        {
          "address": "0x14000357b", 
          "code": "JZ 0x14000359e"
        }, 
        {
          "address": "0x14000357d", 
          "code": "MOV RAX,qword ptr GS:[0x30]"
        }, 
        {
          "address": "0x140003586", 
          "code": "MOV RCX,qword ptr [RAX + 0x8]"
        }, 
        {
          "address": "0x14000358a", 
          "code": "JMP 0x140003591"
        }, 
        {
          "address": "0x14000358c", 
          "code": "CMP RCX,RAX"
        }, 
        {
          "address": "0x14000358f", 
          "code": "JZ 0x1400035a5"
        }, 
        {
          "address": "0x140003591", 
          "code": "XOR EAX,EAX"
        }, 
        {
          "address": "0x140003593", 
          "code": "CMPXCHG.LOCK qword ptr [0x14000a5e0],RCX"
        }, 
        {
          "address": "0x14000359c", 
          "code": "JNZ 0x14000358c"
        }, 
        {
          "address": "0x14000359e", 
          "code": "XOR AL,AL"
        }, 
        {
          "address": "0x1400035a0", 
          "code": "ADD RSP,0x28"
        }, 
        {
          "address": "0x1400035a4", 
          "code": "RET"
        }, 
        {
          "address": "0x1400035a5", 
          "code": "MOV AL,0x1"
        }, 
        {
          "address": "0x1400035a7", 
          "code": "JMP 0x1400035a0"
        }
      ], 
      "c_code": "\n/* Library Function - Single Match\n    __scrt_acquire_startup_lock\n   \n   Libraries: Visual Studio 2015 Release, Visual Studio 2017 Release, Visual Studio 2019 Release */\n\nulonglong __scrt_acquire_startup_lock(void)\n\n{\n  ulonglong uVar1;\n  bool bVar2;\n  undefined7 extraout_var;\n  ulonglong uVar3;\n  \n  bVar2 = __scrt_is_ucrt_dll_in_use();\n  uVar3 = CONCAT71(extraout_var,bVar2);\n  if ((int)uVar3 == 0) {\nLAB_14000359e:\n    uVar3 = uVar3 & 0xffffffffffffff00;\n  }\n  else {\n    do {\n      uVar3 = 0;\n      LOCK();\n      bVar2 = DAT_14000a5e0 == 0;\n      uVar1 = *(ulonglong *)((longlong)Self + 8);\n      if (!bVar2) {\n        uVar3 = DAT_14000a5e0;\n        uVar1 = DAT_14000a5e0;\n      }\n      DAT_14000a5e0 = uVar1;\n      UNLOCK();\n      if (bVar2) goto LAB_14000359e;\n    } while (*(ulonglong *)((longlong)Self + 8) != uVar3);\n    uVar3 = CONCAT71((int7)(uVar3 >> 8),1);\n  }\n  return uVar3;\n}\n\n", 
      "name": "__scrt_acquire_startup_lock", 
      "entry_point": "0x140003570"
    }, 
    {
      "signature": "undefined8 __fastcall FUN_1400035ac(int param_1)", 
      "disassembly": [
        {
          "address": "0x1400035ac", 
          "code": "SUB RSP,0x28"
        }, 
        {
          "address": "0x1400035b0", 
          "code": "TEST ECX,ECX"
        }, 
        {
          "address": "0x1400035b2", 
          "code": "JNZ 0x1400035bb"
        }, 
        {
          "address": "0x1400035b4", 
          "code": "MOV byte ptr [0x14000a5e8],0x1"
        }, 
        {
          "address": "0x1400035bb", 
          "code": "CALL 0x140003d44"
        }, 
        {
          "address": "0x1400035c0", 
          "code": "CALL 0x1400038b0"
        }, 
        {
          "address": "0x1400035c5", 
          "code": "TEST AL,AL"
        }, 
        {
          "address": "0x1400035c7", 
          "code": "JNZ 0x1400035cd"
        }, 
        {
          "address": "0x1400035c9", 
          "code": "XOR AL,AL"
        }, 
        {
          "address": "0x1400035cb", 
          "code": "JMP 0x1400035e1"
        }, 
        {
          "address": "0x1400035cd", 
          "code": "CALL 0x1400038b0"
        }, 
        {
          "address": "0x1400035d2", 
          "code": "TEST AL,AL"
        }, 
        {
          "address": "0x1400035d4", 
          "code": "JNZ 0x1400035df"
        }, 
        {
          "address": "0x1400035d6", 
          "code": "XOR ECX,ECX"
        }, 
        {
          "address": "0x1400035d8", 
          "code": "CALL 0x1400038b0"
        }, 
        {
          "address": "0x1400035dd", 
          "code": "JMP 0x1400035c9"
        }, 
        {
          "address": "0x1400035df", 
          "code": "MOV AL,0x1"
        }, 
        {
          "address": "0x1400035e1", 
          "code": "ADD RSP,0x28"
        }, 
        {
          "address": "0x1400035e5", 
          "code": "RET"
        }
      ], 
      "c_code": "\nlonglong FUN_1400035ac(int param_1)\n\n{\n  char cVar1;\n  uint7 extraout_var;\n  uint7 uVar2;\n  undefined7 extraout_var_00;\n  uint7 extraout_var_01;\n  \n  if (param_1 == 0) {\n    DAT_14000a5e8 = 1;\n  }\n  FUN_140003d44();\n  cVar1 = FUN_1400038b0();\n  uVar2 = extraout_var;\n  if (cVar1 != '\\0') {\n    cVar1 = FUN_1400038b0();\n    if (cVar1 != '\\0') {\n      return CONCAT71(extraout_var_00,1);\n    }\n    FUN_1400038b0();\n    uVar2 = extraout_var_01;\n  }\n  return (ulonglong)uVar2 << 8;\n}\n\n", 
      "name": "FUN_1400035ac", 
      "entry_point": "0x1400035ac"
    }, 
    {
      "signature": "undefined8 __fastcall __scrt_initialize_onexit_tables(uint param_1)", 
      "disassembly": [
        {
          "address": "0x1400035e8", 
          "code": "PUSH RBX"
        }, 
        {
          "address": "0x1400035ea", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x1400035ee", 
          "code": "CMP byte ptr [0x14000a5e9],0x0"
        }, 
        {
          "address": "0x1400035f5", 
          "code": "MOV EBX,ECX"
        }, 
        {
          "address": "0x1400035f7", 
          "code": "JNZ 0x140003660"
        }, 
        {
          "address": "0x1400035f9", 
          "code": "CMP ECX,0x1"
        }, 
        {
          "address": "0x1400035fc", 
          "code": "JA 0x140003668"
        }, 
        {
          "address": "0x1400035fe", 
          "code": "CALL 0x140003ef0"
        }, 
        {
          "address": "0x140003603", 
          "code": "TEST EAX,EAX"
        }, 
        {
          "address": "0x140003605", 
          "code": "JZ 0x14000362f"
        }, 
        {
          "address": "0x140003607", 
          "code": "TEST EBX,EBX"
        }, 
        {
          "address": "0x140003609", 
          "code": "JNZ 0x14000362f"
        }, 
        {
          "address": "0x14000360b", 
          "code": "LEA RCX,[0x14000a5f0]"
        }, 
        {
          "address": "0x140003612", 
          "code": "CALL 0x140004122"
        }, 
        {
          "address": "0x140003617", 
          "code": "TEST EAX,EAX"
        }, 
        {
          "address": "0x140003619", 
          "code": "JNZ 0x14000362b"
        }, 
        {
          "address": "0x14000361b", 
          "code": "LEA RCX,[0x14000a608]"
        }, 
        {
          "address": "0x140003622", 
          "code": "CALL 0x140004122"
        }, 
        {
          "address": "0x140003627", 
          "code": "TEST EAX,EAX"
        }, 
        {
          "address": "0x140003629", 
          "code": "JZ 0x140003659"
        }, 
        {
          "address": "0x14000362b", 
          "code": "XOR AL,AL"
        }, 
        {
          "address": "0x14000362d", 
          "code": "JMP 0x140003662"
        }, 
        {
          "address": "0x14000362f", 
          "code": "MOVDQA XMM0,xmmword ptr [0x140005970]"
        }, 
        {
          "address": "0x140003637", 
          "code": "OR RAX,-0x1"
        }, 
        {
          "address": "0x14000363b", 
          "code": "MOVDQU xmmword ptr [0x14000a5f0],XMM0"
        }, 
        {
          "address": "0x140003643", 
          "code": "MOV qword ptr [0x14000a600],RAX"
        }, 
        {
          "address": "0x14000364a", 
          "code": "MOVDQU xmmword ptr [0x14000a608],XMM0"
        }, 
        {
          "address": "0x140003652", 
          "code": "MOV qword ptr [0x14000a618],RAX"
        }, 
        {
          "address": "0x140003659", 
          "code": "MOV byte ptr [0x14000a5e9],0x1"
        }, 
        {
          "address": "0x140003660", 
          "code": "MOV AL,0x1"
        }, 
        {
          "address": "0x140003662", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x140003666", 
          "code": "POP RBX"
        }, 
        {
          "address": "0x140003667", 
          "code": "RET"
        }, 
        {
          "address": "0x140003668", 
          "code": "MOV ECX,0x5"
        }, 
        {
          "address": "0x14000366d", 
          "code": "CALL 0x140003904"
        }, 
        {
          "address": "0x140003672", 
          "code": "INT3"
        }
      ], 
      "c_code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n/* Library Function - Single Match\n    __scrt_initialize_onexit_tables\n   \n   Library: Visual Studio 2019 Release */\n\nundefined8 __scrt_initialize_onexit_tables(uint param_1)\n\n{\n  code *pcVar1;\n  bool bVar2;\n  ulonglong in_RAX;\n  undefined7 extraout_var;\n  undefined8 uVar3;\n  \n  if (DAT_14000a5e9 == '\\0') {\n    if (1 < param_1) {\n      FUN_140003904(5);\n      pcVar1 = (code *)swi(3);\n      uVar3 = (*pcVar1)();\n      return uVar3;\n    }\n    bVar2 = __scrt_is_ucrt_dll_in_use();\n    if (((int)CONCAT71(extraout_var,bVar2) == 0) || (param_1 != 0)) {\n      in_RAX = 0xffffffffffffffff;\n      DAT_14000a5f0 = _DAT_140005970;\n      uRam000000014000a5f8 = _UNK_140005978;\n      _DAT_14000a600 = 0xffffffffffffffff;\n      _DAT_14000a608 = _DAT_140005970;\n      uRam000000014000a610 = _UNK_140005978;\n      _DAT_14000a618 = 0xffffffffffffffff;\n    }\n    else {\n      in_RAX = _initialize_onexit_table(&DAT_14000a5f0);\n      if (((int)in_RAX != 0) ||\n         (in_RAX = _initialize_onexit_table(&DAT_14000a608), (int)in_RAX != 0)) {\n        return in_RAX & 0xffffffffffffff00;\n      }\n    }\n    DAT_14000a5e9 = '\\x01';\n  }\n  return CONCAT71((int7)(in_RAX >> 8),1);\n}\n\n", 
      "name": "__scrt_initialize_onexit_tables", 
      "entry_point": "0x1400035e8"
    }, 
    {
      "signature": "ulonglong __fastcall FUN_140003674(longlong param_1)", 
      "disassembly": [
        {
          "address": "0x140003674", 
          "code": "SUB RSP,0x18"
        }, 
        {
          "address": "0x140003678", 
          "code": "MOV R8,RCX"
        }, 
        {
          "address": "0x14000367b", 
          "code": "MOV EAX,0x5a4d"
        }, 
        {
          "address": "0x140003680", 
          "code": "CMP word ptr [0x140000000],AX"
        }, 
        {
          "address": "0x140003687", 
          "code": "JNZ 0x140003701"
        }, 
        {
          "address": "0x140003689", 
          "code": "MOVSXD RCX,dword ptr [0x14000003c]"
        }, 
        {
          "address": "0x140003690", 
          "code": "LEA RDX,[0x140000000]"
        }, 
        {
          "address": "0x140003697", 
          "code": "ADD RCX,RDX"
        }, 
        {
          "address": "0x14000369a", 
          "code": "CMP dword ptr [RCX],0x4550"
        }, 
        {
          "address": "0x1400036a0", 
          "code": "JNZ 0x140003701"
        }, 
        {
          "address": "0x1400036a2", 
          "code": "MOV EAX,0x20b"
        }, 
        {
          "address": "0x1400036a7", 
          "code": "CMP word ptr [RCX + 0x18],AX"
        }, 
        {
          "address": "0x1400036ab", 
          "code": "JNZ 0x140003701"
        }, 
        {
          "address": "0x1400036ad", 
          "code": "SUB R8,RDX"
        }, 
        {
          "address": "0x1400036b0", 
          "code": "MOVZX EDX,word ptr [RCX + 0x14]"
        }, 
        {
          "address": "0x1400036b4", 
          "code": "ADD RDX,0x18"
        }, 
        {
          "address": "0x1400036b8", 
          "code": "ADD RDX,RCX"
        }, 
        {
          "address": "0x1400036bb", 
          "code": "MOVZX EAX,word ptr [RCX + 0x6]"
        }, 
        {
          "address": "0x1400036bf", 
          "code": "LEA RCX,[RAX + RAX*0x4]"
        }, 
        {
          "address": "0x1400036c3", 
          "code": "LEA R9,[RDX + RCX*0x8]"
        }, 
        {
          "address": "0x1400036c7", 
          "code": "MOV qword ptr [RSP],RDX"
        }, 
        {
          "address": "0x1400036cb", 
          "code": "CMP RDX,R9"
        }, 
        {
          "address": "0x1400036ce", 
          "code": "JZ 0x1400036e8"
        }, 
        {
          "address": "0x1400036d0", 
          "code": "MOV ECX,dword ptr [RDX + 0xc]"
        }, 
        {
          "address": "0x1400036d3", 
          "code": "CMP R8,RCX"
        }, 
        {
          "address": "0x1400036d6", 
          "code": "JC 0x1400036e2"
        }, 
        {
          "address": "0x1400036d8", 
          "code": "MOV EAX,dword ptr [RDX + 0x8]"
        }, 
        {
          "address": "0x1400036db", 
          "code": "ADD EAX,ECX"
        }, 
        {
          "address": "0x1400036dd", 
          "code": "CMP R8,RAX"
        }, 
        {
          "address": "0x1400036e0", 
          "code": "JC 0x1400036ea"
        }, 
        {
          "address": "0x1400036e2", 
          "code": "ADD RDX,0x28"
        }, 
        {
          "address": "0x1400036e6", 
          "code": "JMP 0x1400036c7"
        }, 
        {
          "address": "0x1400036e8", 
          "code": "XOR EDX,EDX"
        }, 
        {
          "address": "0x1400036ea", 
          "code": "TEST RDX,RDX"
        }, 
        {
          "address": "0x1400036ed", 
          "code": "JNZ 0x1400036f3"
        }, 
        {
          "address": "0x1400036ef", 
          "code": "XOR AL,AL"
        }, 
        {
          "address": "0x1400036f1", 
          "code": "JMP 0x140003707"
        }, 
        {
          "address": "0x1400036f3", 
          "code": "CMP dword ptr [RDX + 0x24],0x0"
        }, 
        {
          "address": "0x1400036f7", 
          "code": "JGE 0x1400036fd"
        }, 
        {
          "address": "0x1400036f9", 
          "code": "XOR AL,AL"
        }, 
        {
          "address": "0x1400036fb", 
          "code": "JMP 0x140003707"
        }, 
        {
          "address": "0x1400036fd", 
          "code": "MOV AL,0x1"
        }, 
        {
          "address": "0x1400036ff", 
          "code": "JMP 0x140003707"
        }, 
        {
          "address": "0x140003701", 
          "code": "XOR AL,AL"
        }, 
        {
          "address": "0x140003703", 
          "code": "JMP 0x140003707"
        }, 
        {
          "address": "0x140003707", 
          "code": "ADD RSP,0x18"
        }, 
        {
          "address": "0x14000370b", 
          "code": "RET"
        }
      ], 
      "c_code": "\nulonglong FUN_140003674(longlong param_1)\n\n{\n  word *pwVar1;\n  ulonglong uVar2;\n  uint7 uVar3;\n  longlong lVar4;\n  word *pwVar5;\n  \n  uVar2 = 0x5a4d;\n  if (IMAGE_DOS_HEADER_140000000.e_magic == (char  [2])0x5a4d) {\n    lVar4 = (longlong)(int)IMAGE_DOS_HEADER_140000000.e_lfanew;\n    if ((*(int *)(IMAGE_DOS_HEADER_140000000.e_magic + lVar4) == 0x4550) &&\n       (uVar2 = 0x20b,\n       *(short *)((longlong)IMAGE_DOS_HEADER_140000000.e_res_4_ + lVar4 + -4) == 0x20b)) {\n      pwVar5 = (word *)(IMAGE_DOS_HEADER_140000000.e_magic + lVar4 +\n                       (ulonglong)\n                       *(ushort *)((longlong)IMAGE_DOS_HEADER_140000000.e_res_4_ + lVar4 + -8) +\n                       0x18);\n      uVar2 = (ulonglong)*(ushort *)(IMAGE_DOS_HEADER_140000000.e_magic + lVar4 + 6);\n      pwVar1 = pwVar5 + uVar2 * 0x14;\n      for (; pwVar5 != pwVar1; pwVar5 = pwVar5 + 0x14) {\n        if (((ulonglong)*(uint *)(pwVar5 + 6) <= param_1 - 0x140000000U) &&\n           (uVar2 = (ulonglong)(*(int *)(pwVar5 + 4) + *(uint *)(pwVar5 + 6)),\n           param_1 - 0x140000000U < uVar2)) goto LAB_1400036ea;\n      }\n      pwVar5 = (word *)0x0;\nLAB_1400036ea:\n      if (pwVar5 == (word *)0x0) {\n        return uVar2 & 0xffffffffffffff00;\n      }\n      uVar3 = (uint7)(uVar2 >> 8);\n      if (*(int *)(pwVar5 + 0x12) < 0) {\n        return (ulonglong)uVar3 << 8;\n      }\n      return CONCAT71(uVar3,1);\n    }\n  }\n  return uVar2 & 0xffffffffffffff00;\n}\n\n", 
      "name": "FUN_140003674", 
      "entry_point": "0x140003674"
    }, 
    {
      "signature": "undefined __fastcall __scrt_release_startup_lock(char param_1)", 
      "disassembly": [
        {
          "address": "0x14000370c", 
          "code": "PUSH RBX"
        }, 
        {
          "address": "0x14000370e", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x140003712", 
          "code": "MOV BL,CL"
        }, 
        {
          "address": "0x140003714", 
          "code": "CALL 0x140003ef0"
        }, 
        {
          "address": "0x140003719", 
          "code": "XOR EDX,EDX"
        }, 
        {
          "address": "0x14000371b", 
          "code": "TEST EAX,EAX"
        }, 
        {
          "address": "0x14000371d", 
          "code": "JZ 0x14000372a"
        }, 
        {
          "address": "0x14000371f", 
          "code": "TEST BL,BL"
        }, 
        {
          "address": "0x140003721", 
          "code": "JNZ 0x14000372a"
        }, 
        {
          "address": "0x140003723", 
          "code": "XCHG qword ptr [0x14000a5e0],RDX"
        }, 
        {
          "address": "0x14000372a", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x14000372e", 
          "code": "POP RBX"
        }, 
        {
          "address": "0x14000372f", 
          "code": "RET"
        }
      ], 
      "c_code": "\n/* Library Function - Single Match\n    __scrt_release_startup_lock\n   \n   Libraries: Visual Studio 2015 Release, Visual Studio 2017 Release, Visual Studio 2019 Release */\n\nvoid __scrt_release_startup_lock(char param_1)\n\n{\n  bool bVar1;\n  undefined3 extraout_var;\n  \n  bVar1 = __scrt_is_ucrt_dll_in_use();\n  if ((CONCAT31(extraout_var,bVar1) != 0) && (param_1 == '\\0')) {\n    LOCK();\n    DAT_14000a5e0 = 0;\n    UNLOCK();\n  }\n  return;\n}\n\n", 
      "name": "__scrt_release_startup_lock", 
      "entry_point": "0x14000370c"
    }, 
    {
      "signature": "undefined1 __fastcall __scrt_uninitialize_crt(undefined8 param_1, char param_2)", 
      "disassembly": [
        {
          "address": "0x140003730", 
          "code": "PUSH RBX"
        }, 
        {
          "address": "0x140003732", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x140003736", 
          "code": "CMP byte ptr [0x14000a5e8],0x0"
        }, 
        {
          "address": "0x14000373d", 
          "code": "MOV BL,CL"
        }, 
        {
          "address": "0x14000373f", 
          "code": "JZ 0x140003745"
        }, 
        {
          "address": "0x140003741", 
          "code": "TEST DL,DL"
        }, 
        {
          "address": "0x140003743", 
          "code": "JNZ 0x140003751"
        }, 
        {
          "address": "0x140003745", 
          "code": "CALL 0x1400038b0"
        }, 
        {
          "address": "0x14000374a", 
          "code": "MOV CL,BL"
        }, 
        {
          "address": "0x14000374c", 
          "code": "CALL 0x1400038b0"
        }, 
        {
          "address": "0x140003751", 
          "code": "MOV AL,0x1"
        }, 
        {
          "address": "0x140003753", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x140003757", 
          "code": "POP RBX"
        }, 
        {
          "address": "0x140003758", 
          "code": "RET"
        }
      ], 
      "c_code": "\n/* Library Function - Single Match\n    __scrt_uninitialize_crt\n   \n   Library: Visual Studio 2019 Release */\n\nundefined1 __scrt_uninitialize_crt(undefined8 param_1,char param_2)\n\n{\n  if ((DAT_14000a5e8 == '\\0') || (param_2 == '\\0')) {\n    FUN_1400038b0();\n    FUN_1400038b0();\n  }\n  return 1;\n}\n\n", 
      "name": "__scrt_uninitialize_crt", 
      "entry_point": "0x140003730"
    }, 
    {
      "signature": "_onexit_t __cdecl _onexit(_onexit_t _Func)", 
      "disassembly": [
        {
          "address": "0x14000375c", 
          "code": "PUSH RBX"
        }, 
        {
          "address": "0x14000375e", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x140003762", 
          "code": "CMP qword ptr [0x14000a5f0],-0x1"
        }, 
        {
          "address": "0x14000376a", 
          "code": "MOV RBX,RCX"
        }, 
        {
          "address": "0x14000376d", 
          "code": "JNZ 0x140003776"
        }, 
        {
          "address": "0x14000376f", 
          "code": "CALL 0x14000412e"
        }, 
        {
          "address": "0x140003774", 
          "code": "JMP 0x140003785"
        }, 
        {
          "address": "0x140003776", 
          "code": "MOV RDX,RBX"
        }, 
        {
          "address": "0x140003779", 
          "code": "LEA RCX,[0x14000a5f0]"
        }, 
        {
          "address": "0x140003780", 
          "code": "CALL 0x140004128"
        }, 
        {
          "address": "0x140003785", 
          "code": "XOR EDX,EDX"
        }, 
        {
          "address": "0x140003787", 
          "code": "TEST EAX,EAX"
        }, 
        {
          "address": "0x140003789", 
          "code": "CMOVZ RDX,RBX"
        }, 
        {
          "address": "0x14000378d", 
          "code": "MOV RAX,RDX"
        }, 
        {
          "address": "0x140003790", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x140003794", 
          "code": "POP RBX"
        }, 
        {
          "address": "0x140003795", 
          "code": "RET"
        }
      ], 
      "c_code": "\n/* Library Function - Single Match\n    _onexit\n   \n   Library: Visual Studio 2019 Release */\n\n_onexit_t __cdecl _onexit(_onexit_t _Func)\n\n{\n  int iVar1;\n  _onexit_t p_Var2;\n  \n  if (DAT_14000a5f0 == -1) {\n    iVar1 = _crt_atexit();\n  }\n  else {\n    iVar1 = _register_onexit_function(&DAT_14000a5f0);\n  }\n  p_Var2 = (_onexit_t)0x0;\n  if (iVar1 == 0) {\n    p_Var2 = _Func;\n  }\n  return p_Var2;\n}\n\n", 
      "name": "_onexit", 
      "entry_point": "0x14000375c"
    }, 
    {
      "signature": "int __cdecl atexit(_func_5014 * param_1)", 
      "disassembly": [
        {
          "address": "0x140003798", 
          "code": "SUB RSP,0x28"
        }, 
        {
          "address": "0x14000379c", 
          "code": "CALL 0x14000375c"
        }, 
        {
          "address": "0x1400037a1", 
          "code": "NEG RAX"
        }, 
        {
          "address": "0x1400037a4", 
          "code": "SBB EAX,EAX"
        }, 
        {
          "address": "0x1400037a6", 
          "code": "NEG EAX"
        }, 
        {
          "address": "0x1400037a8", 
          "code": "DEC EAX"
        }, 
        {
          "address": "0x1400037aa", 
          "code": "ADD RSP,0x28"
        }, 
        {
          "address": "0x1400037ae", 
          "code": "RET"
        }
      ], 
      "c_code": "\n/* Library Function - Single Match\n    atexit\n   \n   Library: Visual Studio 2019 Release */\n\nint __cdecl atexit(_func_5014 *param_1)\n\n{\n  _onexit_t p_Var1;\n  \n  p_Var1 = _onexit((_onexit_t)param_1);\n  return (p_Var1 != (_onexit_t)0x0) - 1;\n}\n\n", 
      "name": "atexit", 
      "entry_point": "0x140003798"
    }, 
    {
      "signature": "undefined8 * __fastcall FUN_1400037b0(undefined8 * param_1, ulonglong param_2)", 
      "disassembly": [
        {
          "address": "0x1400037b0", 
          "code": "PUSH RBX"
        }, 
        {
          "address": "0x1400037b2", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x1400037b6", 
          "code": "LEA RAX,[0x140005988]"
        }, 
        {
          "address": "0x1400037bd", 
          "code": "MOV RBX,RCX"
        }, 
        {
          "address": "0x1400037c0", 
          "code": "MOV qword ptr [RCX],RAX"
        }, 
        {
          "address": "0x1400037c3", 
          "code": "TEST DL,0x1"
        }, 
        {
          "address": "0x1400037c6", 
          "code": "JZ 0x1400037d2"
        }, 
        {
          "address": "0x1400037c8", 
          "code": "MOV EDX,0x18"
        }, 
        {
          "address": "0x1400037cd", 
          "code": "CALL 0x1400037dc"
        }, 
        {
          "address": "0x1400037d2", 
          "code": "MOV RAX,RBX"
        }, 
        {
          "address": "0x1400037d5", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x1400037d9", 
          "code": "POP RBX"
        }, 
        {
          "address": "0x1400037da", 
          "code": "RET"
        }
      ], 
      "c_code": "\nundefined8 * FUN_1400037b0(undefined8 *param_1,ulonglong param_2)\n\n{\n  *param_1 = type_info::vftable;\n  if ((param_2 & 1) != 0) {\n    operator_delete(param_1);\n  }\n  return param_1;\n}\n\n", 
      "name": "FUN_1400037b0", 
      "entry_point": "0x1400037b0"
    }, 
    {
      "signature": "void __cdecl operator_delete(void * param_1)", 
      "disassembly": [
        {
          "address": "0x1400037dc", 
          "code": "JMP 0x140002f77"
        }
      ], 
      "c_code": "\nvoid __cdecl operator_delete(void *param_1)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x000140002f77. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  operator_delete(param_1);\n  return;\n}\n\n", 
      "name": "operator_delete", 
      "entry_point": "0x1400037dc"
    }, 
    {
      "signature": "void __cdecl __security_init_cookie(void)", 
      "disassembly": [
        {
          "address": "0x1400037e4", 
          "code": "MOV qword ptr [RSP + 0x18],RBX"
        }, 
        {
          "address": "0x1400037e9", 
          "code": "PUSH RBP"
        }, 
        {
          "address": "0x1400037ea", 
          "code": "MOV RBP,RSP"
        }, 
        {
          "address": "0x1400037ed", 
          "code": "SUB RSP,0x30"
        }, 
        {
          "address": "0x1400037f1", 
          "code": "MOV RAX,qword ptr [0x14000a040]"
        }, 
        {
          "address": "0x1400037f8", 
          "code": "MOV RBX,0x2b992ddfa232"
        }, 
        {
          "address": "0x140003802", 
          "code": "CMP RAX,RBX"
        }, 
        {
          "address": "0x140003805", 
          "code": "JNZ 0x14000387b"
        }, 
        {
          "address": "0x140003807", 
          "code": "AND qword ptr [RBP + 0x10],0x0"
        }, 
        {
          "address": "0x14000380c", 
          "code": "LEA RCX,[RBP + 0x10]"
        }, 
        {
          "address": "0x140003810", 
          "code": "CALL qword ptr [0x140005060]"
        }, 
        {
          "address": "0x140003816", 
          "code": "MOV RAX,qword ptr [RBP + 0x10]"
        }, 
        {
          "address": "0x14000381a", 
          "code": "MOV qword ptr [RBP + -0x10],RAX"
        }, 
        {
          "address": "0x14000381e", 
          "code": "CALL qword ptr [0x140005058]"
        }, 
        {
          "address": "0x140003824", 
          "code": "MOV EAX,EAX"
        }, 
        {
          "address": "0x140003826", 
          "code": "XOR qword ptr [RBP + -0x10],RAX"
        }, 
        {
          "address": "0x14000382a", 
          "code": "CALL qword ptr [0x1400050e0]"
        }, 
        {
          "address": "0x140003830", 
          "code": "MOV EAX,EAX"
        }, 
        {
          "address": "0x140003832", 
          "code": "LEA RCX,[RBP + 0x18]"
        }, 
        {
          "address": "0x140003836", 
          "code": "XOR qword ptr [RBP + -0x10],RAX"
        }, 
        {
          "address": "0x14000383a", 
          "code": "CALL qword ptr [0x140005050]"
        }, 
        {
          "address": "0x140003840", 
          "code": "MOV EAX,dword ptr [RBP + 0x18]"
        }, 
        {
          "address": "0x140003843", 
          "code": "LEA RCX,[RBP + -0x10]"
        }, 
        {
          "address": "0x140003847", 
          "code": "SHL RAX,0x20"
        }, 
        {
          "address": "0x14000384b", 
          "code": "XOR RAX,qword ptr [RBP + 0x18]"
        }, 
        {
          "address": "0x14000384f", 
          "code": "XOR RAX,qword ptr [RBP + -0x10]"
        }, 
        {
          "address": "0x140003853", 
          "code": "XOR RAX,RCX"
        }, 
        {
          "address": "0x140003856", 
          "code": "MOV RCX,0xffffffffffff"
        }, 
        {
          "address": "0x140003860", 
          "code": "AND RAX,RCX"
        }, 
        {
          "address": "0x140003863", 
          "code": "MOV RCX,0x2b992ddfa233"
        }, 
        {
          "address": "0x14000386d", 
          "code": "CMP RAX,RBX"
        }, 
        {
          "address": "0x140003870", 
          "code": "CMOVZ RAX,RCX"
        }, 
        {
          "address": "0x140003874", 
          "code": "MOV qword ptr [0x14000a040],RAX"
        }, 
        {
          "address": "0x14000387b", 
          "code": "MOV RBX,qword ptr [RSP + 0x50]"
        }, 
        {
          "address": "0x140003880", 
          "code": "NOT RAX"
        }, 
        {
          "address": "0x140003883", 
          "code": "MOV qword ptr [0x14000a080],RAX"
        }, 
        {
          "address": "0x14000388a", 
          "code": "ADD RSP,0x30"
        }, 
        {
          "address": "0x14000388e", 
          "code": "POP RBP"
        }, 
        {
          "address": "0x14000388f", 
          "code": "RET"
        }
      ], 
      "c_code": "\n/* Library Function - Single Match\n    __security_init_cookie\n   \n   Libraries: Visual Studio 2017 Release, Visual Studio 2019 Release */\n\nvoid __cdecl __security_init_cookie(void)\n\n{\n  DWORD DVar1;\n  _FILETIME local_res8;\n  LARGE_INTEGER local_res10;\n  _FILETIME local_18 [2];\n  \n  if (DAT_14000a040 == 0x2b992ddfa232) {\n    local_res8.dwLowDateTime = 0;\n    local_res8.dwHighDateTime = 0;\n    GetSystemTimeAsFileTime(&local_res8);\n    local_18[0] = local_res8;\n    DVar1 = GetCurrentThreadId();\n    local_18[0] = (_FILETIME)((ulonglong)local_18[0] ^ (ulonglong)DVar1);\n    DVar1 = GetCurrentProcessId();\n    local_18[0] = (_FILETIME)((ulonglong)local_18[0] ^ (ulonglong)DVar1);\n    QueryPerformanceCounter(&local_res10);\n    DAT_14000a040 =\n         ((ulonglong)local_res10.s.LowPart << 0x20 ^\n          CONCAT44(local_res10.s.HighPart,local_res10.s.LowPart) ^ (ulonglong)local_18[0] ^\n         (ulonglong)local_18) & 0xffffffffffff;\n    if (DAT_14000a040 == 0x2b992ddfa232) {\n      DAT_14000a040 = 0x2b992ddfa233;\n    }\n  }\n  DAT_14000a080 = ~DAT_14000a040;\n  return;\n}\n\n", 
      "name": "__security_init_cookie", 
      "entry_point": "0x1400037e4"
    }, 
    {
      "signature": "undefined8 __fastcall FUN_140003890(void)", 
      "disassembly": [
        {
          "address": "0x140003890", 
          "code": "MOV EAX,0x1"
        }, 
        {
          "address": "0x140003895", 
          "code": "RET"
        }
      ], 
      "c_code": "\nundefined8 FUN_140003890(void)\n\n{\n  return 1;\n}\n\n", 
      "name": "FUN_140003890", 
      "entry_point": "0x140003890"
    }, 
    {
      "signature": "undefined8 __fastcall FUN_140003898(void)", 
      "disassembly": [
        {
          "address": "0x140003898", 
          "code": "MOV EAX,0x4000"
        }, 
        {
          "address": "0x14000389d", 
          "code": "RET"
        }
      ], 
      "c_code": "\nundefined8 FUN_140003898(void)\n\n{\n  return 0x4000;\n}\n\n", 
      "name": "FUN_140003898", 
      "entry_point": "0x140003898"
    }, 
    {
      "signature": "undefined __fastcall FUN_1400038a0(void)", 
      "disassembly": [
        {
          "address": "0x1400038a0", 
          "code": "LEA RCX,[0x14000a630]"
        }, 
        {
          "address": "0x1400038a7", 
          "code": "JMP qword ptr [0x140005068]"
        }
      ], 
      "c_code": "\nvoid FUN_1400038a0(void)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x0001400038a7. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  InitializeSListHead(&DAT_14000a630);\n  return;\n}\n\n", 
      "name": "FUN_1400038a0", 
      "entry_point": "0x1400038a0"
    }, 
    {
      "signature": "undefined1 __fastcall FUN_1400038b0(void)", 
      "disassembly": [
        {
          "address": "0x1400038b0", 
          "code": "MOV AL,0x1"
        }, 
        {
          "address": "0x1400038b2", 
          "code": "RET"
        }
      ], 
      "c_code": "\nundefined1 FUN_1400038b0(void)\n\n{\n  return 1;\n}\n\n", 
      "name": "FUN_1400038b0", 
      "entry_point": "0x1400038b0"
    }, 
    {
      "signature": "undefined * __fastcall FUN_1400038b4(void)", 
      "disassembly": [
        {
          "address": "0x1400038b4", 
          "code": "LEA RAX,[0x14000a640]"
        }, 
        {
          "address": "0x1400038bb", 
          "code": "RET"
        }
      ], 
      "c_code": "\nundefined * FUN_1400038b4(void)\n\n{\n  return &DAT_14000a640;\n}\n\n", 
      "name": "FUN_1400038b4", 
      "entry_point": "0x1400038b4"
    }, 
    {
      "signature": "undefined * __fastcall FUN_1400038bc(void)", 
      "disassembly": [
        {
          "address": "0x1400038bc", 
          "code": "LEA RAX,[0x14000a648]"
        }, 
        {
          "address": "0x1400038c3", 
          "code": "RET"
        }
      ], 
      "c_code": "\nundefined * FUN_1400038bc(void)\n\n{\n  return &DAT_14000a648;\n}\n\n", 
      "name": "FUN_1400038bc", 
      "entry_point": "0x1400038bc"
    }, 
    {
      "signature": "undefined __fastcall FUN_1400038c4(void)", 
      "disassembly": [
        {
          "address": "0x1400038c4", 
          "code": "SUB RSP,0x28"
        }, 
        {
          "address": "0x1400038c8", 
          "code": "CALL 0x1400038b4"
        }, 
        {
          "address": "0x1400038cd", 
          "code": "OR qword ptr [RAX],0x24"
        }, 
        {
          "address": "0x1400038d1", 
          "code": "CALL 0x1400038bc"
        }, 
        {
          "address": "0x1400038d6", 
          "code": "OR qword ptr [RAX],0x2"
        }, 
        {
          "address": "0x1400038da", 
          "code": "ADD RSP,0x28"
        }, 
        {
          "address": "0x1400038de", 
          "code": "RET"
        }
      ], 
      "c_code": "\nvoid FUN_1400038c4(void)\n\n{\n  ulonglong *puVar1;\n  \n  puVar1 = (ulonglong *)FUN_1400038b4();\n  *puVar1 = *puVar1 | 0x24;\n  puVar1 = (ulonglong *)FUN_1400038bc();\n  *puVar1 = *puVar1 | 2;\n  return;\n}\n\n", 
      "name": "FUN_1400038c4", 
      "entry_point": "0x1400038c4"
    }, 
    {
      "signature": "bool __fastcall FUN_1400038e0(void)", 
      "disassembly": [
        {
          "address": "0x1400038e0", 
          "code": "XOR EAX,EAX"
        }, 
        {
          "address": "0x1400038e2", 
          "code": "CMP dword ptr [0x14000a088],EAX"
        }, 
        {
          "address": "0x1400038e8", 
          "code": "SETZ AL"
        }, 
        {
          "address": "0x1400038eb", 
          "code": "RET"
        }
      ], 
      "c_code": "\nbool FUN_1400038e0(void)\n\n{\n  return DAT_14000a088 == 0;\n}\n\n", 
      "name": "FUN_1400038e0", 
      "entry_point": "0x1400038e0"
    }, 
    {
      "signature": "undefined * __fastcall FUN_1400038ec(void)", 
      "disassembly": [
        {
          "address": "0x1400038ec", 
          "code": "LEA RAX,[0x14000add0]"
        }, 
        {
          "address": "0x1400038f3", 
          "code": "RET"
        }
      ], 
      "c_code": "\nundefined * FUN_1400038ec(void)\n\n{\n  return &DAT_14000add0;\n}\n\n", 
      "name": "FUN_1400038ec", 
      "entry_point": "0x1400038ec"
    }, 
    {
      "signature": "undefined * __fastcall FUN_1400038f4(void)", 
      "disassembly": [
        {
          "address": "0x1400038f4", 
          "code": "LEA RAX,[0x14000adc8]"
        }, 
        {
          "address": "0x1400038fb", 
          "code": "RET"
        }
      ], 
      "c_code": "\nundefined * FUN_1400038f4(void)\n\n{\n  return &DAT_14000adc8;\n}\n\n", 
      "name": "FUN_1400038f4", 
      "entry_point": "0x1400038f4"
    }, 
    {
      "signature": "undefined __fastcall FUN_1400038fc(void)", 
      "disassembly": [
        {
          "address": "0x1400038fc", 
          "code": "AND dword ptr [0x14000a650],0x0"
        }, 
        {
          "address": "0x140003903", 
          "code": "RET"
        }
      ], 
      "c_code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid FUN_1400038fc(void)\n\n{\n  _DAT_14000a650 = 0;\n  return;\n}\n\n", 
      "name": "FUN_1400038fc", 
      "entry_point": "0x1400038fc"
    }, 
    {
      "signature": "undefined __fastcall FUN_140003904(undefined4 param_1)", 
      "disassembly": [
        {
          "address": "0x140003904", 
          "code": "MOV qword ptr [RSP + 0x8],RBX"
        }, 
        {
          "address": "0x140003909", 
          "code": "PUSH RBP"
        }, 
        {
          "address": "0x14000390a", 
          "code": "LEA RBP,[RSP + -0x4c0]"
        }, 
        {
          "address": "0x140003912", 
          "code": "SUB RSP,0x5c0"
        }, 
        {
          "address": "0x140003919", 
          "code": "MOV EBX,ECX"
        }, 
        {
          "address": "0x14000391b", 
          "code": "MOV ECX,0x17"
        }, 
        {
          "address": "0x140003920", 
          "code": "CALL qword ptr [0x1400050a8]"
        }, 
        {
          "address": "0x140003926", 
          "code": "TEST EAX,EAX"
        }, 
        {
          "address": "0x140003928", 
          "code": "JZ 0x14000392e"
        }, 
        {
          "address": "0x14000392a", 
          "code": "MOV ECX,EBX"
        }, 
        {
          "address": "0x14000392c", 
          "code": "INT 0x29"
        }, 
        {
          "address": "0x14000392e", 
          "code": "MOV ECX,0x3"
        }, 
        {
          "address": "0x140003933", 
          "code": "CALL 0x1400038fc"
        }, 
        {
          "address": "0x140003938", 
          "code": "XOR EDX,EDX"
        }, 
        {
          "address": "0x14000393a", 
          "code": "LEA RCX,[RBP + -0x10]"
        }, 
        {
          "address": "0x14000393e", 
          "code": "MOV R8D,0x4d0"
        }, 
        {
          "address": "0x140003944", 
          "code": "CALL 0x140004098"
        }, 
        {
          "address": "0x140003949", 
          "code": "LEA RCX,[RBP + -0x10]"
        }, 
        {
          "address": "0x14000394d", 
          "code": "CALL qword ptr [0x140005070]"
        }, 
        {
          "address": "0x140003953", 
          "code": "MOV RBX,qword ptr [RBP + 0xe8]"
        }, 
        {
          "address": "0x14000395a", 
          "code": "LEA RDX,[RBP + 0x4d8]"
        }, 
        {
          "address": "0x140003961", 
          "code": "MOV RCX,RBX"
        }, 
        {
          "address": "0x140003964", 
          "code": "XOR R8D,R8D"
        }, 
        {
          "address": "0x140003967", 
          "code": "CALL qword ptr [0x140005078]"
        }, 
        {
          "address": "0x14000396d", 
          "code": "TEST RAX,RAX"
        }, 
        {
          "address": "0x140003970", 
          "code": "JZ 0x1400039ae"
        }, 
        {
          "address": "0x140003972", 
          "code": "AND qword ptr [RSP + 0x38],0x0"
        }, 
        {
          "address": "0x140003978", 
          "code": "LEA RCX,[RBP + 0x4e0]"
        }, 
        {
          "address": "0x14000397f", 
          "code": "MOV RDX,qword ptr [RBP + 0x4d8]"
        }, 
        {
          "address": "0x140003986", 
          "code": "MOV R9,RAX"
        }, 
        {
          "address": "0x140003989", 
          "code": "MOV qword ptr [RSP + 0x30],RCX"
        }, 
        {
          "address": "0x14000398e", 
          "code": "MOV R8,RBX"
        }, 
        {
          "address": "0x140003991", 
          "code": "LEA RCX,[RBP + 0x4e8]"
        }, 
        {
          "address": "0x140003998", 
          "code": "MOV qword ptr [RSP + 0x28],RCX"
        }, 
        {
          "address": "0x14000399d", 
          "code": "LEA RCX,[RBP + -0x10]"
        }, 
        {
          "address": "0x1400039a1", 
          "code": "MOV qword ptr [RSP + 0x20],RCX"
        }, 
        {
          "address": "0x1400039a6", 
          "code": "XOR ECX,ECX"
        }, 
        {
          "address": "0x1400039a8", 
          "code": "CALL qword ptr [0x140005080]"
        }, 
        {
          "address": "0x1400039ae", 
          "code": "MOV RAX,qword ptr [RBP + 0x4c8]"
        }, 
        {
          "address": "0x1400039b5", 
          "code": "LEA RCX,[RSP + 0x50]"
        }, 
        {
          "address": "0x1400039ba", 
          "code": "MOV qword ptr [RBP + 0xe8],RAX"
        }, 
        {
          "address": "0x1400039c1", 
          "code": "XOR EDX,EDX"
        }, 
        {
          "address": "0x1400039c3", 
          "code": "LEA RAX,[RBP + 0x4c8]"
        }, 
        {
          "address": "0x1400039ca", 
          "code": "MOV R8D,0x98"
        }, 
        {
          "address": "0x1400039d0", 
          "code": "ADD RAX,0x8"
        }, 
        {
          "address": "0x1400039d4", 
          "code": "MOV qword ptr [RBP + 0x88],RAX"
        }, 
        {
          "address": "0x1400039db", 
          "code": "CALL 0x140004098"
        }, 
        {
          "address": "0x1400039e0", 
          "code": "MOV RAX,qword ptr [RBP + 0x4c8]"
        }, 
        {
          "address": "0x1400039e7", 
          "code": "MOV qword ptr [RSP + 0x60],RAX"
        }, 
        {
          "address": "0x1400039ec", 
          "code": "MOV dword ptr [RSP + 0x50],0x40000015"
        }, 
        {
          "address": "0x1400039f4", 
          "code": "MOV dword ptr [RSP + 0x54],0x1"
        }, 
        {
          "address": "0x1400039fc", 
          "code": "CALL qword ptr [0x140005088]"
        }, 
        {
          "address": "0x140003a02", 
          "code": "MOV EBX,EAX"
        }, 
        {
          "address": "0x140003a04", 
          "code": "XOR ECX,ECX"
        }, 
        {
          "address": "0x140003a06", 
          "code": "LEA RAX,[RSP + 0x50]"
        }, 
        {
          "address": "0x140003a0b", 
          "code": "MOV qword ptr [RSP + 0x40],RAX"
        }, 
        {
          "address": "0x140003a10", 
          "code": "LEA RAX,[RBP + -0x10]"
        }, 
        {
          "address": "0x140003a14", 
          "code": "MOV qword ptr [RSP + 0x48],RAX"
        }, 
        {
          "address": "0x140003a19", 
          "code": "CALL qword ptr [0x140005098]"
        }, 
        {
          "address": "0x140003a1f", 
          "code": "LEA RCX,[RSP + 0x40]"
        }, 
        {
          "address": "0x140003a24", 
          "code": "CALL qword ptr [0x140005090]"
        }, 
        {
          "address": "0x140003a2a", 
          "code": "TEST EAX,EAX"
        }, 
        {
          "address": "0x140003a2c", 
          "code": "JNZ 0x140003a3b"
        }, 
        {
          "address": "0x140003a2e", 
          "code": "CMP EBX,0x1"
        }, 
        {
          "address": "0x140003a31", 
          "code": "JZ 0x140003a3b"
        }, 
        {
          "address": "0x140003a33", 
          "code": "LEA ECX,[RAX + 0x3]"
        }, 
        {
          "address": "0x140003a36", 
          "code": "CALL 0x1400038fc"
        }, 
        {
          "address": "0x140003a3b", 
          "code": "MOV RBX,qword ptr [RSP + 0x5d0]"
        }, 
        {
          "address": "0x140003a43", 
          "code": "ADD RSP,0x5c0"
        }, 
        {
          "address": "0x140003a4a", 
          "code": "POP RBP"
        }, 
        {
          "address": "0x140003a4b", 
          "code": "RET"
        }
      ], 
      "c_code": "\nvoid FUN_140003904(undefined4 param_1)\n\n{\n  code *pcVar1;\n  BOOL BVar2;\n  LONG LVar3;\n  PRUNTIME_FUNCTION FunctionEntry;\n  undefined1 *puVar4;\n  undefined8 unaff_retaddr;\n  DWORD64 local_res10;\n  undefined1 local_res18 [8];\n  undefined1 local_res20 [8];\n  undefined1 auStack_5c8 [8];\n  undefined1 auStack_5c0 [232];\n  undefined1 local_4d8 [152];\n  undefined1 *local_440;\n  DWORD64 local_3e0;\n  \n  puVar4 = auStack_5c8;\n  BVar2 = IsProcessorFeaturePresent(0x17);\n  if (BVar2 != 0) {\n    pcVar1 = (code *)swi(0x29);\n    (*pcVar1)(param_1);\n    puVar4 = auStack_5c0;\n  }\n  *(undefined8 *)(puVar4 + -8) = 0x140003938;\n  FUN_1400038fc();\n  *(undefined8 *)(puVar4 + -8) = 0x140003949;\n  memset(local_4d8,0,0x4d0);\n  *(undefined8 *)(puVar4 + -8) = 0x140003953;\n  RtlCaptureContext(local_4d8);\n  *(undefined8 *)(puVar4 + -8) = 0x14000396d;\n  FunctionEntry = RtlLookupFunctionEntry(local_3e0,&local_res10,(PUNWIND_HISTORY_TABLE)0x0);\n  if (FunctionEntry != (PRUNTIME_FUNCTION)0x0) {\n    *(undefined8 *)(puVar4 + 0x38) = 0;\n    *(undefined1 **)(puVar4 + 0x30) = local_res18;\n    *(undefined1 **)(puVar4 + 0x28) = local_res20;\n    *(undefined1 **)(puVar4 + 0x20) = local_4d8;\n    *(undefined8 *)(puVar4 + -8) = 0x1400039ae;\n    RtlVirtualUnwind(0,local_res10,local_3e0,FunctionEntry,*(PCONTEXT *)(puVar4 + 0x20),\n                     *(PVOID **)(puVar4 + 0x28),*(PDWORD64 *)(puVar4 + 0x30),\n                     *(PKNONVOLATILE_CONTEXT_POINTERS *)(puVar4 + 0x38));\n  }\n  local_440 = &stack0x00000008;\n  *(undefined8 *)(puVar4 + -8) = 0x1400039e0;\n  memset(puVar4 + 0x50,0,0x98);\n  *(undefined8 *)(puVar4 + 0x60) = unaff_retaddr;\n  *(undefined4 *)(puVar4 + 0x50) = 0x40000015;\n  *(undefined4 *)(puVar4 + 0x54) = 1;\n  *(undefined8 *)(puVar4 + -8) = 0x140003a02;\n  BVar2 = IsDebuggerPresent();\n  *(undefined1 **)(puVar4 + 0x40) = puVar4 + 0x50;\n  *(undefined1 **)(puVar4 + 0x48) = local_4d8;\n  *(undefined8 *)(puVar4 + -8) = 0x140003a1f;\n  SetUnhandledExceptionFilter((LPTOP_LEVEL_EXCEPTION_FILTER)0x0);\n  *(undefined8 *)(puVar4 + -8) = 0x140003a2a;\n  LVar3 = UnhandledExceptionFilter((_EXCEPTION_POINTERS *)(puVar4 + 0x40));\n  if ((LVar3 == 0) && (BVar2 != 1)) {\n    *(undefined8 *)(puVar4 + -8) = 0x140003a3b;\n    FUN_1400038fc();\n  }\n  return;\n}\n\n", 
      "name": "FUN_140003904", 
      "entry_point": "0x140003904"
    }, 
    {
      "signature": "WORD __fastcall __scrt_get_show_window_mode(void)", 
      "disassembly": [
        {
          "address": "0x140003a4c", 
          "code": "SUB RSP,0x98"
        }, 
        {
          "address": "0x140003a53", 
          "code": "XOR EDX,EDX"
        }, 
        {
          "address": "0x140003a55", 
          "code": "LEA RCX,[RSP + 0x20]"
        }, 
        {
          "address": "0x140003a5a", 
          "code": "LEA R8D,[RDX + 0x68]"
        }, 
        {
          "address": "0x140003a5e", 
          "code": "CALL 0x140004098"
        }, 
        {
          "address": "0x140003a63", 
          "code": "LEA RCX,[RSP + 0x20]"
        }, 
        {
          "address": "0x140003a68", 
          "code": "CALL qword ptr [0x1400050a0]"
        }, 
        {
          "address": "0x140003a6e", 
          "code": "TEST byte ptr [RSP + 0x5c],0x1"
        }, 
        {
          "address": "0x140003a73", 
          "code": "MOV EAX,0xa"
        }, 
        {
          "address": "0x140003a78", 
          "code": "CMOVNZ AX,word ptr [RSP + 0x60]"
        }, 
        {
          "address": "0x140003a7e", 
          "code": "ADD RSP,0x98"
        }, 
        {
          "address": "0x140003a85", 
          "code": "RET"
        }
      ], 
      "c_code": "\n/* Library Function - Single Match\n    __scrt_get_show_window_mode\n   \n   Libraries: Visual Studio 2017 Release, Visual Studio 2019 Release */\n\nWORD __scrt_get_show_window_mode(void)\n\n{\n  WORD WVar1;\n  _STARTUPINFOW local_78;\n  \n  memset(&local_78,0,0x68);\n  GetStartupInfoW(&local_78);\n  WVar1 = 10;\n  if (((byte)local_78.dwFlags & 1) != 0) {\n    WVar1 = local_78.wShowWindow;\n  }\n  return WVar1;\n}\n\n", 
      "name": "__scrt_get_show_window_mode", 
      "entry_point": "0x140003a4c"
    }, 
    {
      "signature": "undefined8 __fastcall thunk_FUN_140001370(void)", 
      "disassembly": [
        {
          "address": "0x140003a88", 
          "code": "JMP 0x140001370"
        }
      ], 
      "c_code": "\nundefined8 thunk_FUN_140001370(void)\n\n{\n  return 0;\n}\n\n", 
      "name": "thunk_FUN_140001370", 
      "entry_point": "0x140003a88"
    }, 
    {
      "signature": "ulonglong __fastcall FUN_140003a90(void)", 
      "disassembly": [
        {
          "address": "0x140003a90", 
          "code": "SUB RSP,0x28"
        }, 
        {
          "address": "0x140003a94", 
          "code": "XOR ECX,ECX"
        }, 
        {
          "address": "0x140003a96", 
          "code": "CALL qword ptr [0x1400050b0]"
        }, 
        {
          "address": "0x140003a9c", 
          "code": "TEST RAX,RAX"
        }, 
        {
          "address": "0x140003a9f", 
          "code": "JZ 0x140003ada"
        }, 
        {
          "address": "0x140003aa1", 
          "code": "MOV ECX,0x5a4d"
        }, 
        {
          "address": "0x140003aa6", 
          "code": "CMP word ptr [RAX],CX"
        }, 
        {
          "address": "0x140003aa9", 
          "code": "JNZ 0x140003ada"
        }, 
        {
          "address": "0x140003aab", 
          "code": "MOVSXD RCX,dword ptr [RAX + 0x3c]"
        }, 
        {
          "address": "0x140003aaf", 
          "code": "ADD RCX,RAX"
        }, 
        {
          "address": "0x140003ab2", 
          "code": "CMP dword ptr [RCX],0x4550"
        }, 
        {
          "address": "0x140003ab8", 
          "code": "JNZ 0x140003ada"
        }, 
        {
          "address": "0x140003aba", 
          "code": "MOV EAX,0x20b"
        }, 
        {
          "address": "0x140003abf", 
          "code": "CMP word ptr [RCX + 0x18],AX"
        }, 
        {
          "address": "0x140003ac3", 
          "code": "JNZ 0x140003ada"
        }, 
        {
          "address": "0x140003ac5", 
          "code": "CMP dword ptr [RCX + 0x84],0xe"
        }, 
        {
          "address": "0x140003acc", 
          "code": "JBE 0x140003ada"
        }, 
        {
          "address": "0x140003ace", 
          "code": "CMP dword ptr [RCX + 0xf8],0x0"
        }, 
        {
          "address": "0x140003ad5", 
          "code": "SETNZ AL"
        }, 
        {
          "address": "0x140003ad8", 
          "code": "JMP 0x140003adc"
        }, 
        {
          "address": "0x140003ada", 
          "code": "XOR AL,AL"
        }, 
        {
          "address": "0x140003adc", 
          "code": "ADD RSP,0x28"
        }, 
        {
          "address": "0x140003ae0", 
          "code": "RET"
        }
      ], 
      "c_code": "\nulonglong FUN_140003a90(void)\n\n{\n  HMODULE pHVar1;\n  ulonglong uVar2;\n  int *piVar3;\n  \n  pHVar1 = GetModuleHandleW((LPCWSTR)0x0);\n  if ((((pHVar1 == (HMODULE)0x0) || ((short)pHVar1->unused != 0x5a4d)) ||\n      (piVar3 = (int *)((longlong)&pHVar1->unused + (longlong)pHVar1[0xf].unused), *piVar3 != 0x4550\n      )) || ((pHVar1 = (HMODULE)0x20b, (short)piVar3[6] != 0x20b || ((uint)piVar3[0x21] < 0xf)))) {\n    uVar2 = (ulonglong)pHVar1 & 0xffffffffffffff00;\n  }\n  else {\n    uVar2 = CONCAT71(2,piVar3[0x3e] != 0);\n  }\n  return uVar2;\n}\n\n", 
      "name": "FUN_140003a90", 
      "entry_point": "0x140003a90"
    }, 
    {
      "signature": "undefined __fastcall FUN_140003ae4(void)", 
      "disassembly": [
        {
          "address": "0x140003ae4", 
          "code": "LEA RCX,[0x140003af4]"
        }, 
        {
          "address": "0x140003aeb", 
          "code": "JMP qword ptr [0x140005098]"
        }
      ], 
      "c_code": "\nvoid FUN_140003ae4(void)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x000140003aeb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  SetUnhandledExceptionFilter((LPTOP_LEVEL_EXCEPTION_FILTER)&LAB_140003af4);\n  return;\n}\n\n", 
      "name": "FUN_140003ae4", 
      "entry_point": "0x140003ae4"
    }, 
    {
      "signature": "undefined __fastcall FUN_140003b50(void)", 
      "disassembly": [
        {
          "address": "0x140003b50", 
          "code": "MOV qword ptr [RSP + 0x8],RBX"
        }, 
        {
          "address": "0x140003b55", 
          "code": "PUSH RDI"
        }, 
        {
          "address": "0x140003b56", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x140003b5a", 
          "code": "LEA RBX,[0x140007a88]"
        }, 
        {
          "address": "0x140003b61", 
          "code": "LEA RDI,[0x140007a88]"
        }, 
        {
          "address": "0x140003b68", 
          "code": "JMP 0x140003b7c"
        }, 
        {
          "address": "0x140003b6a", 
          "code": "MOV RAX,qword ptr [RBX]"
        }, 
        {
          "address": "0x140003b6d", 
          "code": "TEST RAX,RAX"
        }, 
        {
          "address": "0x140003b70", 
          "code": "JZ 0x140003b78"
        }, 
        {
          "address": "0x140003b72", 
          "code": "CALL qword ptr [0x1400058c0]"
        }, 
        {
          "address": "0x140003b78", 
          "code": "ADD RBX,0x8"
        }, 
        {
          "address": "0x140003b7c", 
          "code": "CMP RBX,RDI"
        }, 
        {
          "address": "0x140003b7f", 
          "code": "JC 0x140003b6a"
        }, 
        {
          "address": "0x140003b81", 
          "code": "MOV RBX,qword ptr [RSP + 0x30]"
        }, 
        {
          "address": "0x140003b86", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x140003b8a", 
          "code": "POP RDI"
        }, 
        {
          "address": "0x140003b8b", 
          "code": "RET"
        }
      ], 
      "c_code": "\nvoid FUN_140003b50(void)\n\n{\n  longlong *plVar1;\n  \n  for (plVar1 = &DAT_140007a88; plVar1 < &DAT_140007a88; plVar1 = plVar1 + 1) {\n    if (*plVar1 != 0) {\n      (*(code *)PTR__guard_dispatch_icall_1400058c0)();\n    }\n  }\n  return;\n}\n\n", 
      "name": "FUN_140003b50", 
      "entry_point": "0x140003b50"
    }, 
    {
      "signature": "undefined __fastcall __raise_securityfailure(_EXCEPTION_POINTERS * param_1)", 
      "disassembly": [
        {
          "address": "0x140003bc8", 
          "code": "PUSH RBX"
        }, 
        {
          "address": "0x140003bca", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x140003bce", 
          "code": "MOV RBX,RCX"
        }, 
        {
          "address": "0x140003bd1", 
          "code": "XOR ECX,ECX"
        }, 
        {
          "address": "0x140003bd3", 
          "code": "CALL qword ptr [0x140005098]"
        }, 
        {
          "address": "0x140003bd9", 
          "code": "MOV RCX,RBX"
        }, 
        {
          "address": "0x140003bdc", 
          "code": "CALL qword ptr [0x140005090]"
        }, 
        {
          "address": "0x140003be2", 
          "code": "CALL qword ptr [0x1400050b8]"
        }, 
        {
          "address": "0x140003be8", 
          "code": "MOV RCX,RAX"
        }, 
        {
          "address": "0x140003beb", 
          "code": "MOV EDX,0xc0000409"
        }, 
        {
          "address": "0x140003bf0", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x140003bf4", 
          "code": "POP RBX"
        }, 
        {
          "address": "0x140003bf5", 
          "code": "JMP qword ptr [0x1400050c0]"
        }
      ], 
      "c_code": "\n/* Library Function - Single Match\n    __raise_securityfailure\n   \n   Libraries: Visual Studio 2015 Release, Visual Studio 2017 Release, Visual Studio 2019 Release */\n\nvoid __raise_securityfailure(_EXCEPTION_POINTERS *param_1)\n\n{\n  HANDLE pvVar1;\n  \n  SetUnhandledExceptionFilter((LPTOP_LEVEL_EXCEPTION_FILTER)0x0);\n  UnhandledExceptionFilter(param_1);\n  pvVar1 = GetCurrentProcess();\n                    /* WARNING: Could not recover jumptable at 0x000140003bf5. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  TerminateProcess(pvVar1,0xc0000409);\n  return;\n}\n\n", 
      "name": "__raise_securityfailure", 
      "entry_point": "0x140003bc8"
    }, 
    {
      "signature": "undefined __fastcall FUN_140003bfc(void)", 
      "disassembly": [
        {
          "address": "0x140003bfc", 
          "code": "MOV qword ptr [RSP + 0x8],RCX"
        }, 
        {
          "address": "0x140003c01", 
          "code": "SUB RSP,0x38"
        }, 
        {
          "address": "0x140003c05", 
          "code": "MOV ECX,0x17"
        }, 
        {
          "address": "0x140003c0a", 
          "code": "CALL qword ptr [0x1400050a8]"
        }, 
        {
          "address": "0x140003c10", 
          "code": "TEST EAX,EAX"
        }, 
        {
          "address": "0x140003c12", 
          "code": "JZ 0x140003c1b"
        }, 
        {
          "address": "0x140003c14", 
          "code": "MOV ECX,0x2"
        }, 
        {
          "address": "0x140003c19", 
          "code": "INT 0x29"
        }, 
        {
          "address": "0x140003c1b", 
          "code": "LEA RCX,[0x14000a700]"
        }, 
        {
          "address": "0x140003c22", 
          "code": "CALL 0x140003cd0"
        }, 
        {
          "address": "0x140003c27", 
          "code": "MOV RAX,qword ptr [RSP + 0x38]"
        }, 
        {
          "address": "0x140003c2c", 
          "code": "MOV qword ptr [0x14000a7f8],RAX"
        }, 
        {
          "address": "0x140003c33", 
          "code": "LEA RAX,[RSP + 0x38]"
        }, 
        {
          "address": "0x140003c38", 
          "code": "ADD RAX,0x8"
        }, 
        {
          "address": "0x140003c3c", 
          "code": "MOV qword ptr [0x14000a798],RAX"
        }, 
        {
          "address": "0x140003c43", 
          "code": "MOV RAX,qword ptr [0x14000a7f8]"
        }, 
        {
          "address": "0x140003c4a", 
          "code": "MOV qword ptr [0x14000a670],RAX"
        }, 
        {
          "address": "0x140003c51", 
          "code": "MOV RAX,qword ptr [RSP + 0x40]"
        }, 
        {
          "address": "0x140003c56", 
          "code": "MOV qword ptr [0x14000a780],RAX"
        }, 
        {
          "address": "0x140003c5d", 
          "code": "MOV dword ptr [0x14000a660],0xc0000409"
        }, 
        {
          "address": "0x140003c67", 
          "code": "MOV dword ptr [0x14000a664],0x1"
        }, 
        {
          "address": "0x140003c71", 
          "code": "MOV dword ptr [0x14000a678],0x1"
        }, 
        {
          "address": "0x140003c7b", 
          "code": "MOV EAX,0x8"
        }, 
        {
          "address": "0x140003c80", 
          "code": "IMUL RAX,RAX,0x0"
        }, 
        {
          "address": "0x140003c84", 
          "code": "LEA RCX,[0x14000a680]"
        }, 
        {
          "address": "0x140003c8b", 
          "code": "MOV qword ptr [RCX + RAX*0x1],0x2"
        }, 
        {
          "address": "0x140003c93", 
          "code": "MOV EAX,0x8"
        }, 
        {
          "address": "0x140003c98", 
          "code": "IMUL RAX,RAX,0x0"
        }, 
        {
          "address": "0x140003c9c", 
          "code": "MOV RCX,qword ptr [0x14000a040]"
        }, 
        {
          "address": "0x140003ca3", 
          "code": "MOV qword ptr [RSP + RAX*0x1 + 0x20],RCX"
        }, 
        {
          "address": "0x140003ca8", 
          "code": "MOV EAX,0x8"
        }, 
        {
          "address": "0x140003cad", 
          "code": "IMUL RAX,RAX,0x1"
        }, 
        {
          "address": "0x140003cb1", 
          "code": "MOV RCX,qword ptr [0x14000a080]"
        }, 
        {
          "address": "0x140003cb8", 
          "code": "MOV qword ptr [RSP + RAX*0x1 + 0x20],RCX"
        }, 
        {
          "address": "0x140003cbd", 
          "code": "LEA RCX,[0x140005990]"
        }, 
        {
          "address": "0x140003cc4", 
          "code": "CALL 0x140003bc8"
        }, 
        {
          "address": "0x140003cc9", 
          "code": "ADD RSP,0x38"
        }, 
        {
          "address": "0x140003ccd", 
          "code": "RET"
        }
      ], 
      "c_code": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nvoid FUN_140003bfc(void)\n\n{\n  code *pcVar1;\n  BOOL BVar2;\n  undefined1 *puVar3;\n  undefined1 auStack_38 [8];\n  undefined1 auStack_30 [48];\n  \n  puVar3 = auStack_38;\n  BVar2 = IsProcessorFeaturePresent(0x17);\n  if (BVar2 != 0) {\n    pcVar1 = (code *)swi(0x29);\n    (*pcVar1)(2);\n    puVar3 = auStack_30;\n  }\n  *(undefined8 *)(puVar3 + -8) = 0x140003c27;\n  capture_previous_context((PCONTEXT)&DAT_14000a700);\n  _DAT_14000a670 = *(undefined8 *)(puVar3 + 0x38);\n  _DAT_14000a798 = puVar3 + 0x40;\n  _DAT_14000a780 = *(undefined8 *)(puVar3 + 0x40);\n  _DAT_14000a660 = 0xc0000409;\n  _DAT_14000a664 = 1;\n  _DAT_14000a678 = 1;\n  DAT_14000a680 = 2;\n  *(undefined8 *)(puVar3 + 0x20) = DAT_14000a040;\n  *(undefined8 *)(puVar3 + 0x28) = DAT_14000a080;\n  *(undefined8 *)(puVar3 + -8) = 0x140003cc9;\n  DAT_14000a7f8 = _DAT_14000a670;\n  __raise_securityfailure((_EXCEPTION_POINTERS *)&PTR_DAT_140005990);\n  return;\n}\n\n", 
      "name": "FUN_140003bfc", 
      "entry_point": "0x140003bfc"
    }, 
    {
      "signature": "undefined __fastcall capture_previous_context(PCONTEXT param_1)", 
      "disassembly": [
        {
          "address": "0x140003cd0", 
          "code": "PUSH RBX"
        }, 
        {
          "address": "0x140003cd2", 
          "code": "PUSH RSI"
        }, 
        {
          "address": "0x140003cd3", 
          "code": "PUSH RDI"
        }, 
        {
          "address": "0x140003cd4", 
          "code": "SUB RSP,0x40"
        }, 
        {
          "address": "0x140003cd8", 
          "code": "MOV RBX,RCX"
        }, 
        {
          "address": "0x140003cdb", 
          "code": "CALL qword ptr [0x140005070]"
        }, 
        {
          "address": "0x140003ce1", 
          "code": "MOV RSI,qword ptr [RBX + 0xf8]"
        }, 
        {
          "address": "0x140003ce8", 
          "code": "XOR EDI,EDI"
        }, 
        {
          "address": "0x140003cea", 
          "code": "XOR R8D,R8D"
        }, 
        {
          "address": "0x140003ced", 
          "code": "LEA RDX,[RSP + 0x60]"
        }, 
        {
          "address": "0x140003cf2", 
          "code": "MOV RCX,RSI"
        }, 
        {
          "address": "0x140003cf5", 
          "code": "CALL qword ptr [0x140005078]"
        }, 
        {
          "address": "0x140003cfb", 
          "code": "TEST RAX,RAX"
        }, 
        {
          "address": "0x140003cfe", 
          "code": "JZ 0x140003d39"
        }, 
        {
          "address": "0x140003d00", 
          "code": "AND qword ptr [RSP + 0x38],0x0"
        }, 
        {
          "address": "0x140003d06", 
          "code": "LEA RCX,[RSP + 0x68]"
        }, 
        {
          "address": "0x140003d0b", 
          "code": "MOV RDX,qword ptr [RSP + 0x60]"
        }, 
        {
          "address": "0x140003d10", 
          "code": "MOV R9,RAX"
        }, 
        {
          "address": "0x140003d13", 
          "code": "MOV qword ptr [RSP + 0x30],RCX"
        }, 
        {
          "address": "0x140003d18", 
          "code": "MOV R8,RSI"
        }, 
        {
          "address": "0x140003d1b", 
          "code": "LEA RCX,[RSP + 0x70]"
        }, 
        {
          "address": "0x140003d20", 
          "code": "MOV qword ptr [RSP + 0x28],RCX"
        }, 
        {
          "address": "0x140003d25", 
          "code": "XOR ECX,ECX"
        }, 
        {
          "address": "0x140003d27", 
          "code": "MOV qword ptr [RSP + 0x20],RBX"
        }, 
        {
          "address": "0x140003d2c", 
          "code": "CALL qword ptr [0x140005080]"
        }, 
        {
          "address": "0x140003d32", 
          "code": "INC EDI"
        }, 
        {
          "address": "0x140003d34", 
          "code": "CMP EDI,0x2"
        }, 
        {
          "address": "0x140003d37", 
          "code": "JL 0x140003cea"
        }, 
        {
          "address": "0x140003d39", 
          "code": "ADD RSP,0x40"
        }, 
        {
          "address": "0x140003d3d", 
          "code": "POP RDI"
        }, 
        {
          "address": "0x140003d3e", 
          "code": "POP RSI"
        }, 
        {
          "address": "0x140003d3f", 
          "code": "POP RBX"
        }, 
        {
          "address": "0x140003d40", 
          "code": "RET"
        }
      ], 
      "c_code": "\n/* Library Function - Single Match\n    capture_previous_context\n   \n   Libraries: Visual Studio 2015 Release, Visual Studio 2017 Release, Visual Studio 2019 Release */\n\nvoid capture_previous_context(PCONTEXT param_1)\n\n{\n  DWORD64 ControlPc;\n  PRUNTIME_FUNCTION FunctionEntry;\n  int iVar1;\n  DWORD64 local_res8;\n  ulonglong local_res10;\n  PVOID local_res18 [2];\n  \n  RtlCaptureContext();\n  ControlPc = param_1->Rip;\n  iVar1 = 0;\n  do {\n    FunctionEntry = RtlLookupFunctionEntry(ControlPc,&local_res8,(PUNWIND_HISTORY_TABLE)0x0);\n    if (FunctionEntry == (PRUNTIME_FUNCTION)0x0) {\n      return;\n    }\n    RtlVirtualUnwind(0,local_res8,ControlPc,FunctionEntry,param_1,local_res18,&local_res10,\n                     (PKNONVOLATILE_CONTEXT_POINTERS)0x0);\n    iVar1 = iVar1 + 1;\n  } while (iVar1 < 2);\n  return;\n}\n\n", 
      "name": "capture_previous_context", 
      "entry_point": "0x140003cd0"
    }, 
    {
      "signature": "undefined8 __fastcall FUN_140003d44(void)", 
      "disassembly": [
        {
          "address": "0x140003d44", 
          "code": "MOV qword ptr [RSP + 0x10],RBX"
        }, 
        {
          "address": "0x140003d49", 
          "code": "MOV qword ptr [RSP + 0x18],RSI"
        }, 
        {
          "address": "0x140003d4e", 
          "code": "PUSH RDI"
        }, 
        {
          "address": "0x140003d4f", 
          "code": "SUB RSP,0x10"
        }, 
        {
          "address": "0x140003d53", 
          "code": "XOR EAX,EAX"
        }, 
        {
          "address": "0x140003d55", 
          "code": "XOR ECX,ECX"
        }, 
        {
          "address": "0x140003d57", 
          "code": "CPUID"
        }, 
        {
          "address": "0x140003d59", 
          "code": "MOV R8D,ECX"
        }, 
        {
          "address": "0x140003d5c", 
          "code": "XOR R11D,R11D"
        }, 
        {
          "address": "0x140003d5f", 
          "code": "MOV R10D,EDX"
        }, 
        {
          "address": "0x140003d62", 
          "code": "XOR R8D,0x6c65746e"
        }, 
        {
          "address": "0x140003d69", 
          "code": "XOR R10D,0x49656e69"
        }, 
        {
          "address": "0x140003d70", 
          "code": "MOV R9D,EBX"
        }, 
        {
          "address": "0x140003d73", 
          "code": "MOV ESI,EAX"
        }, 
        {
          "address": "0x140003d75", 
          "code": "XOR ECX,ECX"
        }, 
        {
          "address": "0x140003d77", 
          "code": "LEA EAX,[R11 + 0x1]"
        }, 
        {
          "address": "0x140003d7b", 
          "code": "OR R10D,R8D"
        }, 
        {
          "address": "0x140003d7e", 
          "code": "CPUID"
        }, 
        {
          "address": "0x140003d80", 
          "code": "XOR R9D,0x756e6547"
        }, 
        {
          "address": "0x140003d87", 
          "code": "MOV dword ptr [RSP],EAX"
        }, 
        {
          "address": "0x140003d8a", 
          "code": "OR R10D,R9D"
        }, 
        {
          "address": "0x140003d8d", 
          "code": "MOV dword ptr [RSP + 0x4],EBX"
        }, 
        {
          "address": "0x140003d91", 
          "code": "MOV EDI,ECX"
        }, 
        {
          "address": "0x140003d93", 
          "code": "MOV dword ptr [RSP + 0x8],ECX"
        }, 
        {
          "address": "0x140003d97", 
          "code": "MOV dword ptr [RSP + 0xc],EDX"
        }, 
        {
          "address": "0x140003d9b", 
          "code": "JNZ 0x140003df8"
        }, 
        {
          "address": "0x140003d9d", 
          "code": "OR qword ptr [0x14000a0a0],-0x1"
        }, 
        {
          "address": "0x140003da5", 
          "code": "AND EAX,0xfff3ff0"
        }, 
        {
          "address": "0x140003daa", 
          "code": "MOV qword ptr [0x14000a098],0x8000"
        }, 
        {
          "address": "0x140003db5", 
          "code": "CMP EAX,0x106c0"
        }, 
        {
          "address": "0x140003dba", 
          "code": "JZ 0x140003de4"
        }, 
        {
          "address": "0x140003dbc", 
          "code": "CMP EAX,0x20660"
        }, 
        {
          "address": "0x140003dc1", 
          "code": "JZ 0x140003de4"
        }, 
        {
          "address": "0x140003dc3", 
          "code": "CMP EAX,0x20670"
        }, 
        {
          "address": "0x140003dc8", 
          "code": "JZ 0x140003de4"
        }, 
        {
          "address": "0x140003dca", 
          "code": "ADD EAX,0xfffcf9b0"
        }, 
        {
          "address": "0x140003dcf", 
          "code": "CMP EAX,0x20"
        }, 
        {
          "address": "0x140003dd2", 
          "code": "JA 0x140003df8"
        }, 
        {
          "address": "0x140003dd4", 
          "code": "MOV RCX,0x100010001"
        }, 
        {
          "address": "0x140003dde", 
          "code": "BT RCX,RAX"
        }, 
        {
          "address": "0x140003de2", 
          "code": "JNC 0x140003df8"
        }, 
        {
          "address": "0x140003de4", 
          "code": "MOV R8D,dword ptr [0x14000abd0]"
        }, 
        {
          "address": "0x140003deb", 
          "code": "OR R8D,0x1"
        }, 
        {
          "address": "0x140003def", 
          "code": "MOV dword ptr [0x14000abd0],R8D"
        }, 
        {
          "address": "0x140003df6", 
          "code": "JMP 0x140003dff"
        }, 
        {
          "address": "0x140003df8", 
          "code": "MOV R8D,dword ptr [0x14000abd0]"
        }, 
        {
          "address": "0x140003dff", 
          "code": "MOV EAX,0x7"
        }, 
        {
          "address": "0x140003e04", 
          "code": "LEA R9D,[RAX + -0x5]"
        }, 
        {
          "address": "0x140003e08", 
          "code": "CMP ESI,EAX"
        }, 
        {
          "address": "0x140003e0a", 
          "code": "JL 0x140003e32"
        }, 
        {
          "address": "0x140003e0c", 
          "code": "XOR ECX,ECX"
        }, 
        {
          "address": "0x140003e0e", 
          "code": "CPUID"
        }, 
        {
          "address": "0x140003e10", 
          "code": "MOV dword ptr [RSP],EAX"
        }, 
        {
          "address": "0x140003e13", 
          "code": "MOV R11D,EBX"
        }, 
        {
          "address": "0x140003e16", 
          "code": "MOV dword ptr [RSP + 0x4],EBX"
        }, 
        {
          "address": "0x140003e1a", 
          "code": "MOV dword ptr [RSP + 0x8],ECX"
        }, 
        {
          "address": "0x140003e1e", 
          "code": "MOV dword ptr [RSP + 0xc],EDX"
        }, 
        {
          "address": "0x140003e22", 
          "code": "BT EBX,0x9"
        }, 
        {
          "address": "0x140003e26", 
          "code": "JNC 0x140003e32"
        }, 
        {
          "address": "0x140003e28", 
          "code": "OR R8D,R9D"
        }, 
        {
          "address": "0x140003e2b", 
          "code": "MOV dword ptr [0x14000abd0],R8D"
        }, 
        {
          "address": "0x140003e32", 
          "code": "MOV dword ptr [0x14000a090],0x1"
        }, 
        {
          "address": "0x140003e3c", 
          "code": "MOV dword ptr [0x14000a094],R9D"
        }, 
        {
          "address": "0x140003e43", 
          "code": "BT EDI,0x14"
        }, 
        {
          "address": "0x140003e47", 
          "code": "JNC 0x140003ede"
        }, 
        {
          "address": "0x140003e4d", 
          "code": "MOV dword ptr [0x14000a090],R9D"
        }, 
        {
          "address": "0x140003e54", 
          "code": "MOV EBX,0x6"
        }, 
        {
          "address": "0x140003e59", 
          "code": "MOV dword ptr [0x14000a094],EBX"
        }, 
        {
          "address": "0x140003e5f", 
          "code": "BT EDI,0x1b"
        }, 
        {
          "address": "0x140003e63", 
          "code": "JNC 0x140003ede"
        }, 
        {
          "address": "0x140003e65", 
          "code": "BT EDI,0x1c"
        }, 
        {
          "address": "0x140003e69", 
          "code": "JNC 0x140003ede"
        }, 
        {
          "address": "0x140003e6b", 
          "code": "XOR ECX,ECX"
        }, 
        {
          "address": "0x140003e6d", 
          "code": "XGETBV"
        }, 
        {
          "address": "0x140003e70", 
          "code": "SHL RDX,0x20"
        }, 
        {
          "address": "0x140003e74", 
          "code": "OR RDX,RAX"
        }, 
        {
          "address": "0x140003e77", 
          "code": "MOV qword ptr [RSP + 0x20],RDX"
        }, 
        {
          "address": "0x140003e7c", 
          "code": "MOV RAX,qword ptr [RSP + 0x20]"
        }, 
        {
          "address": "0x140003e81", 
          "code": "AND AL,BL"
        }, 
        {
          "address": "0x140003e83", 
          "code": "CMP AL,BL"
        }, 
        {
          "address": "0x140003e85", 
          "code": "JNZ 0x140003ede"
        }, 
        {
          "address": "0x140003e87", 
          "code": "MOV EAX,dword ptr [0x14000a094]"
        }, 
        {
          "address": "0x140003e8d", 
          "code": "OR EAX,0x8"
        }, 
        {
          "address": "0x140003e90", 
          "code": "MOV dword ptr [0x14000a090],0x3"
        }, 
        {
          "address": "0x140003e9a", 
          "code": "MOV dword ptr [0x14000a094],EAX"
        }, 
        {
          "address": "0x140003ea0", 
          "code": "TEST R11B,0x20"
        }, 
        {
          "address": "0x140003ea4", 
          "code": "JZ 0x140003ede"
        }, 
        {
          "address": "0x140003ea6", 
          "code": "OR EAX,0x20"
        }, 
        {
          "address": "0x140003ea9", 
          "code": "MOV dword ptr [0x14000a090],0x5"
        }, 
        {
          "address": "0x140003eb3", 
          "code": "MOV dword ptr [0x14000a094],EAX"
        }, 
        {
          "address": "0x140003eb9", 
          "code": "MOV EAX,0xd0030000"
        }, 
        {
          "address": "0x140003ebe", 
          "code": "AND R11D,EAX"
        }, 
        {
          "address": "0x140003ec1", 
          "code": "CMP R11D,EAX"
        }, 
        {
          "address": "0x140003ec4", 
          "code": "JNZ 0x140003ede"
        }, 
        {
          "address": "0x140003ec6", 
          "code": "MOV RAX,qword ptr [RSP + 0x20]"
        }, 
        {
          "address": "0x140003ecb", 
          "code": "AND AL,0xe0"
        }, 
        {
          "address": "0x140003ecd", 
          "code": "CMP AL,0xe0"
        }, 
        {
          "address": "0x140003ecf", 
          "code": "JNZ 0x140003ede"
        }, 
        {
          "address": "0x140003ed1", 
          "code": "OR dword ptr [0x14000a094],0x40"
        }, 
        {
          "address": "0x140003ed8", 
          "code": "MOV dword ptr [0x14000a090],EBX"
        }, 
        {
          "address": "0x140003ede", 
          "code": "MOV RBX,qword ptr [RSP + 0x28]"
        }, 
        {
          "address": "0x140003ee3", 
          "code": "XOR EAX,EAX"
        }, 
        {
          "address": "0x140003ee5", 
          "code": "MOV RSI,qword ptr [RSP + 0x30]"
        }, 
        {
          "address": "0x140003eea", 
          "code": "ADD RSP,0x10"
        }, 
        {
          "address": "0x140003eee", 
          "code": "POP RDI"
        }, 
        {
          "address": "0x140003eef", 
          "code": "RET"
        }
      ], 
      "c_code": "\n/* WARNING: Removing unreachable block (ram,0x000140003e0e) */\n/* WARNING: Removing unreachable block (ram,0x000140003d7e) */\n/* WARNING: Removing unreachable block (ram,0x000140003d57) */\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined8 FUN_140003d44(void)\n\n{\n  int *piVar1;\n  uint *puVar2;\n  longlong lVar3;\n  uint uVar4;\n  uint uVar5;\n  uint uVar6;\n  byte in_XCR0;\n  \n  piVar1 = (int *)cpuid_basic_info(0);\n  uVar6 = 0;\n  puVar2 = (uint *)cpuid_Version_info(1);\n  uVar4 = puVar2[3];\n  if ((piVar1[2] == 0x49656e69 && piVar1[3] == 0x6c65746e) && piVar1[1] == 0x756e6547) {\n    _DAT_14000a0a0 = 0xffffffffffffffff;\n    uVar5 = *puVar2 & 0xfff3ff0;\n    _DAT_14000a098 = 0x8000;\n    if ((((uVar5 == 0x106c0) || (uVar5 == 0x20660)) || (uVar5 == 0x20670)) ||\n       ((uVar5 - 0x30650 < 0x21 &&\n        ((0x100010001U >> ((ulonglong)(uVar5 - 0x30650) & 0x3f) & 1) != 0)))) {\n      DAT_14000abd0 = DAT_14000abd0 | 1;\n    }\n  }\n  if (6 < *piVar1) {\n    lVar3 = cpuid_Extended_Feature_Enumeration_info(7);\n    uVar6 = *(uint *)(lVar3 + 4);\n    if ((uVar6 >> 9 & 1) != 0) {\n      DAT_14000abd0 = DAT_14000abd0 | 2;\n    }\n  }\n  _DAT_14000a090 = 1;\n  DAT_14000a094 = 2;\n  if ((uVar4 >> 0x14 & 1) != 0) {\n    _DAT_14000a090 = 2;\n    DAT_14000a094 = 6;\n    if ((((uVar4 >> 0x1b & 1) != 0) && ((uVar4 >> 0x1c & 1) != 0)) && ((in_XCR0 & 6) == 6)) {\n      DAT_14000a094 = 0xe;\n      _DAT_14000a090 = 3;\n      if ((uVar6 & 0x20) != 0) {\n        _DAT_14000a090 = 5;\n        DAT_14000a094 = 0x2e;\n        if (((uVar6 & 0xd0030000) == 0xd0030000) && ((in_XCR0 & 0xe0) == 0xe0)) {\n          DAT_14000a094 = 0x6e;\n          _DAT_14000a090 = 6;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n", 
      "name": "FUN_140003d44", 
      "entry_point": "0x140003d44"
    }, 
    {
      "signature": "bool __fastcall __scrt_is_ucrt_dll_in_use(void)", 
      "disassembly": [
        {
          "address": "0x140003ef0", 
          "code": "XOR EAX,EAX"
        }, 
        {
          "address": "0x140003ef2", 
          "code": "CMP dword ptr [0x14000a0b0],EAX"
        }, 
        {
          "address": "0x140003ef8", 
          "code": "SETNZ AL"
        }, 
        {
          "address": "0x140003efb", 
          "code": "RET"
        }
      ], 
      "c_code": "\n/* Library Function - Single Match\n    __scrt_is_ucrt_dll_in_use\n   \n   Library: Visual Studio 2019 Release */\n\nbool __scrt_is_ucrt_dll_in_use(void)\n\n{\n  return DAT_14000a0b0 != 0;\n}\n\n", 
      "name": "__scrt_is_ucrt_dll_in_use", 
      "entry_point": "0x140003ef0"
    }, 
    {
      "signature": "undefined __fastcall __GSHandlerCheckCommon(ulonglong param_1, longlong param_2, uint * param_3)", 
      "disassembly": [
        {
          "address": "0x140003f1c", 
          "code": "PUSH RBX"
        }, 
        {
          "address": "0x140003f1e", 
          "code": "MOV R11D,dword ptr [R8]"
        }, 
        {
          "address": "0x140003f21", 
          "code": "MOV RBX,RDX"
        }, 
        {
          "address": "0x140003f24", 
          "code": "AND R11D,0xfffffff8"
        }, 
        {
          "address": "0x140003f28", 
          "code": "MOV R9,RCX"
        }, 
        {
          "address": "0x140003f2b", 
          "code": "TEST byte ptr [R8],0x4"
        }, 
        {
          "address": "0x140003f2f", 
          "code": "MOV R10,RCX"
        }, 
        {
          "address": "0x140003f32", 
          "code": "JZ 0x140003f47"
        }, 
        {
          "address": "0x140003f34", 
          "code": "MOV EAX,dword ptr [R8 + 0x8]"
        }, 
        {
          "address": "0x140003f38", 
          "code": "MOVSXD R10,dword ptr [R8 + 0x4]"
        }, 
        {
          "address": "0x140003f3c", 
          "code": "NEG EAX"
        }, 
        {
          "address": "0x140003f3e", 
          "code": "ADD R10,RCX"
        }, 
        {
          "address": "0x140003f41", 
          "code": "MOVSXD RCX,EAX"
        }, 
        {
          "address": "0x140003f44", 
          "code": "AND R10,RCX"
        }, 
        {
          "address": "0x140003f47", 
          "code": "MOVSXD RAX,R11D"
        }, 
        {
          "address": "0x140003f4a", 
          "code": "MOV RDX,qword ptr [RAX + R10*0x1]"
        }, 
        {
          "address": "0x140003f4e", 
          "code": "MOV RAX,qword ptr [RBX + 0x10]"
        }, 
        {
          "address": "0x140003f52", 
          "code": "MOV ECX,dword ptr [RAX + 0x8]"
        }, 
        {
          "address": "0x140003f55", 
          "code": "MOV RAX,qword ptr [RBX + 0x8]"
        }, 
        {
          "address": "0x140003f59", 
          "code": "TEST byte ptr [RCX + RAX*0x1 + 0x3],0xf"
        }, 
        {
          "address": "0x140003f5e", 
          "code": "JZ 0x140003f6b"
        }, 
        {
          "address": "0x140003f60", 
          "code": "MOVZX EAX,byte ptr [RCX + RAX*0x1 + 0x3]"
        }, 
        {
          "address": "0x140003f65", 
          "code": "AND EAX,0xfffffff0"
        }, 
        {
          "address": "0x140003f68", 
          "code": "ADD R9,RAX"
        }, 
        {
          "address": "0x140003f6b", 
          "code": "XOR R9,RDX"
        }, 
        {
          "address": "0x140003f6e", 
          "code": "MOV RCX,R9"
        }, 
        {
          "address": "0x140003f71", 
          "code": "POP RBX"
        }, 
        {
          "address": "0x140003f72", 
          "code": "JMP 0x140003550"
        }
      ], 
      "c_code": "\n/* Library Function - Single Match\n    __GSHandlerCheckCommon\n   \n   Libraries: Visual Studio 2017 Release, Visual Studio 2019 Release */\n\nvoid __GSHandlerCheckCommon(ulonglong param_1,longlong param_2,uint *param_3)\n\n{\n  ulonglong uVar1;\n  ulonglong uVar2;\n  \n  uVar2 = param_1;\n  if ((*param_3 & 4) != 0) {\n    uVar2 = (longlong)(int)param_3[1] + param_1 & (longlong)(int)-param_3[2];\n  }\n  uVar1 = (ulonglong)*(uint *)(*(longlong *)(param_2 + 0x10) + 8);\n  if ((*(byte *)(uVar1 + 3 + *(longlong *)(param_2 + 8)) & 0xf) != 0) {\n    param_1 = param_1 + (*(byte *)(uVar1 + 3 + *(longlong *)(param_2 + 8)) & 0xfffffff0);\n  }\n  FUN_140003550(param_1 ^ *(ulonglong *)((longlong)(int)(*param_3 & 0xfffffff8) + uVar2));\n  return;\n}\n\n", 
      "name": "__GSHandlerCheckCommon", 
      "entry_point": "0x140003f1c"
    }, 
    {
      "signature": "undefined __thiscall CAtlBaseModule(void)", 
      "disassembly": [
        {
          "address": "0x140003f80", 
          "code": "MOV qword ptr [RSP + 0x8],RBX"
        }, 
        {
          "address": "0x140003f85", 
          "code": "PUSH RDI"
        }, 
        {
          "address": "0x140003f86", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x140003f8a", 
          "code": "XOR EDX,EDX"
        }, 
        {
          "address": "0x140003f8c", 
          "code": "MOV RDI,RCX"
        }, 
        {
          "address": "0x140003f8f", 
          "code": "LEA R8D,[RDX + 0x28]"
        }, 
        {
          "address": "0x140003f93", 
          "code": "ADD RCX,R8"
        }, 
        {
          "address": "0x140003f96", 
          "code": "CALL 0x140004098"
        }, 
        {
          "address": "0x140003f9b", 
          "code": "AND qword ptr [RDI + 0x50],0x0"
        }, 
        {
          "address": "0x140003fa0", 
          "code": "LEA RAX,[0x140000000]"
        }, 
        {
          "address": "0x140003fa7", 
          "code": "AND dword ptr [RDI + 0x58],0x0"
        }, 
        {
          "address": "0x140003fab", 
          "code": "LEA RCX,[RDI + 0x28]"
        }, 
        {
          "address": "0x140003faf", 
          "code": "AND dword ptr [RDI + 0x5c],0x0"
        }, 
        {
          "address": "0x140003fb3", 
          "code": "XOR R8D,R8D"
        }, 
        {
          "address": "0x140003fb6", 
          "code": "MOV qword ptr [RDI + 0x10],RAX"
        }, 
        {
          "address": "0x140003fba", 
          "code": "XOR EDX,EDX"
        }, 
        {
          "address": "0x140003fbc", 
          "code": "MOV qword ptr [RDI + 0x8],RAX"
        }, 
        {
          "address": "0x140003fc0", 
          "code": "LEA RAX,[0x1400059a0]"
        }, 
        {
          "address": "0x140003fc7", 
          "code": "MOV qword ptr [RDI + 0x20],RAX"
        }, 
        {
          "address": "0x140003fcb", 
          "code": "MOV dword ptr [RDI],0x60"
        }, 
        {
          "address": "0x140003fd1", 
          "code": "MOV dword ptr [RDI + 0x18],0xe00"
        }, 
        {
          "address": "0x140003fd8", 
          "code": "CALL 0x140002f70"
        }, 
        {
          "address": "0x140003fdd", 
          "code": "TEST EAX,EAX"
        }, 
        {
          "address": "0x140003fdf", 
          "code": "JNZ 0x140004017"
        }, 
        {
          "address": "0x140003fe1", 
          "code": "CALL qword ptr [0x1400050d0]"
        }, 
        {
          "address": "0x140003fe7", 
          "code": "MOVZX ECX,AX"
        }, 
        {
          "address": "0x140003fea", 
          "code": "OR ECX,0x80070000"
        }, 
        {
          "address": "0x140003ff0", 
          "code": "TEST EAX,EAX"
        }, 
        {
          "address": "0x140003ff2", 
          "code": "CMOVLE ECX,EAX"
        }, 
        {
          "address": "0x140003ff5", 
          "code": "TEST ECX,ECX"
        }, 
        {
          "address": "0x140003ff7", 
          "code": "JNS 0x140004017"
        }, 
        {
          "address": "0x140003ff9", 
          "code": "CALL qword ptr [0x140005088]"
        }, 
        {
          "address": "0x140003fff", 
          "code": "TEST EAX,EAX"
        }, 
        {
          "address": "0x140004001", 
          "code": "JZ 0x140004010"
        }, 
        {
          "address": "0x140004003", 
          "code": "LEA RCX,[0x1400059b0]"
        }, 
        {
          "address": "0x14000400a", 
          "code": "CALL qword ptr [0x1400050d8]"
        }, 
        {
          "address": "0x140004010", 
          "code": "MOV byte ptr [0x14000ac4c],0x1"
        }, 
        {
          "address": "0x140004017", 
          "code": "MOV RBX,qword ptr [RSP + 0x30]"
        }, 
        {
          "address": "0x14000401c", 
          "code": "MOV RAX,RDI"
        }, 
        {
          "address": "0x14000401f", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x140004023", 
          "code": "POP RDI"
        }, 
        {
          "address": "0x140004024", 
          "code": "RET"
        }
      ], 
      "c_code": "\n/* Library Function - Single Match\n    public: __cdecl ATL::CAtlBaseModule::CAtlBaseModule(void) __ptr64\n   \n   Libraries: Visual Studio 2017 Release, Visual Studio 2019 Release */\n\nCAtlBaseModule * __thiscall ATL::CAtlBaseModule::CAtlBaseModule(CAtlBaseModule *this)\n\n{\n  DWORD DVar1;\n  BOOL BVar2;\n  DWORD DVar3;\n  \n  memset(this + 0x28,0,0x28);\n  *(undefined8 *)(this + 0x50) = 0;\n  *(undefined4 *)(this + 0x58) = 0;\n  *(undefined4 *)(this + 0x5c) = 0;\n  *(IMAGE_DOS_HEADER **)(this + 0x10) = &IMAGE_DOS_HEADER_140000000;\n  *(IMAGE_DOS_HEADER **)(this + 8) = &IMAGE_DOS_HEADER_140000000;\n  *(undefined **)(this + 0x20) = &DAT_1400059a0;\n  *(undefined4 *)this = 0x60;\n  *(undefined4 *)(this + 0x18) = 0xe00;\n  BVar2 = InitializeCriticalSectionEx((LPCRITICAL_SECTION)(this + 0x28),0,0);\n  if (BVar2 == 0) {\n    DVar3 = GetLastError();\n    DVar1 = DVar3 & 0xffff | 0x80070000;\n    if ((int)DVar3 < 1) {\n      DVar1 = DVar3;\n    }\n    if ((int)DVar1 < 0) {\n      BVar2 = IsDebuggerPresent();\n      if (BVar2 != 0) {\n        OutputDebugStringW(L\"ERROR : Unable to initialize critical section in CAtlBaseModule\\n\");\n      }\n      DAT_14000ac4c = 1;\n    }\n  }\n  return this;\n}\n\n", 
      "name": "CAtlBaseModule", 
      "entry_point": "0x140003f80"
    }, 
    {
      "signature": "void __thiscall ~CAtlBaseModule(void)", 
      "disassembly": [
        {
          "address": "0x140004028", 
          "code": "PUSH RBX"
        }, 
        {
          "address": "0x14000402a", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x14000402e", 
          "code": "MOV RBX,RCX"
        }, 
        {
          "address": "0x140004031", 
          "code": "ADD RCX,0x28"
        }, 
        {
          "address": "0x140004035", 
          "code": "CALL qword ptr [0x140005048]"
        }, 
        {
          "address": "0x14000403b", 
          "code": "MOV RCX,qword ptr [RBX + 0x50]"
        }, 
        {
          "address": "0x14000403f", 
          "code": "TEST RCX,RCX"
        }, 
        {
          "address": "0x140004042", 
          "code": "JZ 0x14000404e"
        }, 
        {
          "address": "0x140004044", 
          "code": "CALL 0x1400040b6"
        }, 
        {
          "address": "0x140004049", 
          "code": "AND qword ptr [RBX + 0x50],0x0"
        }, 
        {
          "address": "0x14000404e", 
          "code": "AND dword ptr [RBX + 0x58],0x0"
        }, 
        {
          "address": "0x140004052", 
          "code": "AND dword ptr [RBX + 0x5c],0x0"
        }, 
        {
          "address": "0x140004056", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x14000405a", 
          "code": "POP RBX"
        }, 
        {
          "address": "0x14000405b", 
          "code": "RET"
        }
      ], 
      "c_code": "\n/* Library Function - Single Match\n    public: __cdecl ATL::CAtlBaseModule::~CAtlBaseModule(void) __ptr64\n   \n   Library: Visual Studio */\n\nvoid __thiscall ATL::CAtlBaseModule::~CAtlBaseModule(CAtlBaseModule *this)\n\n{\n  DeleteCriticalSection((LPCRITICAL_SECTION)(this + 0x28));\n  if (*(void **)(this + 0x50) != (void *)0x0) {\n    free(*(void **)(this + 0x50));\n    *(undefined8 *)(this + 0x50) = 0;\n  }\n  *(undefined4 *)(this + 0x58) = 0;\n  *(undefined4 *)(this + 0x5c) = 0;\n  return;\n}\n\n", 
      "name": "~CAtlBaseModule", 
      "entry_point": "0x140004028"
    }, 
    {
      "signature": "void __thiscall _Lock(void)", 
      "disassembly": [
        {
          "address": "0x14000405c", 
          "code": "JMP qword ptr [0x140005160]"
        }
      ], 
      "c_code": "\nvoid __thiscall\nstd::basic_streambuf<char,struct_std::char_traits<char>_>::_Lock\n          (basic_streambuf<char,struct_std::char_traits<char>_> *this)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x00014000405c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  _Lock(this);\n  return;\n}\n\n", 
      "name": "_Lock", 
      "entry_point": "0x14000405c"
    }, 
    {
      "signature": "void __thiscall _Unlock(void)", 
      "disassembly": [
        {
          "address": "0x140004062", 
          "code": "JMP qword ptr [0x140005168]"
        }
      ], 
      "c_code": "\nvoid __thiscall\nstd::basic_streambuf<char,struct_std::char_traits<char>_>::_Unlock\n          (basic_streambuf<char,struct_std::char_traits<char>_> *this)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x000140004062. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  _Unlock(this);\n  return;\n}\n\n", 
      "name": "_Unlock", 
      "entry_point": "0x140004062"
    }, 
    {
      "signature": "__int64 __thiscall showmanyc(void)", 
      "disassembly": [
        {
          "address": "0x140004068", 
          "code": "JMP qword ptr [0x140005170]"
        }
      ], 
      "c_code": "\n__int64 __thiscall\nstd::basic_streambuf<char,struct_std::char_traits<char>_>::showmanyc\n          (basic_streambuf<char,struct_std::char_traits<char>_> *this)\n\n{\n  __int64 _Var1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140004068. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  _Var1 = showmanyc(this);\n  return _Var1;\n}\n\n", 
      "name": "showmanyc", 
      "entry_point": "0x140004068"
    }, 
    {
      "signature": "int __thiscall uflow(void)", 
      "disassembly": [
        {
          "address": "0x14000406e", 
          "code": "JMP qword ptr [0x140005178]"
        }
      ], 
      "c_code": "\nint __thiscall\nstd::basic_streambuf<char,struct_std::char_traits<char>_>::uflow\n          (basic_streambuf<char,struct_std::char_traits<char>_> *this)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x00014000406e. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = uflow(this);\n  return iVar1;\n}\n\n", 
      "name": "uflow", 
      "entry_point": "0x14000406e"
    }, 
    {
      "signature": "__int64 __thiscall xsgetn(char * param_1, __int64 param_2)", 
      "disassembly": [
        {
          "address": "0x140004074", 
          "code": "JMP qword ptr [0x140005180]"
        }
      ], 
      "c_code": "\n__int64 __thiscall\nstd::basic_streambuf<char,struct_std::char_traits<char>_>::xsgetn\n          (basic_streambuf<char,struct_std::char_traits<char>_> *this,char *param_1,__int64 param_2)\n\n{\n  __int64 _Var1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140004074. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  _Var1 = xsgetn(this,param_1,param_2);\n  return _Var1;\n}\n\n", 
      "name": "xsgetn", 
      "entry_point": "0x140004074"
    }, 
    {
      "signature": "__int64 __thiscall xsputn(char * param_1, __int64 param_2)", 
      "disassembly": [
        {
          "address": "0x14000407a", 
          "code": "JMP qword ptr [0x140005150]"
        }
      ], 
      "c_code": "\n__int64 __thiscall\nstd::basic_streambuf<char,struct_std::char_traits<char>_>::xsputn\n          (basic_streambuf<char,struct_std::char_traits<char>_> *this,char *param_1,__int64 param_2)\n\n{\n  __int64 _Var1;\n  \n                    /* WARNING: Could not recover jumptable at 0x00014000407a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  _Var1 = xsputn(this,param_1,param_2);\n  return _Var1;\n}\n\n", 
      "name": "xsputn", 
      "entry_point": "0x14000407a"
    }, 
    {
      "signature": "basic_streambuf<char,struct_std::char_traits<char>_> * __thiscall setbuf(char * param_1, __int64 param_2)", 
      "disassembly": [
        {
          "address": "0x140004080", 
          "code": "JMP qword ptr [0x1400050f8]"
        }
      ], 
      "c_code": "\nbasic_streambuf<char,struct_std::char_traits<char>_> * __thiscall\nstd::basic_streambuf<char,struct_std::char_traits<char>_>::setbuf\n          (basic_streambuf<char,struct_std::char_traits<char>_> *this,char *param_1,__int64 param_2)\n\n{\n  basic_streambuf<char,struct_std::char_traits<char>_> *pbVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140004080. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pbVar1 = setbuf(this,param_1,param_2);\n  return pbVar1;\n}\n\n", 
      "name": "setbuf", 
      "entry_point": "0x140004080"
    }, 
    {
      "signature": "int __thiscall sync(void)", 
      "disassembly": [
        {
          "address": "0x140004086", 
          "code": "JMP qword ptr [0x140005188]"
        }
      ], 
      "c_code": "\nint __thiscall\nstd::basic_streambuf<char,struct_std::char_traits<char>_>::sync\n          (basic_streambuf<char,struct_std::char_traits<char>_> *this)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140004086. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = sync(this);\n  return iVar1;\n}\n\n", 
      "name": "sync", 
      "entry_point": "0x140004086"
    }, 
    {
      "signature": "void __thiscall imbue(locale * param_1)", 
      "disassembly": [
        {
          "address": "0x14000408c", 
          "code": "JMP qword ptr [0x140005130]"
        }
      ], 
      "c_code": "\nvoid __thiscall\nstd::basic_streambuf<char,struct_std::char_traits<char>_>::imbue\n          (basic_streambuf<char,struct_std::char_traits<char>_> *this,locale *param_1)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x00014000408c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  imbue(this,param_1);\n  return;\n}\n\n", 
      "name": "imbue", 
      "entry_point": "0x14000408c"
    }, 
    {
      "signature": "undefined __CxxFrameHandler4(void)", 
      "disassembly": [
        {
          "address": "0x140004092", 
          "code": "JMP qword ptr [0x140005240]"
        }
      ], 
      "c_code": "\nvoid __CxxFrameHandler4(void)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x000140004092. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  __CxxFrameHandler4();\n  return;\n}\n\n", 
      "name": "__CxxFrameHandler4", 
      "entry_point": "0x140004092"
    }, 
    {
      "signature": "void * __cdecl memset(void * _Dst, int _Val, size_t _Size)", 
      "disassembly": [
        {
          "address": "0x140004098", 
          "code": "JMP qword ptr [0x1400051f8]"
        }
      ], 
      "c_code": "\nvoid * __cdecl memset(void *_Dst,int _Val,size_t _Size)\n\n{\n  void *pvVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140004098. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pvVar1 = memset(_Dst,_Val,_Size);\n  return pvVar1;\n}\n\n", 
      "name": "memset", 
      "entry_point": "0x140004098"
    }, 
    {
      "signature": "undefined __current_exception(void)", 
      "disassembly": [
        {
          "address": "0x1400040a4", 
          "code": "JMP qword ptr [0x140005208]"
        }
      ], 
      "c_code": "\nvoid __current_exception(void)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x0001400040a4. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  __current_exception();\n  return;\n}\n\n", 
      "name": "__current_exception", 
      "entry_point": "0x1400040a4"
    }, 
    {
      "signature": "undefined __current_exception_context(void)", 
      "disassembly": [
        {
          "address": "0x1400040aa", 
          "code": "JMP qword ptr [0x140005210]"
        }
      ], 
      "c_code": "\nvoid __current_exception_context(void)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x0001400040aa. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  __current_exception_context();\n  return;\n}\n\n", 
      "name": "__current_exception_context", 
      "entry_point": "0x1400040aa"
    }, 
    {
      "signature": "void * __cdecl memmove(void * _Dst, void * _Src, size_t _Size)", 
      "disassembly": [
        {
          "address": "0x1400040b0", 
          "code": "JMP qword ptr [0x140005218]"
        }
      ], 
      "c_code": "\nvoid * __cdecl memmove(void *_Dst,void *_Src,size_t _Size)\n\n{\n  void *pvVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400040b0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pvVar1 = memmove(_Dst,_Src,_Size);\n  return pvVar1;\n}\n\n", 
      "name": "memmove", 
      "entry_point": "0x1400040b0"
    }, 
    {
      "signature": "void __cdecl free(void * _Memory)", 
      "disassembly": [
        {
          "address": "0x1400040b6", 
          "code": "JMP qword ptr [0x140005258]"
        }
      ], 
      "c_code": "\nvoid __cdecl free(void *_Memory)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x0001400040b6. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  free(_Memory);\n  return;\n}\n\n", 
      "name": "free", 
      "entry_point": "0x1400040b6"
    }, 
    {
      "signature": "undefined _seh_filter_exe(void)", 
      "disassembly": [
        {
          "address": "0x1400040bc", 
          "code": "JMP qword ptr [0x140005308]"
        }
      ], 
      "c_code": "\nvoid _seh_filter_exe(void)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x0001400040bc. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  _seh_filter_exe();\n  return;\n}\n\n", 
      "name": "_seh_filter_exe", 
      "entry_point": "0x1400040bc"
    }, 
    {
      "signature": "undefined _set_app_type(void)", 
      "disassembly": [
        {
          "address": "0x1400040c2", 
          "code": "JMP qword ptr [0x140005300]"
        }
      ], 
      "c_code": "\nvoid _set_app_type(void)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x0001400040c2. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  _set_app_type();\n  return;\n}\n\n", 
      "name": "_set_app_type", 
      "entry_point": "0x1400040c2"
    }, 
    {
      "signature": "undefined __setusermatherr(void)", 
      "disassembly": [
        {
          "address": "0x1400040c8", 
          "code": "JMP qword ptr [0x140005288]"
        }
      ], 
      "c_code": "\nvoid __setusermatherr(void)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x0001400040c8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  __setusermatherr();\n  return;\n}\n\n", 
      "name": "__setusermatherr", 
      "entry_point": "0x1400040c8"
    }, 
    {
      "signature": "undefined _configure_wide_argv(void)", 
      "disassembly": [
        {
          "address": "0x1400040ce", 
          "code": "JMP qword ptr [0x1400052f0]"
        }
      ], 
      "c_code": "\nvoid _configure_wide_argv(void)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x0001400040ce. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  _configure_wide_argv();\n  return;\n}\n\n", 
      "name": "_configure_wide_argv", 
      "entry_point": "0x1400040ce"
    }, 
    {
      "signature": "undefined _initialize_wide_environment(void)", 
      "disassembly": [
        {
          "address": "0x1400040d4", 
          "code": "JMP qword ptr [0x1400052e8]"
        }
      ], 
      "c_code": "\nvoid _initialize_wide_environment(void)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x0001400040d4. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  _initialize_wide_environment();\n  return;\n}\n\n", 
      "name": "_initialize_wide_environment", 
      "entry_point": "0x1400040d4"
    }, 
    {
      "signature": "undefined _get_wide_winmain_command_line(void)", 
      "disassembly": [
        {
          "address": "0x1400040da", 
          "code": "JMP qword ptr [0x1400052e0]"
        }
      ], 
      "c_code": "\nvoid _get_wide_winmain_command_line(void)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x0001400040da. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  _get_wide_winmain_command_line();\n  return;\n}\n\n", 
      "name": "_get_wide_winmain_command_line", 
      "entry_point": "0x1400040da"
    }, 
    {
      "signature": "undefined _initterm(void)", 
      "disassembly": [
        {
          "address": "0x1400040e0", 
          "code": "JMP qword ptr [0x1400052d8]"
        }
      ], 
      "c_code": "\nvoid _initterm(void)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x0001400040e0. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  _initterm();\n  return;\n}\n\n", 
      "name": "_initterm", 
      "entry_point": "0x1400040e0"
    }, 
    {
      "signature": "undefined _initterm_e(void)", 
      "disassembly": [
        {
          "address": "0x1400040e6", 
          "code": "JMP qword ptr [0x1400052d0]"
        }
      ], 
      "c_code": "\nvoid _initterm_e(void)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x0001400040e6. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  _initterm_e();\n  return;\n}\n\n", 
      "name": "_initterm_e", 
      "entry_point": "0x1400040e6"
    }, 
    {
      "signature": "noreturn void __cdecl exit(int _Code)", 
      "disassembly": [
        {
          "address": "0x1400040ec", 
          "code": "JMP qword ptr [0x1400052c8]"
        }
      ], 
      "c_code": "\nvoid __cdecl exit(int _Code)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x0001400040ec. Too many branches */\n                    /* WARNING: Subroutine does not return */\n                    /* WARNING: Treating indirect jump as call */\n  exit(_Code);\n  return;\n}\n\n", 
      "name": "exit", 
      "entry_point": "0x1400040ec"
    }, 
    {
      "signature": "noreturn void __cdecl _exit(int _Code)", 
      "disassembly": [
        {
          "address": "0x1400040f2", 
          "code": "JMP qword ptr [0x1400052c0]"
        }
      ], 
      "c_code": "\nvoid __cdecl _exit(int _Code)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x0001400040f2. Too many branches */\n                    /* WARNING: Subroutine does not return */\n                    /* WARNING: Treating indirect jump as call */\n  _exit(_Code);\n  return;\n}\n\n", 
      "name": "_exit", 
      "entry_point": "0x1400040f2"
    }, 
    {
      "signature": "errno_t __cdecl _set_fmode(int _Mode)", 
      "disassembly": [
        {
          "address": "0x1400040f8", 
          "code": "JMP qword ptr [0x140005330]"
        }
      ], 
      "c_code": "\nerrno_t __cdecl _set_fmode(int _Mode)\n\n{\n  errno_t eVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400040f8. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  eVar1 = _set_fmode(_Mode);\n  return eVar1;\n}\n\n", 
      "name": "_set_fmode", 
      "entry_point": "0x1400040f8"
    }, 
    {
      "signature": "void __cdecl _cexit(void)", 
      "disassembly": [
        {
          "address": "0x1400040fe", 
          "code": "JMP qword ptr [0x1400052b0]"
        }
      ], 
      "c_code": "\nvoid __cdecl _cexit(void)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x0001400040fe. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  _cexit();\n  return;\n}\n\n", 
      "name": "_cexit", 
      "entry_point": "0x1400040fe"
    }, 
    {
      "signature": "undefined _register_thread_local_exe_atexit_callback(void)", 
      "disassembly": [
        {
          "address": "0x14000410a", 
          "code": "JMP qword ptr [0x1400052a8]"
        }
      ], 
      "c_code": "\nvoid _register_thread_local_exe_atexit_callback(void)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x00014000410a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  _register_thread_local_exe_atexit_callback();\n  return;\n}\n\n", 
      "name": "_register_thread_local_exe_atexit_callback", 
      "entry_point": "0x14000410a"
    }, 
    {
      "signature": "int __cdecl _configthreadlocale(int _Flag)", 
      "disassembly": [
        {
          "address": "0x140004110", 
          "code": "JMP qword ptr [0x140005278]"
        }
      ], 
      "c_code": "\nint __cdecl _configthreadlocale(int _Flag)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140004110. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = _configthreadlocale(_Flag);\n  return iVar1;\n}\n\n", 
      "name": "_configthreadlocale", 
      "entry_point": "0x140004110"
    }, 
    {
      "signature": "undefined __p__commode(void)", 
      "disassembly": [
        {
          "address": "0x14000411c", 
          "code": "JMP qword ptr [0x140005328]"
        }
      ], 
      "c_code": "\nvoid __p__commode(void)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x00014000411c. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  __p__commode();\n  return;\n}\n\n", 
      "name": "__p__commode", 
      "entry_point": "0x14000411c"
    }, 
    {
      "signature": "undefined _initialize_onexit_table(void)", 
      "disassembly": [
        {
          "address": "0x140004122", 
          "code": "JMP qword ptr [0x140005298]"
        }
      ], 
      "c_code": "\nvoid _initialize_onexit_table(void)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x000140004122. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  _initialize_onexit_table();\n  return;\n}\n\n", 
      "name": "_initialize_onexit_table", 
      "entry_point": "0x140004122"
    }, 
    {
      "signature": "undefined _register_onexit_function(void)", 
      "disassembly": [
        {
          "address": "0x140004128", 
          "code": "JMP qword ptr [0x1400052f8]"
        }
      ], 
      "c_code": "\nvoid _register_onexit_function(void)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x000140004128. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  _register_onexit_function();\n  return;\n}\n\n", 
      "name": "_register_onexit_function", 
      "entry_point": "0x140004128"
    }, 
    {
      "signature": "undefined _crt_atexit(void)", 
      "disassembly": [
        {
          "address": "0x14000412e", 
          "code": "JMP qword ptr [0x1400052a0]"
        }
      ], 
      "c_code": "\nvoid _crt_atexit(void)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x00014000412e. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  _crt_atexit();\n  return;\n}\n\n", 
      "name": "_crt_atexit", 
      "entry_point": "0x14000412e"
    }, 
    {
      "signature": "noreturn undefined terminate(void)", 
      "disassembly": [
        {
          "address": "0x140004134", 
          "code": "JMP qword ptr [0x140005310]"
        }
      ], 
      "c_code": "\nvoid terminate(void)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x000140004134. Too many branches */\n                    /* WARNING: Subroutine does not return */\n                    /* WARNING: Treating indirect jump as call */\n  terminate();\n  return;\n}\n\n", 
      "name": "terminate", 
      "entry_point": "0x140004134"
    }, 
    {
      "signature": "int __cdecl AfxInitialize(int param_1, ulong param_2)", 
      "disassembly": [
        {
          "address": "0x14000413c", 
          "code": "MOV qword ptr [RSP + 0x8],RBX"
        }, 
        {
          "address": "0x140004141", 
          "code": "PUSH RDI"
        }, 
        {
          "address": "0x140004142", 
          "code": "SUB RSP,0x20"
        }, 
        {
          "address": "0x140004146", 
          "code": "MOV EDI,EDX"
        }, 
        {
          "address": "0x140004148", 
          "code": "MOV EBX,ECX"
        }, 
        {
          "address": "0x14000414a", 
          "code": "CALL 0x1400030f1"
        }, 
        {
          "address": "0x14000414f", 
          "code": "MOV byte ptr [RAX + 0x28],BL"
        }, 
        {
          "address": "0x140004152", 
          "code": "MOV RBX,qword ptr [RSP + 0x30]"
        }, 
        {
          "address": "0x140004157", 
          "code": "MOV dword ptr [RAX + 0x78],EDI"
        }, 
        {
          "address": "0x14000415a", 
          "code": "MOV EAX,0x1"
        }, 
        {
          "address": "0x14000415f", 
          "code": "ADD RSP,0x20"
        }, 
        {
          "address": "0x140004163", 
          "code": "POP RDI"
        }, 
        {
          "address": "0x140004164", 
          "code": "RET"
        }
      ], 
      "c_code": "\n/* Library Function - Single Match\n    int __cdecl AfxInitialize(int,unsigned long)\n   \n   Libraries: Visual Studio 2008 Release, Visual Studio 2010 Release, Visual Studio 2012 Release,\n   Visual Studio 2015 Release */\n\nint __cdecl AfxInitialize(int param_1,ulong param_2)\n\n{\n  AFX_MODULE_STATE *pAVar1;\n  \n  pAVar1 = AfxGetModuleState();\n  pAVar1[0x28] = SUB41(param_1,0);\n  *(ulong *)(pAVar1 + 0x78) = param_2;\n  return 1;\n}\n\n", 
      "name": "AfxInitialize", 
      "entry_point": "0x14000413c"
    }, 
    {
      "signature": "int __cdecl AfxWinMain(HINSTANCE__ * param_1, HINSTANCE__ * param_2, wchar_t * param_3, int param_4)", 
      "disassembly": [
        {
          "address": "0x140004168", 
          "code": "JMP 0x14000416d"
        }
      ], 
      "c_code": "\nint __cdecl AfxWinMain(HINSTANCE__ *param_1,HINSTANCE__ *param_2,wchar_t *param_3,int param_4)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x00014000416d. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = AfxWinMain(param_1,param_2,param_3,param_4);\n  return iVar1;\n}\n\n", 
      "name": "AfxWinMain", 
      "entry_point": "0x140004168"
    }, 
    {
      "signature": "int __cdecl AfxWinMain(HINSTANCE__ * param_1, HINSTANCE__ * param_2, wchar_t * param_3, int param_4)", 
      "disassembly": [
        {
          "address": "0x14000416d", 
          "code": "JMP qword ptr [0x140005890]"
        }
      ], 
      "c_code": "\nint __cdecl AfxWinMain(HINSTANCE__ *param_1,HINSTANCE__ *param_2,wchar_t *param_3,int param_4)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x00014000416d. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = AfxWinMain(param_1,param_2,param_3,param_4);\n  return iVar1;\n}\n\n", 
      "name": "AfxWinMain", 
      "entry_point": "0x14000416d"
    }, 
    {
      "signature": "noreturn void __stdcall _CxxThrowException(void * pExceptionObject, ThrowInfo * pThrowInfo)", 
      "disassembly": [
        {
          "address": "0x1400041f3", 
          "code": "JMP qword ptr [0x140005230]"
        }
      ], 
      "c_code": "\nvoid __stdcall _CxxThrowException(void *pExceptionObject,ThrowInfo *pThrowInfo)\n\n{\n                    /* WARNING: Could not recover jumptable at 0x0001400041f3. Too many branches */\n                    /* WARNING: Subroutine does not return */\n                    /* WARNING: Treating indirect jump as call */\n  _CxxThrowException(pExceptionObject,pThrowInfo);\n  return;\n}\n\n", 
      "name": "_CxxThrowException", 
      "entry_point": "0x1400041f3"
    }, 
    {
      "signature": "int __cdecl memcmp(void * _Buf1, void * _Buf2, size_t _Size)", 
      "disassembly": [
        {
          "address": "0x1400041f9", 
          "code": "JMP qword ptr [0x140005228]"
        }
      ], 
      "c_code": "\nint __cdecl memcmp(void *_Buf1,void *_Buf2,size_t _Size)\n\n{\n  int iVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400041f9. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  iVar1 = memcmp(_Buf1,_Buf2,_Size);\n  return iVar1;\n}\n\n", 
      "name": "memcmp", 
      "entry_point": "0x1400041f9"
    }, 
    {
      "signature": "void * __cdecl memcpy(void * _Dst, void * _Src, size_t _Size)", 
      "disassembly": [
        {
          "address": "0x1400041ff", 
          "code": "JMP qword ptr [0x140005220]"
        }
      ], 
      "c_code": "\nvoid * __cdecl memcpy(void *_Dst,void *_Src,size_t _Size)\n\n{\n  void *pvVar1;\n  \n                    /* WARNING: Could not recover jumptable at 0x0001400041ff. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  pvVar1 = memcpy(_Dst,_Src,_Size);\n  return pvVar1;\n}\n\n", 
      "name": "memcpy", 
      "entry_point": "0x1400041ff"
    }, 
    {
      "signature": "undefined __fastcall _guard_dispatch_icall(void)", 
      "disassembly": [
        {
          "address": "0x140004220", 
          "code": "JMP RAX"
        }
      ], 
      "c_code": "\n/* WARNING: This is an inlined function */\n\nvoid _guard_dispatch_icall(void)\n\n{\n  code *UNRECOVERED_JUMPTABLE;\n  \n                    /* WARNING: Could not recover jumptable at 0x000140004220. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n", 
      "name": "_guard_dispatch_icall", 
      "entry_point": "0x140004220"
    }
  ], 
  "program_info": {
    "executable_format": "Portable Executable (PE)", 
    "language_id": "x86:LE:64:default", 
    "compiler_spec_id": "windows", 
    "name": "example.exe"
  }
}